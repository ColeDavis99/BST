#include "header.h"
#include "bst.hpp"
#include "node.hpp"

int main()
{




	BST<int,string> bst0(Node<int, string> (2, "RootVal"));
	bst0.emplace(Node<int, string>(20, "value"));
	bst0.emplace(Node<int, string>(9, "value"));
	bst0.emplace(Node<int, string>(3, "value"));
	bst0.emplace(Node<int, string>(6, "value"));
	bst0.emplace(Node<int, string>(14, "value"));
	bst0.emplace(Node<int, string>(15, "value"));
	bst0.emplace(Node<int, string>(1, "value"));
	bst0.emplace(Node<int, string>(17, "value"));
	bst0.emplace(Node<int, string>(10, "value"));
	bst0.emplace(Node<int, string>(19, "value"));
	bst0.emplace(Node<int, string>(7, "value"));

	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(17)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(9)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(19)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(10)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(2)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(14)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(6)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(3)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(15)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(7)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(1)->getKey());
	bst0.ascend_printout(bst0.getRoot());
	bst0.deleteNode(bst0.at(20)->getKey());



	BST<int,string> bst1(Node<int, string> (3, "RootVal"));
	bst1.emplace(Node<int, string>(18, "value"));
	bst1.emplace(Node<int, string>(13, "value"));
	bst1.emplace(Node<int, string>(10, "value"));
	bst1.emplace(Node<int, string>(11, "value"));
	bst1.emplace(Node<int, string>(19, "value"));
	bst1.emplace(Node<int, string>(14, "value"));
	bst1.emplace(Node<int, string>(4, "value"));
	bst1.emplace(Node<int, string>(15, "value"));
	bst1.emplace(Node<int, string>(7, "value"));
	bst1.emplace(Node<int, string>(1, "value"));
	bst1.emplace(Node<int, string>(5, "value"));
	bst1.emplace(Node<int, string>(2, "value"));

	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(19)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(2)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(11)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(1)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(13)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(18)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(10)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(4)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(15)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(5)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(7)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(14)->getKey());
	bst1.ascend_printout(bst1.getRoot());
	bst1.deleteNode(bst1.at(3)->getKey());



	BST<int,string> bst2(Node<int, string> (14, "RootVal"));
	bst2.emplace(Node<int, string>(1, "value"));
	bst2.emplace(Node<int, string>(18, "value"));
	bst2.emplace(Node<int, string>(20, "value"));
	bst2.emplace(Node<int, string>(17, "value"));
	bst2.emplace(Node<int, string>(15, "value"));
	bst2.emplace(Node<int, string>(9, "value"));
	bst2.emplace(Node<int, string>(6, "value"));
	bst2.emplace(Node<int, string>(13, "value"));
	bst2.emplace(Node<int, string>(12, "value"));
	bst2.emplace(Node<int, string>(19, "value"));
	bst2.emplace(Node<int, string>(3, "value"));
	bst2.emplace(Node<int, string>(16, "value"));

	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(3)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(15)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(6)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(19)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(16)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(9)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(12)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(13)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(17)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(1)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(14)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(20)->getKey());
	bst2.ascend_printout(bst2.getRoot());
	bst2.deleteNode(bst2.at(18)->getKey());



	BST<int,string> bst3(Node<int, string> (18, "RootVal"));
	bst3.emplace(Node<int, string>(6, "value"));
	bst3.emplace(Node<int, string>(17, "value"));
	bst3.emplace(Node<int, string>(14, "value"));
	bst3.emplace(Node<int, string>(19, "value"));
	bst3.emplace(Node<int, string>(8, "value"));
	bst3.emplace(Node<int, string>(20, "value"));
	bst3.emplace(Node<int, string>(3, "value"));
	bst3.emplace(Node<int, string>(5, "value"));
	bst3.emplace(Node<int, string>(2, "value"));
	bst3.emplace(Node<int, string>(1, "value"));

	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(3)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(5)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(14)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(8)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(20)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(1)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(2)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(19)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(18)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(17)->getKey());
	bst3.ascend_printout(bst3.getRoot());
	bst3.deleteNode(bst3.at(6)->getKey());



	BST<int,string> bst4(Node<int, string> (19, "RootVal"));
	bst4.emplace(Node<int, string>(18, "value"));
	bst4.emplace(Node<int, string>(15, "value"));
	bst4.emplace(Node<int, string>(9, "value"));
	bst4.emplace(Node<int, string>(20, "value"));
	bst4.emplace(Node<int, string>(6, "value"));
	bst4.emplace(Node<int, string>(7, "value"));
	bst4.emplace(Node<int, string>(13, "value"));
	bst4.emplace(Node<int, string>(16, "value"));
	bst4.emplace(Node<int, string>(11, "value"));
	bst4.emplace(Node<int, string>(14, "value"));

	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(18)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(16)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(13)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(14)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(9)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(19)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(11)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(15)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(6)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(7)->getKey());
	bst4.ascend_printout(bst4.getRoot());
	bst4.deleteNode(bst4.at(20)->getKey());



	BST<int,string> bst5(Node<int, string> (12, "RootVal"));
	bst5.emplace(Node<int, string>(4, "value"));
	bst5.emplace(Node<int, string>(18, "value"));
	bst5.emplace(Node<int, string>(8, "value"));
	bst5.emplace(Node<int, string>(16, "value"));
	bst5.emplace(Node<int, string>(20, "value"));
	bst5.emplace(Node<int, string>(19, "value"));
	bst5.emplace(Node<int, string>(6, "value"));
	bst5.emplace(Node<int, string>(14, "value"));
	bst5.emplace(Node<int, string>(17, "value"));
	bst5.emplace(Node<int, string>(13, "value"));
	bst5.emplace(Node<int, string>(10, "value"));

	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(20)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(8)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(10)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(12)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(19)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(4)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(16)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(17)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(14)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(6)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(13)->getKey());
	bst5.ascend_printout(bst5.getRoot());
	bst5.deleteNode(bst5.at(18)->getKey());



	BST<int,string> bst6(Node<int, string> (2, "RootVal"));
	bst6.emplace(Node<int, string>(3, "value"));
	bst6.emplace(Node<int, string>(6, "value"));
	bst6.emplace(Node<int, string>(9, "value"));
	bst6.emplace(Node<int, string>(14, "value"));
	bst6.emplace(Node<int, string>(19, "value"));
	bst6.emplace(Node<int, string>(1, "value"));
	bst6.emplace(Node<int, string>(16, "value"));
	bst6.emplace(Node<int, string>(8, "value"));
	bst6.emplace(Node<int, string>(10, "value"));
	bst6.emplace(Node<int, string>(15, "value"));
	bst6.emplace(Node<int, string>(11, "value"));
	bst6.emplace(Node<int, string>(4, "value"));

	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(14)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(9)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(10)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(3)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(4)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(15)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(2)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(16)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(1)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(8)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(11)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(19)->getKey());
	bst6.ascend_printout(bst6.getRoot());
	bst6.deleteNode(bst6.at(6)->getKey());



	BST<int,string> bst7(Node<int, string> (4, "RootVal"));
	bst7.emplace(Node<int, string>(1, "value"));
	bst7.emplace(Node<int, string>(19, "value"));
	bst7.emplace(Node<int, string>(17, "value"));
	bst7.emplace(Node<int, string>(3, "value"));
	bst7.emplace(Node<int, string>(12, "value"));
	bst7.emplace(Node<int, string>(9, "value"));
	bst7.emplace(Node<int, string>(8, "value"));
	bst7.emplace(Node<int, string>(13, "value"));
	bst7.emplace(Node<int, string>(10, "value"));
	bst7.emplace(Node<int, string>(18, "value"));
	bst7.emplace(Node<int, string>(7, "value"));

	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(19)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(13)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(17)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(8)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(18)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(9)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(4)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(7)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(10)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(1)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(3)->getKey());
	bst7.ascend_printout(bst7.getRoot());
	bst7.deleteNode(bst7.at(12)->getKey());



	BST<int,string> bst8(Node<int, string> (12, "RootVal"));
	bst8.emplace(Node<int, string>(2, "value"));
	bst8.emplace(Node<int, string>(11, "value"));
	bst8.emplace(Node<int, string>(20, "value"));
	bst8.emplace(Node<int, string>(17, "value"));
	bst8.emplace(Node<int, string>(3, "value"));
	bst8.emplace(Node<int, string>(6, "value"));
	bst8.emplace(Node<int, string>(1, "value"));
	bst8.emplace(Node<int, string>(15, "value"));
	bst8.emplace(Node<int, string>(9, "value"));
	bst8.emplace(Node<int, string>(5, "value"));
	bst8.emplace(Node<int, string>(16, "value"));

	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(3)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(11)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(5)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(1)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(2)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(12)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(20)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(6)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(15)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(17)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(9)->getKey());
	bst8.ascend_printout(bst8.getRoot());
	bst8.deleteNode(bst8.at(16)->getKey());



	BST<int,string> bst9(Node<int, string> (6, "RootVal"));
	bst9.emplace(Node<int, string>(11, "value"));
	bst9.emplace(Node<int, string>(8, "value"));
	bst9.emplace(Node<int, string>(16, "value"));
	bst9.emplace(Node<int, string>(5, "value"));
	bst9.emplace(Node<int, string>(14, "value"));
	bst9.emplace(Node<int, string>(15, "value"));
	bst9.emplace(Node<int, string>(19, "value"));
	bst9.emplace(Node<int, string>(20, "value"));
	bst9.emplace(Node<int, string>(9, "value"));
	bst9.emplace(Node<int, string>(3, "value"));
	bst9.emplace(Node<int, string>(17, "value"));

	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(3)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(16)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(20)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(5)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(11)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(15)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(14)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(17)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(19)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(9)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(8)->getKey());
	bst9.ascend_printout(bst9.getRoot());
	bst9.deleteNode(bst9.at(6)->getKey());



	BST<int,string> bst10(Node<int, string> (19, "RootVal"));
	bst10.emplace(Node<int, string>(5, "value"));
	bst10.emplace(Node<int, string>(18, "value"));
	bst10.emplace(Node<int, string>(2, "value"));
	bst10.emplace(Node<int, string>(4, "value"));
	bst10.emplace(Node<int, string>(14, "value"));
	bst10.emplace(Node<int, string>(20, "value"));
	bst10.emplace(Node<int, string>(15, "value"));
	bst10.emplace(Node<int, string>(6, "value"));
	bst10.emplace(Node<int, string>(1, "value"));
	bst10.emplace(Node<int, string>(8, "value"));

	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(18)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(4)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(19)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(2)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(1)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(8)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(5)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(14)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(15)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(6)->getKey());
	bst10.ascend_printout(bst10.getRoot());
	bst10.deleteNode(bst10.at(20)->getKey());



	BST<int,string> bst11(Node<int, string> (13, "RootVal"));
	bst11.emplace(Node<int, string>(12, "value"));
	bst11.emplace(Node<int, string>(8, "value"));
	bst11.emplace(Node<int, string>(4, "value"));
	bst11.emplace(Node<int, string>(17, "value"));
	bst11.emplace(Node<int, string>(3, "value"));
	bst11.emplace(Node<int, string>(16, "value"));
	bst11.emplace(Node<int, string>(19, "value"));
	bst11.emplace(Node<int, string>(2, "value"));
	bst11.emplace(Node<int, string>(7, "value"));
	bst11.emplace(Node<int, string>(15, "value"));
	bst11.emplace(Node<int, string>(14, "value"));

	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(4)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(19)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(14)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(17)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(12)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(15)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(2)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(3)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(13)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(7)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(8)->getKey());
	bst11.ascend_printout(bst11.getRoot());
	bst11.deleteNode(bst11.at(16)->getKey());



	BST<int,string> bst12(Node<int, string> (12, "RootVal"));
	bst12.emplace(Node<int, string>(3, "value"));
	bst12.emplace(Node<int, string>(7, "value"));
	bst12.emplace(Node<int, string>(6, "value"));
	bst12.emplace(Node<int, string>(20, "value"));
	bst12.emplace(Node<int, string>(18, "value"));
	bst12.emplace(Node<int, string>(19, "value"));
	bst12.emplace(Node<int, string>(5, "value"));
	bst12.emplace(Node<int, string>(15, "value"));
	bst12.emplace(Node<int, string>(17, "value"));
	bst12.emplace(Node<int, string>(16, "value"));
	bst12.emplace(Node<int, string>(1, "value"));

	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(5)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(19)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(17)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(16)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(7)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(1)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(6)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(18)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(20)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(12)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(3)->getKey());
	bst12.ascend_printout(bst12.getRoot());
	bst12.deleteNode(bst12.at(15)->getKey());



	BST<int,string> bst13(Node<int, string> (2, "RootVal"));
	bst13.emplace(Node<int, string>(11, "value"));
	bst13.emplace(Node<int, string>(9, "value"));
	bst13.emplace(Node<int, string>(5, "value"));
	bst13.emplace(Node<int, string>(17, "value"));
	bst13.emplace(Node<int, string>(19, "value"));
	bst13.emplace(Node<int, string>(8, "value"));
	bst13.emplace(Node<int, string>(13, "value"));
	bst13.emplace(Node<int, string>(1, "value"));
	bst13.emplace(Node<int, string>(15, "value"));
	bst13.emplace(Node<int, string>(7, "value"));
	bst13.emplace(Node<int, string>(18, "value"));

	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(9)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(8)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(13)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(19)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(1)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(11)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(15)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(17)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(2)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(7)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(18)->getKey());
	bst13.ascend_printout(bst13.getRoot());
	bst13.deleteNode(bst13.at(5)->getKey());



	BST<int,string> bst14(Node<int, string> (1, "RootVal"));
	bst14.emplace(Node<int, string>(11, "value"));
	bst14.emplace(Node<int, string>(9, "value"));
	bst14.emplace(Node<int, string>(4, "value"));
	bst14.emplace(Node<int, string>(12, "value"));
	bst14.emplace(Node<int, string>(20, "value"));
	bst14.emplace(Node<int, string>(7, "value"));
	bst14.emplace(Node<int, string>(8, "value"));
	bst14.emplace(Node<int, string>(6, "value"));
	bst14.emplace(Node<int, string>(14, "value"));
	bst14.emplace(Node<int, string>(18, "value"));
	bst14.emplace(Node<int, string>(15, "value"));
	bst14.emplace(Node<int, string>(10, "value"));

	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(1)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(20)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(9)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(10)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(4)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(12)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(6)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(7)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(14)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(11)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(18)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(15)->getKey());
	bst14.ascend_printout(bst14.getRoot());
	bst14.deleteNode(bst14.at(8)->getKey());



	BST<int,string> bst15(Node<int, string> (3, "RootVal"));
	bst15.emplace(Node<int, string>(14, "value"));
	bst15.emplace(Node<int, string>(15, "value"));
	bst15.emplace(Node<int, string>(1, "value"));
	bst15.emplace(Node<int, string>(11, "value"));
	bst15.emplace(Node<int, string>(18, "value"));
	bst15.emplace(Node<int, string>(13, "value"));
	bst15.emplace(Node<int, string>(17, "value"));
	bst15.emplace(Node<int, string>(5, "value"));
	bst15.emplace(Node<int, string>(19, "value"));
	bst15.emplace(Node<int, string>(12, "value"));
	bst15.emplace(Node<int, string>(2, "value"));
	bst15.emplace(Node<int, string>(10, "value"));
	bst15.emplace(Node<int, string>(7, "value"));

	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(13)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(3)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(17)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(2)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(14)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(10)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(5)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(15)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(1)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(7)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(11)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(19)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(18)->getKey());
	bst15.ascend_printout(bst15.getRoot());
	bst15.deleteNode(bst15.at(12)->getKey());



	BST<int,string> bst16(Node<int, string> (16, "RootVal"));
	bst16.emplace(Node<int, string>(20, "value"));
	bst16.emplace(Node<int, string>(3, "value"));
	bst16.emplace(Node<int, string>(2, "value"));
	bst16.emplace(Node<int, string>(18, "value"));
	bst16.emplace(Node<int, string>(11, "value"));
	bst16.emplace(Node<int, string>(5, "value"));
	bst16.emplace(Node<int, string>(14, "value"));
	bst16.emplace(Node<int, string>(9, "value"));
	bst16.emplace(Node<int, string>(12, "value"));
	bst16.emplace(Node<int, string>(17, "value"));
	bst16.emplace(Node<int, string>(10, "value"));
	bst16.emplace(Node<int, string>(4, "value"));

	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(11)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(3)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(2)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(14)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(9)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(10)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(4)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(17)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(18)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(12)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(5)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(20)->getKey());
	bst16.ascend_printout(bst16.getRoot());
	bst16.deleteNode(bst16.at(16)->getKey());



	BST<int,string> bst17(Node<int, string> (6, "RootVal"));
	bst17.emplace(Node<int, string>(20, "value"));
	bst17.emplace(Node<int, string>(11, "value"));
	bst17.emplace(Node<int, string>(3, "value"));
	bst17.emplace(Node<int, string>(18, "value"));
	bst17.emplace(Node<int, string>(9, "value"));
	bst17.emplace(Node<int, string>(13, "value"));
	bst17.emplace(Node<int, string>(14, "value"));
	bst17.emplace(Node<int, string>(15, "value"));
	bst17.emplace(Node<int, string>(10, "value"));
	bst17.emplace(Node<int, string>(17, "value"));
	bst17.emplace(Node<int, string>(19, "value"));
	bst17.emplace(Node<int, string>(1, "value"));
	bst17.emplace(Node<int, string>(16, "value"));
	bst17.emplace(Node<int, string>(8, "value"));
	bst17.emplace(Node<int, string>(12, "value"));

	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(20)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(3)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(17)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(15)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(19)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(6)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(16)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(14)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(11)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(10)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(9)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(1)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(18)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(13)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(8)->getKey());
	bst17.ascend_printout(bst17.getRoot());
	bst17.deleteNode(bst17.at(12)->getKey());



	BST<int,string> bst18(Node<int, string> (8, "RootVal"));
	bst18.emplace(Node<int, string>(12, "value"));
	bst18.emplace(Node<int, string>(13, "value"));
	bst18.emplace(Node<int, string>(15, "value"));
	bst18.emplace(Node<int, string>(5, "value"));
	bst18.emplace(Node<int, string>(7, "value"));
	bst18.emplace(Node<int, string>(4, "value"));
	bst18.emplace(Node<int, string>(16, "value"));
	bst18.emplace(Node<int, string>(6, "value"));
	bst18.emplace(Node<int, string>(19, "value"));
	bst18.emplace(Node<int, string>(1, "value"));
	bst18.emplace(Node<int, string>(20, "value"));
	bst18.emplace(Node<int, string>(17, "value"));

	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(17)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(4)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(5)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(15)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(12)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(6)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(8)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(13)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(16)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(7)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(19)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(20)->getKey());
	bst18.ascend_printout(bst18.getRoot());
	bst18.deleteNode(bst18.at(1)->getKey());



	BST<int,string> bst19(Node<int, string> (20, "RootVal"));
	bst19.emplace(Node<int, string>(6, "value"));
	bst19.emplace(Node<int, string>(3, "value"));
	bst19.emplace(Node<int, string>(9, "value"));
	bst19.emplace(Node<int, string>(14, "value"));
	bst19.emplace(Node<int, string>(4, "value"));
	bst19.emplace(Node<int, string>(1, "value"));
	bst19.emplace(Node<int, string>(8, "value"));
	bst19.emplace(Node<int, string>(18, "value"));
	bst19.emplace(Node<int, string>(17, "value"));
	bst19.emplace(Node<int, string>(5, "value"));
	bst19.emplace(Node<int, string>(12, "value"));
	bst19.emplace(Node<int, string>(16, "value"));

	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(5)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(4)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(6)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(16)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(1)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(17)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(20)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(9)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(8)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(18)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(12)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(3)->getKey());
	bst19.ascend_printout(bst19.getRoot());
	bst19.deleteNode(bst19.at(14)->getKey());



	BST<int,string> bst20(Node<int, string> (20, "RootVal"));
	bst20.emplace(Node<int, string>(16, "value"));
	bst20.emplace(Node<int, string>(9, "value"));
	bst20.emplace(Node<int, string>(17, "value"));
	bst20.emplace(Node<int, string>(18, "value"));
	bst20.emplace(Node<int, string>(13, "value"));
	bst20.emplace(Node<int, string>(11, "value"));
	bst20.emplace(Node<int, string>(2, "value"));
	bst20.emplace(Node<int, string>(12, "value"));
	bst20.emplace(Node<int, string>(7, "value"));
	bst20.emplace(Node<int, string>(10, "value"));
	bst20.emplace(Node<int, string>(1, "value"));

	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(12)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(10)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(9)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(7)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(1)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(17)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(11)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(18)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(2)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(16)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(20)->getKey());
	bst20.ascend_printout(bst20.getRoot());
	bst20.deleteNode(bst20.at(13)->getKey());



	BST<int,string> bst21(Node<int, string> (13, "RootVal"));
	bst21.emplace(Node<int, string>(20, "value"));
	bst21.emplace(Node<int, string>(8, "value"));
	bst21.emplace(Node<int, string>(11, "value"));
	bst21.emplace(Node<int, string>(19, "value"));
	bst21.emplace(Node<int, string>(14, "value"));
	bst21.emplace(Node<int, string>(5, "value"));
	bst21.emplace(Node<int, string>(7, "value"));
	bst21.emplace(Node<int, string>(9, "value"));
	bst21.emplace(Node<int, string>(2, "value"));
	bst21.emplace(Node<int, string>(3, "value"));
	bst21.emplace(Node<int, string>(17, "value"));
	bst21.emplace(Node<int, string>(16, "value"));
	bst21.emplace(Node<int, string>(4, "value"));

	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(17)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(3)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(9)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(11)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(5)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(2)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(8)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(16)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(20)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(7)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(4)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(19)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(13)->getKey());
	bst21.ascend_printout(bst21.getRoot());
	bst21.deleteNode(bst21.at(14)->getKey());



	BST<int,string> bst22(Node<int, string> (4, "RootVal"));
	bst22.emplace(Node<int, string>(8, "value"));
	bst22.emplace(Node<int, string>(6, "value"));
	bst22.emplace(Node<int, string>(3, "value"));
	bst22.emplace(Node<int, string>(5, "value"));
	bst22.emplace(Node<int, string>(13, "value"));
	bst22.emplace(Node<int, string>(19, "value"));
	bst22.emplace(Node<int, string>(16, "value"));
	bst22.emplace(Node<int, string>(2, "value"));
	bst22.emplace(Node<int, string>(7, "value"));
	bst22.emplace(Node<int, string>(11, "value"));

	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(16)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(2)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(5)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(13)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(19)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(4)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(6)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(3)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(11)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(8)->getKey());
	bst22.ascend_printout(bst22.getRoot());
	bst22.deleteNode(bst22.at(7)->getKey());



	BST<int,string> bst23(Node<int, string> (10, "RootVal"));
	bst23.emplace(Node<int, string>(19, "value"));
	bst23.emplace(Node<int, string>(12, "value"));
	bst23.emplace(Node<int, string>(18, "value"));
	bst23.emplace(Node<int, string>(4, "value"));
	bst23.emplace(Node<int, string>(20, "value"));
	bst23.emplace(Node<int, string>(14, "value"));
	bst23.emplace(Node<int, string>(2, "value"));
	bst23.emplace(Node<int, string>(13, "value"));
	bst23.emplace(Node<int, string>(9, "value"));
	bst23.emplace(Node<int, string>(16, "value"));
	bst23.emplace(Node<int, string>(17, "value"));
	bst23.emplace(Node<int, string>(11, "value"));

	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(17)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(4)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(16)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(14)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(20)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(13)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(9)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(12)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(10)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(19)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(18)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(11)->getKey());
	bst23.ascend_printout(bst23.getRoot());
	bst23.deleteNode(bst23.at(2)->getKey());



	BST<int,string> bst24(Node<int, string> (10, "RootVal"));
	bst24.emplace(Node<int, string>(7, "value"));
	bst24.emplace(Node<int, string>(9, "value"));
	bst24.emplace(Node<int, string>(5, "value"));
	bst24.emplace(Node<int, string>(8, "value"));
	bst24.emplace(Node<int, string>(17, "value"));
	bst24.emplace(Node<int, string>(16, "value"));
	bst24.emplace(Node<int, string>(20, "value"));
	bst24.emplace(Node<int, string>(4, "value"));
	bst24.emplace(Node<int, string>(14, "value"));
	bst24.emplace(Node<int, string>(11, "value"));
	bst24.emplace(Node<int, string>(13, "value"));

	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(9)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(11)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(5)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(10)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(13)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(14)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(7)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(20)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(4)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(8)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(16)->getKey());
	bst24.ascend_printout(bst24.getRoot());
	bst24.deleteNode(bst24.at(17)->getKey());



	BST<int,string> bst25(Node<int, string> (11, "RootVal"));
	bst25.emplace(Node<int, string>(13, "value"));
	bst25.emplace(Node<int, string>(16, "value"));
	bst25.emplace(Node<int, string>(5, "value"));
	bst25.emplace(Node<int, string>(20, "value"));
	bst25.emplace(Node<int, string>(12, "value"));
	bst25.emplace(Node<int, string>(15, "value"));
	bst25.emplace(Node<int, string>(17, "value"));
	bst25.emplace(Node<int, string>(3, "value"));
	bst25.emplace(Node<int, string>(8, "value"));
	bst25.emplace(Node<int, string>(7, "value"));
	bst25.emplace(Node<int, string>(6, "value"));
	bst25.emplace(Node<int, string>(19, "value"));
	bst25.emplace(Node<int, string>(10, "value"));

	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(15)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(3)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(6)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(10)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(20)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(8)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(17)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(13)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(11)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(7)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(12)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(5)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(19)->getKey());
	bst25.ascend_printout(bst25.getRoot());
	bst25.deleteNode(bst25.at(16)->getKey());



	BST<int,string> bst26(Node<int, string> (9, "RootVal"));
	bst26.emplace(Node<int, string>(14, "value"));
	bst26.emplace(Node<int, string>(13, "value"));
	bst26.emplace(Node<int, string>(7, "value"));
	bst26.emplace(Node<int, string>(5, "value"));
	bst26.emplace(Node<int, string>(6, "value"));
	bst26.emplace(Node<int, string>(2, "value"));
	bst26.emplace(Node<int, string>(4, "value"));
	bst26.emplace(Node<int, string>(8, "value"));
	bst26.emplace(Node<int, string>(10, "value"));
	bst26.emplace(Node<int, string>(16, "value"));
	bst26.emplace(Node<int, string>(19, "value"));
	bst26.emplace(Node<int, string>(20, "value"));

	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(7)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(20)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(19)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(6)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(14)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(10)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(5)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(4)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(8)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(13)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(16)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(9)->getKey());
	bst26.ascend_printout(bst26.getRoot());
	bst26.deleteNode(bst26.at(2)->getKey());



	BST<int,string> bst27(Node<int, string> (10, "RootVal"));
	bst27.emplace(Node<int, string>(15, "value"));
	bst27.emplace(Node<int, string>(14, "value"));
	bst27.emplace(Node<int, string>(9, "value"));
	bst27.emplace(Node<int, string>(3, "value"));
	bst27.emplace(Node<int, string>(20, "value"));
	bst27.emplace(Node<int, string>(16, "value"));
	bst27.emplace(Node<int, string>(4, "value"));
	bst27.emplace(Node<int, string>(12, "value"));
	bst27.emplace(Node<int, string>(2, "value"));
	bst27.emplace(Node<int, string>(5, "value"));
	bst27.emplace(Node<int, string>(6, "value"));
	bst27.emplace(Node<int, string>(11, "value"));
	bst27.emplace(Node<int, string>(8, "value"));

	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(3)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(10)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(11)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(6)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(4)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(16)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(14)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(20)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(8)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(2)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(12)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(15)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(9)->getKey());
	bst27.ascend_printout(bst27.getRoot());
	bst27.deleteNode(bst27.at(5)->getKey());



	BST<int,string> bst28(Node<int, string> (12, "RootVal"));
	bst28.emplace(Node<int, string>(1, "value"));
	bst28.emplace(Node<int, string>(5, "value"));
	bst28.emplace(Node<int, string>(6, "value"));
	bst28.emplace(Node<int, string>(9, "value"));
	bst28.emplace(Node<int, string>(14, "value"));
	bst28.emplace(Node<int, string>(18, "value"));
	bst28.emplace(Node<int, string>(19, "value"));
	bst28.emplace(Node<int, string>(10, "value"));
	bst28.emplace(Node<int, string>(11, "value"));
	bst28.emplace(Node<int, string>(13, "value"));
	bst28.emplace(Node<int, string>(16, "value"));

	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(14)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(11)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(16)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(18)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(1)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(6)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(9)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(13)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(12)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(19)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(5)->getKey());
	bst28.ascend_printout(bst28.getRoot());
	bst28.deleteNode(bst28.at(10)->getKey());



	BST<int,string> bst29(Node<int, string> (17, "RootVal"));
	bst29.emplace(Node<int, string>(16, "value"));
	bst29.emplace(Node<int, string>(13, "value"));
	bst29.emplace(Node<int, string>(9, "value"));
	bst29.emplace(Node<int, string>(15, "value"));
	bst29.emplace(Node<int, string>(19, "value"));
	bst29.emplace(Node<int, string>(2, "value"));
	bst29.emplace(Node<int, string>(7, "value"));
	bst29.emplace(Node<int, string>(4, "value"));
	bst29.emplace(Node<int, string>(12, "value"));
	bst29.emplace(Node<int, string>(1, "value"));
	bst29.emplace(Node<int, string>(8, "value"));
	bst29.emplace(Node<int, string>(10, "value"));
	bst29.emplace(Node<int, string>(11, "value"));

	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(19)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(1)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(17)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(11)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(8)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(15)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(4)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(9)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(7)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(10)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(16)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(13)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(12)->getKey());
	bst29.ascend_printout(bst29.getRoot());
	bst29.deleteNode(bst29.at(2)->getKey());



	BST<int,string> bst30(Node<int, string> (12, "RootVal"));
	bst30.emplace(Node<int, string>(15, "value"));
	bst30.emplace(Node<int, string>(6, "value"));
	bst30.emplace(Node<int, string>(8, "value"));
	bst30.emplace(Node<int, string>(11, "value"));
	bst30.emplace(Node<int, string>(16, "value"));
	bst30.emplace(Node<int, string>(20, "value"));
	bst30.emplace(Node<int, string>(3, "value"));
	bst30.emplace(Node<int, string>(7, "value"));
	bst30.emplace(Node<int, string>(19, "value"));
	bst30.emplace(Node<int, string>(5, "value"));
	bst30.emplace(Node<int, string>(1, "value"));
	bst30.emplace(Node<int, string>(17, "value"));

	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(11)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(1)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(20)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(19)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(12)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(7)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(16)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(6)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(17)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(3)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(8)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(5)->getKey());
	bst30.ascend_printout(bst30.getRoot());
	bst30.deleteNode(bst30.at(15)->getKey());



	BST<int,string> bst31(Node<int, string> (3, "RootVal"));
	bst31.emplace(Node<int, string>(20, "value"));
	bst31.emplace(Node<int, string>(16, "value"));
	bst31.emplace(Node<int, string>(4, "value"));
	bst31.emplace(Node<int, string>(17, "value"));
	bst31.emplace(Node<int, string>(5, "value"));
	bst31.emplace(Node<int, string>(8, "value"));
	bst31.emplace(Node<int, string>(6, "value"));
	bst31.emplace(Node<int, string>(1, "value"));
	bst31.emplace(Node<int, string>(10, "value"));
	bst31.emplace(Node<int, string>(2, "value"));
	bst31.emplace(Node<int, string>(9, "value"));
	bst31.emplace(Node<int, string>(14, "value"));

	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(16)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(5)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(14)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(8)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(17)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(10)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(9)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(1)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(20)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(2)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(6)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(4)->getKey());
	bst31.ascend_printout(bst31.getRoot());
	bst31.deleteNode(bst31.at(3)->getKey());



	BST<int,string> bst32(Node<int, string> (11, "RootVal"));
	bst32.emplace(Node<int, string>(19, "value"));
	bst32.emplace(Node<int, string>(17, "value"));
	bst32.emplace(Node<int, string>(2, "value"));
	bst32.emplace(Node<int, string>(13, "value"));
	bst32.emplace(Node<int, string>(8, "value"));
	bst32.emplace(Node<int, string>(14, "value"));
	bst32.emplace(Node<int, string>(7, "value"));
	bst32.emplace(Node<int, string>(16, "value"));
	bst32.emplace(Node<int, string>(10, "value"));
	bst32.emplace(Node<int, string>(15, "value"));
	bst32.emplace(Node<int, string>(5, "value"));

	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(19)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(14)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(8)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(15)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(16)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(5)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(13)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(2)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(11)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(7)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(17)->getKey());
	bst32.ascend_printout(bst32.getRoot());
	bst32.deleteNode(bst32.at(10)->getKey());



	BST<int,string> bst33(Node<int, string> (11, "RootVal"));
	bst33.emplace(Node<int, string>(10, "value"));
	bst33.emplace(Node<int, string>(8, "value"));
	bst33.emplace(Node<int, string>(2, "value"));
	bst33.emplace(Node<int, string>(20, "value"));
	bst33.emplace(Node<int, string>(4, "value"));
	bst33.emplace(Node<int, string>(12, "value"));
	bst33.emplace(Node<int, string>(6, "value"));
	bst33.emplace(Node<int, string>(3, "value"));
	bst33.emplace(Node<int, string>(15, "value"));

	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(11)->getKey());
	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(6)->getKey());
	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(20)->getKey());
	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(8)->getKey());
	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(2)->getKey());
	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(10)->getKey());
	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(12)->getKey());
	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(15)->getKey());
	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(3)->getKey());
	bst33.ascend_printout(bst33.getRoot());
	bst33.deleteNode(bst33.at(4)->getKey());



	BST<int,string> bst34(Node<int, string> (6, "RootVal"));
	bst34.emplace(Node<int, string>(1, "value"));
	bst34.emplace(Node<int, string>(15, "value"));
	bst34.emplace(Node<int, string>(8, "value"));
	bst34.emplace(Node<int, string>(7, "value"));
	bst34.emplace(Node<int, string>(9, "value"));
	bst34.emplace(Node<int, string>(19, "value"));
	bst34.emplace(Node<int, string>(14, "value"));
	bst34.emplace(Node<int, string>(16, "value"));
	bst34.emplace(Node<int, string>(4, "value"));

	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(1)->getKey());
	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(6)->getKey());
	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(14)->getKey());
	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(9)->getKey());
	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(4)->getKey());
	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(19)->getKey());
	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(16)->getKey());
	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(8)->getKey());
	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(7)->getKey());
	bst34.ascend_printout(bst34.getRoot());
	bst34.deleteNode(bst34.at(15)->getKey());



	BST<int,string> bst35(Node<int, string> (9, "RootVal"));
	bst35.emplace(Node<int, string>(2, "value"));
	bst35.emplace(Node<int, string>(6, "value"));
	bst35.emplace(Node<int, string>(14, "value"));
	bst35.emplace(Node<int, string>(20, "value"));
	bst35.emplace(Node<int, string>(8, "value"));
	bst35.emplace(Node<int, string>(18, "value"));
	bst35.emplace(Node<int, string>(13, "value"));
	bst35.emplace(Node<int, string>(16, "value"));
	bst35.emplace(Node<int, string>(1, "value"));
	bst35.emplace(Node<int, string>(15, "value"));
	bst35.emplace(Node<int, string>(5, "value"));
	bst35.emplace(Node<int, string>(11, "value"));
	bst35.emplace(Node<int, string>(7, "value"));

	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(15)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(8)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(6)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(2)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(1)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(18)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(9)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(20)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(16)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(14)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(13)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(7)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(11)->getKey());
	bst35.ascend_printout(bst35.getRoot());
	bst35.deleteNode(bst35.at(5)->getKey());



	BST<int,string> bst36(Node<int, string> (5, "RootVal"));
	bst36.emplace(Node<int, string>(8, "value"));
	bst36.emplace(Node<int, string>(11, "value"));
	bst36.emplace(Node<int, string>(7, "value"));
	bst36.emplace(Node<int, string>(15, "value"));
	bst36.emplace(Node<int, string>(14, "value"));
	bst36.emplace(Node<int, string>(10, "value"));
	bst36.emplace(Node<int, string>(6, "value"));
	bst36.emplace(Node<int, string>(20, "value"));
	bst36.emplace(Node<int, string>(1, "value"));
	bst36.emplace(Node<int, string>(3, "value"));
	bst36.emplace(Node<int, string>(18, "value"));

	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(7)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(14)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(8)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(1)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(15)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(3)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(10)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(6)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(11)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(5)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(18)->getKey());
	bst36.ascend_printout(bst36.getRoot());
	bst36.deleteNode(bst36.at(20)->getKey());



	BST<int,string> bst37(Node<int, string> (18, "RootVal"));
	bst37.emplace(Node<int, string>(3, "value"));
	bst37.emplace(Node<int, string>(5, "value"));
	bst37.emplace(Node<int, string>(8, "value"));
	bst37.emplace(Node<int, string>(2, "value"));
	bst37.emplace(Node<int, string>(17, "value"));
	bst37.emplace(Node<int, string>(12, "value"));
	bst37.emplace(Node<int, string>(4, "value"));
	bst37.emplace(Node<int, string>(14, "value"));
	bst37.emplace(Node<int, string>(9, "value"));
	bst37.emplace(Node<int, string>(6, "value"));

	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(18)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(9)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(8)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(17)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(12)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(5)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(2)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(3)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(4)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(14)->getKey());
	bst37.ascend_printout(bst37.getRoot());
	bst37.deleteNode(bst37.at(6)->getKey());



	BST<int,string> bst38(Node<int, string> (16, "RootVal"));
	bst38.emplace(Node<int, string>(20, "value"));
	bst38.emplace(Node<int, string>(1, "value"));
	bst38.emplace(Node<int, string>(15, "value"));
	bst38.emplace(Node<int, string>(9, "value"));
	bst38.emplace(Node<int, string>(19, "value"));
	bst38.emplace(Node<int, string>(2, "value"));
	bst38.emplace(Node<int, string>(6, "value"));
	bst38.emplace(Node<int, string>(14, "value"));
	bst38.emplace(Node<int, string>(12, "value"));
	bst38.emplace(Node<int, string>(4, "value"));
	bst38.emplace(Node<int, string>(3, "value"));
	bst38.emplace(Node<int, string>(13, "value"));
	bst38.emplace(Node<int, string>(10, "value"));

	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(4)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(20)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(6)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(16)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(13)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(19)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(10)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(12)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(1)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(9)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(3)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(2)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(14)->getKey());
	bst38.ascend_printout(bst38.getRoot());
	bst38.deleteNode(bst38.at(15)->getKey());



	BST<int,string> bst39(Node<int, string> (12, "RootVal"));
	bst39.emplace(Node<int, string>(17, "value"));
	bst39.emplace(Node<int, string>(16, "value"));
	bst39.emplace(Node<int, string>(9, "value"));
	bst39.emplace(Node<int, string>(5, "value"));
	bst39.emplace(Node<int, string>(10, "value"));
	bst39.emplace(Node<int, string>(7, "value"));
	bst39.emplace(Node<int, string>(13, "value"));
	bst39.emplace(Node<int, string>(19, "value"));
	bst39.emplace(Node<int, string>(15, "value"));
	bst39.emplace(Node<int, string>(8, "value"));
	bst39.emplace(Node<int, string>(11, "value"));
	bst39.emplace(Node<int, string>(1, "value"));
	bst39.emplace(Node<int, string>(2, "value"));

	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(16)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(17)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(2)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(8)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(5)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(7)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(9)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(12)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(13)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(10)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(1)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(19)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(11)->getKey());
	bst39.ascend_printout(bst39.getRoot());
	bst39.deleteNode(bst39.at(15)->getKey());



	BST<int,string> bst40(Node<int, string> (15, "RootVal"));
	bst40.emplace(Node<int, string>(18, "value"));
	bst40.emplace(Node<int, string>(5, "value"));
	bst40.emplace(Node<int, string>(6, "value"));
	bst40.emplace(Node<int, string>(16, "value"));
	bst40.emplace(Node<int, string>(19, "value"));
	bst40.emplace(Node<int, string>(7, "value"));
	bst40.emplace(Node<int, string>(2, "value"));
	bst40.emplace(Node<int, string>(11, "value"));
	bst40.emplace(Node<int, string>(9, "value"));
	bst40.emplace(Node<int, string>(3, "value"));
	bst40.emplace(Node<int, string>(14, "value"));
	bst40.emplace(Node<int, string>(13, "value"));
	bst40.emplace(Node<int, string>(4, "value"));

	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(2)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(4)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(5)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(15)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(11)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(13)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(6)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(16)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(7)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(18)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(3)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(9)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(14)->getKey());
	bst40.ascend_printout(bst40.getRoot());
	bst40.deleteNode(bst40.at(19)->getKey());



	BST<int,string> bst41(Node<int, string> (1, "RootVal"));
	bst41.emplace(Node<int, string>(13, "value"));
	bst41.emplace(Node<int, string>(16, "value"));
	bst41.emplace(Node<int, string>(12, "value"));
	bst41.emplace(Node<int, string>(8, "value"));
	bst41.emplace(Node<int, string>(18, "value"));
	bst41.emplace(Node<int, string>(19, "value"));
	bst41.emplace(Node<int, string>(20, "value"));
	bst41.emplace(Node<int, string>(17, "value"));
	bst41.emplace(Node<int, string>(3, "value"));
	bst41.emplace(Node<int, string>(9, "value"));
	bst41.emplace(Node<int, string>(7, "value"));

	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(13)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(12)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(16)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(17)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(18)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(9)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(1)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(19)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(8)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(3)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(20)->getKey());
	bst41.ascend_printout(bst41.getRoot());
	bst41.deleteNode(bst41.at(7)->getKey());



	BST<int,string> bst42(Node<int, string> (18, "RootVal"));
	bst42.emplace(Node<int, string>(20, "value"));
	bst42.emplace(Node<int, string>(16, "value"));
	bst42.emplace(Node<int, string>(10, "value"));
	bst42.emplace(Node<int, string>(19, "value"));
	bst42.emplace(Node<int, string>(17, "value"));
	bst42.emplace(Node<int, string>(14, "value"));
	bst42.emplace(Node<int, string>(12, "value"));
	bst42.emplace(Node<int, string>(5, "value"));
	bst42.emplace(Node<int, string>(2, "value"));

	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(14)->getKey());
	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(5)->getKey());
	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(16)->getKey());
	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(20)->getKey());
	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(18)->getKey());
	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(10)->getKey());
	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(12)->getKey());
	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(17)->getKey());
	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(2)->getKey());
	bst42.ascend_printout(bst42.getRoot());
	bst42.deleteNode(bst42.at(19)->getKey());



	BST<int,string> bst43(Node<int, string> (17, "RootVal"));
	bst43.emplace(Node<int, string>(20, "value"));
	bst43.emplace(Node<int, string>(3, "value"));
	bst43.emplace(Node<int, string>(14, "value"));
	bst43.emplace(Node<int, string>(13, "value"));
	bst43.emplace(Node<int, string>(18, "value"));
	bst43.emplace(Node<int, string>(8, "value"));
	bst43.emplace(Node<int, string>(11, "value"));
	bst43.emplace(Node<int, string>(6, "value"));
	bst43.emplace(Node<int, string>(1, "value"));
	bst43.emplace(Node<int, string>(10, "value"));
	bst43.emplace(Node<int, string>(4, "value"));

	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(18)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(8)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(13)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(17)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(3)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(1)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(6)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(20)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(4)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(14)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(11)->getKey());
	bst43.ascend_printout(bst43.getRoot());
	bst43.deleteNode(bst43.at(10)->getKey());



	BST<int,string> bst44(Node<int, string> (15, "RootVal"));
	bst44.emplace(Node<int, string>(5, "value"));
	bst44.emplace(Node<int, string>(4, "value"));
	bst44.emplace(Node<int, string>(2, "value"));
	bst44.emplace(Node<int, string>(11, "value"));
	bst44.emplace(Node<int, string>(13, "value"));
	bst44.emplace(Node<int, string>(14, "value"));
	bst44.emplace(Node<int, string>(20, "value"));
	bst44.emplace(Node<int, string>(19, "value"));
	bst44.emplace(Node<int, string>(17, "value"));
	bst44.emplace(Node<int, string>(1, "value"));
	bst44.emplace(Node<int, string>(18, "value"));
	bst44.emplace(Node<int, string>(3, "value"));

	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(17)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(4)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(11)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(13)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(20)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(19)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(1)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(3)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(5)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(2)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(14)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(18)->getKey());
	bst44.ascend_printout(bst44.getRoot());
	bst44.deleteNode(bst44.at(15)->getKey());



	BST<int,string> bst45(Node<int, string> (11, "RootVal"));
	bst45.emplace(Node<int, string>(14, "value"));
	bst45.emplace(Node<int, string>(19, "value"));
	bst45.emplace(Node<int, string>(10, "value"));
	bst45.emplace(Node<int, string>(13, "value"));
	bst45.emplace(Node<int, string>(5, "value"));
	bst45.emplace(Node<int, string>(7, "value"));
	bst45.emplace(Node<int, string>(20, "value"));
	bst45.emplace(Node<int, string>(4, "value"));
	bst45.emplace(Node<int, string>(17, "value"));
	bst45.emplace(Node<int, string>(6, "value"));
	bst45.emplace(Node<int, string>(3, "value"));
	bst45.emplace(Node<int, string>(15, "value"));

	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(3)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(7)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(6)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(13)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(5)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(17)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(20)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(15)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(14)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(10)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(11)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(19)->getKey());
	bst45.ascend_printout(bst45.getRoot());
	bst45.deleteNode(bst45.at(4)->getKey());



	BST<int,string> bst46(Node<int, string> (10, "RootVal"));
	bst46.emplace(Node<int, string>(6, "value"));
	bst46.emplace(Node<int, string>(16, "value"));
	bst46.emplace(Node<int, string>(2, "value"));
	bst46.emplace(Node<int, string>(20, "value"));
	bst46.emplace(Node<int, string>(15, "value"));
	bst46.emplace(Node<int, string>(14, "value"));
	bst46.emplace(Node<int, string>(3, "value"));
	bst46.emplace(Node<int, string>(18, "value"));
	bst46.emplace(Node<int, string>(4, "value"));
	bst46.emplace(Node<int, string>(7, "value"));
	bst46.emplace(Node<int, string>(17, "value"));
	bst46.emplace(Node<int, string>(19, "value"));

	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(16)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(7)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(15)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(19)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(14)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(17)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(18)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(2)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(20)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(10)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(3)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(4)->getKey());
	bst46.ascend_printout(bst46.getRoot());
	bst46.deleteNode(bst46.at(6)->getKey());



	BST<int,string> bst47(Node<int, string> (3, "RootVal"));
	bst47.emplace(Node<int, string>(17, "value"));
	bst47.emplace(Node<int, string>(13, "value"));
	bst47.emplace(Node<int, string>(12, "value"));
	bst47.emplace(Node<int, string>(2, "value"));
	bst47.emplace(Node<int, string>(19, "value"));
	bst47.emplace(Node<int, string>(8, "value"));
	bst47.emplace(Node<int, string>(7, "value"));
	bst47.emplace(Node<int, string>(18, "value"));
	bst47.emplace(Node<int, string>(20, "value"));
	bst47.emplace(Node<int, string>(4, "value"));
	bst47.emplace(Node<int, string>(16, "value"));
	bst47.emplace(Node<int, string>(5, "value"));
	bst47.emplace(Node<int, string>(9, "value"));
	bst47.emplace(Node<int, string>(6, "value"));

	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(6)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(2)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(12)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(7)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(19)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(8)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(9)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(16)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(3)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(4)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(17)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(13)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(20)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(5)->getKey());
	bst47.ascend_printout(bst47.getRoot());
	bst47.deleteNode(bst47.at(18)->getKey());



	BST<int,string> bst48(Node<int, string> (1, "RootVal"));
	bst48.emplace(Node<int, string>(7, "value"));
	bst48.emplace(Node<int, string>(6, "value"));
	bst48.emplace(Node<int, string>(18, "value"));
	bst48.emplace(Node<int, string>(20, "value"));
	bst48.emplace(Node<int, string>(9, "value"));
	bst48.emplace(Node<int, string>(2, "value"));
	bst48.emplace(Node<int, string>(14, "value"));
	bst48.emplace(Node<int, string>(17, "value"));
	bst48.emplace(Node<int, string>(12, "value"));

	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(7)->getKey());
	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(6)->getKey());
	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(1)->getKey());
	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(14)->getKey());
	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(18)->getKey());
	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(9)->getKey());
	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(12)->getKey());
	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(20)->getKey());
	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(2)->getKey());
	bst48.ascend_printout(bst48.getRoot());
	bst48.deleteNode(bst48.at(17)->getKey());



	BST<int,string> bst49(Node<int, string> (4, "RootVal"));
	bst49.emplace(Node<int, string>(10, "value"));
	bst49.emplace(Node<int, string>(8, "value"));
	bst49.emplace(Node<int, string>(1, "value"));
	bst49.emplace(Node<int, string>(7, "value"));
	bst49.emplace(Node<int, string>(16, "value"));
	bst49.emplace(Node<int, string>(15, "value"));
	bst49.emplace(Node<int, string>(18, "value"));
	bst49.emplace(Node<int, string>(9, "value"));
	bst49.emplace(Node<int, string>(20, "value"));
	bst49.emplace(Node<int, string>(6, "value"));
	bst49.emplace(Node<int, string>(2, "value"));

	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(9)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(8)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(7)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(4)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(18)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(20)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(6)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(1)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(15)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(2)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(16)->getKey());
	bst49.ascend_printout(bst49.getRoot());
	bst49.deleteNode(bst49.at(10)->getKey());



	BST<int,string> bst50(Node<int, string> (18, "RootVal"));
	bst50.emplace(Node<int, string>(1, "value"));
	bst50.emplace(Node<int, string>(7, "value"));
	bst50.emplace(Node<int, string>(20, "value"));
	bst50.emplace(Node<int, string>(16, "value"));
	bst50.emplace(Node<int, string>(4, "value"));
	bst50.emplace(Node<int, string>(2, "value"));
	bst50.emplace(Node<int, string>(14, "value"));
	bst50.emplace(Node<int, string>(19, "value"));
	bst50.emplace(Node<int, string>(6, "value"));
	bst50.emplace(Node<int, string>(15, "value"));
	bst50.emplace(Node<int, string>(3, "value"));
	bst50.emplace(Node<int, string>(8, "value"));
	bst50.emplace(Node<int, string>(11, "value"));
	bst50.emplace(Node<int, string>(13, "value"));
	bst50.emplace(Node<int, string>(9, "value"));

	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(16)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(14)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(6)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(9)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(3)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(11)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(15)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(18)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(19)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(20)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(4)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(8)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(13)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(7)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(2)->getKey());
	bst50.ascend_printout(bst50.getRoot());
	bst50.deleteNode(bst50.at(1)->getKey());



	BST<int,string> bst51(Node<int, string> (9, "RootVal"));
	bst51.emplace(Node<int, string>(3, "value"));
	bst51.emplace(Node<int, string>(16, "value"));
	bst51.emplace(Node<int, string>(6, "value"));
	bst51.emplace(Node<int, string>(5, "value"));
	bst51.emplace(Node<int, string>(18, "value"));
	bst51.emplace(Node<int, string>(19, "value"));
	bst51.emplace(Node<int, string>(10, "value"));
	bst51.emplace(Node<int, string>(11, "value"));
	bst51.emplace(Node<int, string>(8, "value"));
	bst51.emplace(Node<int, string>(4, "value"));

	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(4)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(19)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(18)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(3)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(9)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(16)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(8)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(10)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(5)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(6)->getKey());
	bst51.ascend_printout(bst51.getRoot());
	bst51.deleteNode(bst51.at(11)->getKey());



	BST<int,string> bst52(Node<int, string> (1, "RootVal"));
	bst52.emplace(Node<int, string>(17, "value"));
	bst52.emplace(Node<int, string>(10, "value"));
	bst52.emplace(Node<int, string>(7, "value"));
	bst52.emplace(Node<int, string>(20, "value"));
	bst52.emplace(Node<int, string>(5, "value"));
	bst52.emplace(Node<int, string>(14, "value"));
	bst52.emplace(Node<int, string>(18, "value"));
	bst52.emplace(Node<int, string>(4, "value"));
	bst52.emplace(Node<int, string>(2, "value"));
	bst52.emplace(Node<int, string>(16, "value"));
	bst52.emplace(Node<int, string>(15, "value"));
	bst52.emplace(Node<int, string>(12, "value"));
	bst52.emplace(Node<int, string>(3, "value"));

	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(10)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(5)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(18)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(20)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(16)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(15)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(7)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(14)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(17)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(4)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(1)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(2)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(3)->getKey());
	bst52.ascend_printout(bst52.getRoot());
	bst52.deleteNode(bst52.at(12)->getKey());



	BST<int,string> bst53(Node<int, string> (10, "RootVal"));
	bst53.emplace(Node<int, string>(5, "value"));
	bst53.emplace(Node<int, string>(6, "value"));
	bst53.emplace(Node<int, string>(3, "value"));
	bst53.emplace(Node<int, string>(14, "value"));
	bst53.emplace(Node<int, string>(7, "value"));
	bst53.emplace(Node<int, string>(12, "value"));
	bst53.emplace(Node<int, string>(17, "value"));
	bst53.emplace(Node<int, string>(11, "value"));
	bst53.emplace(Node<int, string>(13, "value"));
	bst53.emplace(Node<int, string>(19, "value"));
	bst53.emplace(Node<int, string>(8, "value"));
	bst53.emplace(Node<int, string>(18, "value"));
	bst53.emplace(Node<int, string>(9, "value"));

	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(9)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(13)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(17)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(10)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(8)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(18)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(3)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(12)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(11)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(5)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(7)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(19)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(14)->getKey());
	bst53.ascend_printout(bst53.getRoot());
	bst53.deleteNode(bst53.at(6)->getKey());



	BST<int,string> bst54(Node<int, string> (13, "RootVal"));
	bst54.emplace(Node<int, string>(20, "value"));
	bst54.emplace(Node<int, string>(18, "value"));
	bst54.emplace(Node<int, string>(3, "value"));
	bst54.emplace(Node<int, string>(7, "value"));
	bst54.emplace(Node<int, string>(15, "value"));
	bst54.emplace(Node<int, string>(14, "value"));
	bst54.emplace(Node<int, string>(17, "value"));
	bst54.emplace(Node<int, string>(8, "value"));
	bst54.emplace(Node<int, string>(10, "value"));
	bst54.emplace(Node<int, string>(9, "value"));
	bst54.emplace(Node<int, string>(6, "value"));
	bst54.emplace(Node<int, string>(12, "value"));
	bst54.emplace(Node<int, string>(16, "value"));
	bst54.emplace(Node<int, string>(1, "value"));

	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(9)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(16)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(13)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(20)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(1)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(10)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(7)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(12)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(15)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(14)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(17)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(3)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(18)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(6)->getKey());
	bst54.ascend_printout(bst54.getRoot());
	bst54.deleteNode(bst54.at(8)->getKey());



	BST<int,string> bst55(Node<int, string> (15, "RootVal"));
	bst55.emplace(Node<int, string>(9, "value"));
	bst55.emplace(Node<int, string>(16, "value"));
	bst55.emplace(Node<int, string>(5, "value"));
	bst55.emplace(Node<int, string>(14, "value"));
	bst55.emplace(Node<int, string>(4, "value"));
	bst55.emplace(Node<int, string>(10, "value"));
	bst55.emplace(Node<int, string>(3, "value"));
	bst55.emplace(Node<int, string>(20, "value"));
	bst55.emplace(Node<int, string>(19, "value"));
	bst55.emplace(Node<int, string>(12, "value"));
	bst55.emplace(Node<int, string>(2, "value"));
	bst55.emplace(Node<int, string>(1, "value"));
	bst55.emplace(Node<int, string>(6, "value"));
	bst55.emplace(Node<int, string>(17, "value"));
	bst55.emplace(Node<int, string>(8, "value"));

	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(9)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(14)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(1)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(17)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(4)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(6)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(10)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(20)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(2)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(15)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(16)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(5)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(8)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(12)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(19)->getKey());
	bst55.ascend_printout(bst55.getRoot());
	bst55.deleteNode(bst55.at(3)->getKey());



	BST<int,string> bst56(Node<int, string> (14, "RootVal"));
	bst56.emplace(Node<int, string>(13, "value"));
	bst56.emplace(Node<int, string>(5, "value"));
	bst56.emplace(Node<int, string>(17, "value"));
	bst56.emplace(Node<int, string>(18, "value"));
	bst56.emplace(Node<int, string>(4, "value"));
	bst56.emplace(Node<int, string>(12, "value"));
	bst56.emplace(Node<int, string>(15, "value"));
	bst56.emplace(Node<int, string>(16, "value"));
	bst56.emplace(Node<int, string>(6, "value"));
	bst56.emplace(Node<int, string>(7, "value"));
	bst56.emplace(Node<int, string>(19, "value"));
	bst56.emplace(Node<int, string>(10, "value"));
	bst56.emplace(Node<int, string>(2, "value"));

	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(13)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(4)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(6)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(19)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(18)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(16)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(10)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(7)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(12)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(5)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(15)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(14)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(2)->getKey());
	bst56.ascend_printout(bst56.getRoot());
	bst56.deleteNode(bst56.at(17)->getKey());



	BST<int,string> bst57(Node<int, string> (2, "RootVal"));
	bst57.emplace(Node<int, string>(20, "value"));
	bst57.emplace(Node<int, string>(13, "value"));
	bst57.emplace(Node<int, string>(3, "value"));
	bst57.emplace(Node<int, string>(7, "value"));
	bst57.emplace(Node<int, string>(6, "value"));
	bst57.emplace(Node<int, string>(14, "value"));
	bst57.emplace(Node<int, string>(19, "value"));
	bst57.emplace(Node<int, string>(16, "value"));
	bst57.emplace(Node<int, string>(5, "value"));
	bst57.emplace(Node<int, string>(9, "value"));
	bst57.emplace(Node<int, string>(8, "value"));

	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(2)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(3)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(16)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(6)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(14)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(9)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(5)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(19)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(7)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(8)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(13)->getKey());
	bst57.ascend_printout(bst57.getRoot());
	bst57.deleteNode(bst57.at(20)->getKey());



	BST<int,string> bst58(Node<int, string> (16, "RootVal"));
	bst58.emplace(Node<int, string>(1, "value"));
	bst58.emplace(Node<int, string>(4, "value"));
	bst58.emplace(Node<int, string>(15, "value"));
	bst58.emplace(Node<int, string>(13, "value"));
	bst58.emplace(Node<int, string>(17, "value"));
	bst58.emplace(Node<int, string>(8, "value"));
	bst58.emplace(Node<int, string>(18, "value"));
	bst58.emplace(Node<int, string>(9, "value"));
	bst58.emplace(Node<int, string>(6, "value"));
	bst58.emplace(Node<int, string>(11, "value"));
	bst58.emplace(Node<int, string>(7, "value"));

	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(9)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(13)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(8)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(6)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(17)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(15)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(7)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(11)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(18)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(1)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(16)->getKey());
	bst58.ascend_printout(bst58.getRoot());
	bst58.deleteNode(bst58.at(4)->getKey());



	BST<int,string> bst59(Node<int, string> (3, "RootVal"));
	bst59.emplace(Node<int, string>(8, "value"));
	bst59.emplace(Node<int, string>(6, "value"));
	bst59.emplace(Node<int, string>(19, "value"));
	bst59.emplace(Node<int, string>(11, "value"));
	bst59.emplace(Node<int, string>(14, "value"));
	bst59.emplace(Node<int, string>(10, "value"));
	bst59.emplace(Node<int, string>(5, "value"));
	bst59.emplace(Node<int, string>(12, "value"));
	bst59.emplace(Node<int, string>(7, "value"));
	bst59.emplace(Node<int, string>(4, "value"));

	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(6)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(11)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(14)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(4)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(7)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(12)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(5)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(8)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(10)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(3)->getKey());
	bst59.ascend_printout(bst59.getRoot());
	bst59.deleteNode(bst59.at(19)->getKey());



	BST<int,string> bst60(Node<int, string> (15, "RootVal"));
	bst60.emplace(Node<int, string>(12, "value"));
	bst60.emplace(Node<int, string>(20, "value"));
	bst60.emplace(Node<int, string>(14, "value"));
	bst60.emplace(Node<int, string>(13, "value"));
	bst60.emplace(Node<int, string>(3, "value"));
	bst60.emplace(Node<int, string>(16, "value"));
	bst60.emplace(Node<int, string>(5, "value"));
	bst60.emplace(Node<int, string>(6, "value"));
	bst60.emplace(Node<int, string>(10, "value"));
	bst60.emplace(Node<int, string>(7, "value"));
	bst60.emplace(Node<int, string>(4, "value"));
	bst60.emplace(Node<int, string>(19, "value"));
	bst60.emplace(Node<int, string>(1, "value"));
	bst60.emplace(Node<int, string>(17, "value"));
	bst60.emplace(Node<int, string>(9, "value"));

	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(5)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(17)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(19)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(10)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(7)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(4)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(1)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(9)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(13)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(12)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(16)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(20)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(14)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(15)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(3)->getKey());
	bst60.ascend_printout(bst60.getRoot());
	bst60.deleteNode(bst60.at(6)->getKey());



	BST<int,string> bst61(Node<int, string> (15, "RootVal"));
	bst61.emplace(Node<int, string>(2, "value"));
	bst61.emplace(Node<int, string>(17, "value"));
	bst61.emplace(Node<int, string>(4, "value"));
	bst61.emplace(Node<int, string>(20, "value"));
	bst61.emplace(Node<int, string>(19, "value"));
	bst61.emplace(Node<int, string>(5, "value"));
	bst61.emplace(Node<int, string>(18, "value"));
	bst61.emplace(Node<int, string>(11, "value"));
	bst61.emplace(Node<int, string>(6, "value"));
	bst61.emplace(Node<int, string>(16, "value"));
	bst61.emplace(Node<int, string>(9, "value"));
	bst61.emplace(Node<int, string>(8, "value"));

	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(5)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(19)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(2)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(4)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(8)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(9)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(6)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(18)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(16)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(17)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(20)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(11)->getKey());
	bst61.ascend_printout(bst61.getRoot());
	bst61.deleteNode(bst61.at(15)->getKey());



	BST<int,string> bst62(Node<int, string> (3, "RootVal"));
	bst62.emplace(Node<int, string>(11, "value"));
	bst62.emplace(Node<int, string>(6, "value"));
	bst62.emplace(Node<int, string>(7, "value"));
	bst62.emplace(Node<int, string>(2, "value"));
	bst62.emplace(Node<int, string>(5, "value"));
	bst62.emplace(Node<int, string>(15, "value"));
	bst62.emplace(Node<int, string>(1, "value"));
	bst62.emplace(Node<int, string>(9, "value"));
	bst62.emplace(Node<int, string>(12, "value"));
	bst62.emplace(Node<int, string>(17, "value"));
	bst62.emplace(Node<int, string>(8, "value"));

	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(2)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(17)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(1)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(7)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(5)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(9)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(15)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(11)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(3)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(6)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(12)->getKey());
	bst62.ascend_printout(bst62.getRoot());
	bst62.deleteNode(bst62.at(8)->getKey());



	BST<int,string> bst63(Node<int, string> (7, "RootVal"));
	bst63.emplace(Node<int, string>(1, "value"));
	bst63.emplace(Node<int, string>(19, "value"));
	bst63.emplace(Node<int, string>(9, "value"));
	bst63.emplace(Node<int, string>(20, "value"));
	bst63.emplace(Node<int, string>(6, "value"));
	bst63.emplace(Node<int, string>(13, "value"));
	bst63.emplace(Node<int, string>(2, "value"));
	bst63.emplace(Node<int, string>(15, "value"));
	bst63.emplace(Node<int, string>(17, "value"));
	bst63.emplace(Node<int, string>(5, "value"));
	bst63.emplace(Node<int, string>(11, "value"));

	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(20)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(2)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(13)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(19)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(11)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(9)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(17)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(7)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(6)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(15)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(5)->getKey());
	bst63.ascend_printout(bst63.getRoot());
	bst63.deleteNode(bst63.at(1)->getKey());



	BST<int,string> bst64(Node<int, string> (20, "RootVal"));
	bst64.emplace(Node<int, string>(11, "value"));
	bst64.emplace(Node<int, string>(12, "value"));
	bst64.emplace(Node<int, string>(2, "value"));
	bst64.emplace(Node<int, string>(5, "value"));
	bst64.emplace(Node<int, string>(7, "value"));
	bst64.emplace(Node<int, string>(16, "value"));
	bst64.emplace(Node<int, string>(1, "value"));
	bst64.emplace(Node<int, string>(13, "value"));
	bst64.emplace(Node<int, string>(3, "value"));
	bst64.emplace(Node<int, string>(15, "value"));
	bst64.emplace(Node<int, string>(6, "value"));
	bst64.emplace(Node<int, string>(19, "value"));
	bst64.emplace(Node<int, string>(4, "value"));
	bst64.emplace(Node<int, string>(18, "value"));

	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(5)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(20)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(18)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(3)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(6)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(4)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(11)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(16)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(15)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(7)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(12)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(19)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(13)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(1)->getKey());
	bst64.ascend_printout(bst64.getRoot());
	bst64.deleteNode(bst64.at(2)->getKey());



	BST<int,string> bst65(Node<int, string> (1, "RootVal"));
	bst65.emplace(Node<int, string>(18, "value"));
	bst65.emplace(Node<int, string>(12, "value"));
	bst65.emplace(Node<int, string>(15, "value"));
	bst65.emplace(Node<int, string>(4, "value"));
	bst65.emplace(Node<int, string>(17, "value"));
	bst65.emplace(Node<int, string>(14, "value"));
	bst65.emplace(Node<int, string>(7, "value"));
	bst65.emplace(Node<int, string>(13, "value"));
	bst65.emplace(Node<int, string>(6, "value"));
	bst65.emplace(Node<int, string>(16, "value"));
	bst65.emplace(Node<int, string>(2, "value"));
	bst65.emplace(Node<int, string>(19, "value"));
	bst65.emplace(Node<int, string>(9, "value"));

	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(6)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(2)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(1)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(16)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(9)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(7)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(19)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(12)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(14)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(18)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(4)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(17)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(15)->getKey());
	bst65.ascend_printout(bst65.getRoot());
	bst65.deleteNode(bst65.at(13)->getKey());



	BST<int,string> bst66(Node<int, string> (6, "RootVal"));
	bst66.emplace(Node<int, string>(1, "value"));
	bst66.emplace(Node<int, string>(10, "value"));
	bst66.emplace(Node<int, string>(11, "value"));
	bst66.emplace(Node<int, string>(12, "value"));
	bst66.emplace(Node<int, string>(14, "value"));
	bst66.emplace(Node<int, string>(4, "value"));
	bst66.emplace(Node<int, string>(3, "value"));
	bst66.emplace(Node<int, string>(17, "value"));
	bst66.emplace(Node<int, string>(9, "value"));
	bst66.emplace(Node<int, string>(20, "value"));
	bst66.emplace(Node<int, string>(16, "value"));
	bst66.emplace(Node<int, string>(7, "value"));

	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(4)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(10)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(11)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(17)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(20)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(9)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(1)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(16)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(3)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(6)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(14)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(12)->getKey());
	bst66.ascend_printout(bst66.getRoot());
	bst66.deleteNode(bst66.at(7)->getKey());



	BST<int,string> bst67(Node<int, string> (12, "RootVal"));
	bst67.emplace(Node<int, string>(8, "value"));
	bst67.emplace(Node<int, string>(16, "value"));
	bst67.emplace(Node<int, string>(18, "value"));
	bst67.emplace(Node<int, string>(14, "value"));
	bst67.emplace(Node<int, string>(11, "value"));
	bst67.emplace(Node<int, string>(5, "value"));
	bst67.emplace(Node<int, string>(2, "value"));
	bst67.emplace(Node<int, string>(20, "value"));
	bst67.emplace(Node<int, string>(9, "value"));
	bst67.emplace(Node<int, string>(15, "value"));
	bst67.emplace(Node<int, string>(19, "value"));
	bst67.emplace(Node<int, string>(10, "value"));
	bst67.emplace(Node<int, string>(7, "value"));

	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(15)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(12)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(2)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(14)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(10)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(8)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(5)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(11)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(19)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(7)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(20)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(9)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(16)->getKey());
	bst67.ascend_printout(bst67.getRoot());
	bst67.deleteNode(bst67.at(18)->getKey());



	BST<int,string> bst68(Node<int, string> (4, "RootVal"));
	bst68.emplace(Node<int, string>(20, "value"));
	bst68.emplace(Node<int, string>(13, "value"));
	bst68.emplace(Node<int, string>(3, "value"));
	bst68.emplace(Node<int, string>(9, "value"));
	bst68.emplace(Node<int, string>(14, "value"));
	bst68.emplace(Node<int, string>(11, "value"));
	bst68.emplace(Node<int, string>(2, "value"));
	bst68.emplace(Node<int, string>(8, "value"));
	bst68.emplace(Node<int, string>(12, "value"));
	bst68.emplace(Node<int, string>(16, "value"));
	bst68.emplace(Node<int, string>(1, "value"));
	bst68.emplace(Node<int, string>(17, "value"));

	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(16)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(4)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(17)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(13)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(12)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(1)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(20)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(2)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(11)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(9)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(3)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(8)->getKey());
	bst68.ascend_printout(bst68.getRoot());
	bst68.deleteNode(bst68.at(14)->getKey());



	BST<int,string> bst69(Node<int, string> (10, "RootVal"));
	bst69.emplace(Node<int, string>(3, "value"));
	bst69.emplace(Node<int, string>(13, "value"));
	bst69.emplace(Node<int, string>(8, "value"));
	bst69.emplace(Node<int, string>(7, "value"));
	bst69.emplace(Node<int, string>(2, "value"));
	bst69.emplace(Node<int, string>(16, "value"));
	bst69.emplace(Node<int, string>(1, "value"));
	bst69.emplace(Node<int, string>(6, "value"));
	bst69.emplace(Node<int, string>(9, "value"));
	bst69.emplace(Node<int, string>(19, "value"));
	bst69.emplace(Node<int, string>(11, "value"));
	bst69.emplace(Node<int, string>(12, "value"));

	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(19)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(7)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(12)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(2)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(8)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(1)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(9)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(10)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(11)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(16)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(13)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(6)->getKey());
	bst69.ascend_printout(bst69.getRoot());
	bst69.deleteNode(bst69.at(3)->getKey());



	BST<int,string> bst70(Node<int, string> (6, "RootVal"));
	bst70.emplace(Node<int, string>(17, "value"));
	bst70.emplace(Node<int, string>(8, "value"));
	bst70.emplace(Node<int, string>(18, "value"));
	bst70.emplace(Node<int, string>(11, "value"));
	bst70.emplace(Node<int, string>(2, "value"));
	bst70.emplace(Node<int, string>(1, "value"));
	bst70.emplace(Node<int, string>(14, "value"));
	bst70.emplace(Node<int, string>(15, "value"));
	bst70.emplace(Node<int, string>(4, "value"));
	bst70.emplace(Node<int, string>(5, "value"));
	bst70.emplace(Node<int, string>(7, "value"));

	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(8)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(1)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(6)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(14)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(2)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(18)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(4)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(7)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(11)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(5)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(15)->getKey());
	bst70.ascend_printout(bst70.getRoot());
	bst70.deleteNode(bst70.at(17)->getKey());



	BST<int,string> bst71(Node<int, string> (19, "RootVal"));
	bst71.emplace(Node<int, string>(6, "value"));
	bst71.emplace(Node<int, string>(4, "value"));
	bst71.emplace(Node<int, string>(1, "value"));
	bst71.emplace(Node<int, string>(10, "value"));
	bst71.emplace(Node<int, string>(5, "value"));
	bst71.emplace(Node<int, string>(2, "value"));
	bst71.emplace(Node<int, string>(8, "value"));
	bst71.emplace(Node<int, string>(17, "value"));
	bst71.emplace(Node<int, string>(18, "value"));
	bst71.emplace(Node<int, string>(3, "value"));
	bst71.emplace(Node<int, string>(15, "value"));
	bst71.emplace(Node<int, string>(11, "value"));

	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(6)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(4)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(8)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(17)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(1)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(5)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(11)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(10)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(2)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(15)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(19)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(18)->getKey());
	bst71.ascend_printout(bst71.getRoot());
	bst71.deleteNode(bst71.at(3)->getKey());



	BST<int,string> bst72(Node<int, string> (10, "RootVal"));
	bst72.emplace(Node<int, string>(3, "value"));
	bst72.emplace(Node<int, string>(12, "value"));
	bst72.emplace(Node<int, string>(9, "value"));
	bst72.emplace(Node<int, string>(7, "value"));
	bst72.emplace(Node<int, string>(19, "value"));
	bst72.emplace(Node<int, string>(20, "value"));
	bst72.emplace(Node<int, string>(11, "value"));
	bst72.emplace(Node<int, string>(16, "value"));
	bst72.emplace(Node<int, string>(6, "value"));
	bst72.emplace(Node<int, string>(18, "value"));
	bst72.emplace(Node<int, string>(2, "value"));
	bst72.emplace(Node<int, string>(4, "value"));
	bst72.emplace(Node<int, string>(8, "value"));
	bst72.emplace(Node<int, string>(5, "value"));

	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(19)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(3)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(4)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(18)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(9)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(10)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(8)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(7)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(20)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(2)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(12)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(5)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(11)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(6)->getKey());
	bst72.ascend_printout(bst72.getRoot());
	bst72.deleteNode(bst72.at(16)->getKey());



	BST<int,string> bst73(Node<int, string> (17, "RootVal"));
	bst73.emplace(Node<int, string>(10, "value"));
	bst73.emplace(Node<int, string>(11, "value"));
	bst73.emplace(Node<int, string>(12, "value"));
	bst73.emplace(Node<int, string>(1, "value"));
	bst73.emplace(Node<int, string>(8, "value"));
	bst73.emplace(Node<int, string>(2, "value"));
	bst73.emplace(Node<int, string>(15, "value"));
	bst73.emplace(Node<int, string>(3, "value"));
	bst73.emplace(Node<int, string>(4, "value"));
	bst73.emplace(Node<int, string>(7, "value"));
	bst73.emplace(Node<int, string>(14, "value"));

	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(11)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(15)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(10)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(12)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(3)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(17)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(1)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(8)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(4)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(2)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(14)->getKey());
	bst73.ascend_printout(bst73.getRoot());
	bst73.deleteNode(bst73.at(7)->getKey());



	BST<int,string> bst74(Node<int, string> (18, "RootVal"));
	bst74.emplace(Node<int, string>(2, "value"));
	bst74.emplace(Node<int, string>(16, "value"));
	bst74.emplace(Node<int, string>(8, "value"));
	bst74.emplace(Node<int, string>(9, "value"));
	bst74.emplace(Node<int, string>(12, "value"));
	bst74.emplace(Node<int, string>(3, "value"));
	bst74.emplace(Node<int, string>(15, "value"));
	bst74.emplace(Node<int, string>(19, "value"));
	bst74.emplace(Node<int, string>(11, "value"));
	bst74.emplace(Node<int, string>(7, "value"));
	bst74.emplace(Node<int, string>(4, "value"));

	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(8)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(11)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(16)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(12)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(4)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(9)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(7)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(18)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(2)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(3)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(19)->getKey());
	bst74.ascend_printout(bst74.getRoot());
	bst74.deleteNode(bst74.at(15)->getKey());



	BST<int,string> bst75(Node<int, string> (4, "RootVal"));
	bst75.emplace(Node<int, string>(14, "value"));
	bst75.emplace(Node<int, string>(10, "value"));
	bst75.emplace(Node<int, string>(17, "value"));
	bst75.emplace(Node<int, string>(12, "value"));
	bst75.emplace(Node<int, string>(18, "value"));
	bst75.emplace(Node<int, string>(9, "value"));
	bst75.emplace(Node<int, string>(15, "value"));
	bst75.emplace(Node<int, string>(11, "value"));
	bst75.emplace(Node<int, string>(7, "value"));
	bst75.emplace(Node<int, string>(3, "value"));
	bst75.emplace(Node<int, string>(8, "value"));

	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(11)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(17)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(14)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(7)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(12)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(8)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(4)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(15)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(18)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(3)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(9)->getKey());
	bst75.ascend_printout(bst75.getRoot());
	bst75.deleteNode(bst75.at(10)->getKey());



	BST<int,string> bst76(Node<int, string> (8, "RootVal"));
	bst76.emplace(Node<int, string>(14, "value"));
	bst76.emplace(Node<int, string>(19, "value"));
	bst76.emplace(Node<int, string>(7, "value"));
	bst76.emplace(Node<int, string>(20, "value"));
	bst76.emplace(Node<int, string>(4, "value"));
	bst76.emplace(Node<int, string>(11, "value"));
	bst76.emplace(Node<int, string>(10, "value"));
	bst76.emplace(Node<int, string>(6, "value"));
	bst76.emplace(Node<int, string>(18, "value"));
	bst76.emplace(Node<int, string>(3, "value"));
	bst76.emplace(Node<int, string>(13, "value"));

	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(10)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(19)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(18)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(13)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(8)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(6)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(4)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(3)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(11)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(7)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(20)->getKey());
	bst76.ascend_printout(bst76.getRoot());
	bst76.deleteNode(bst76.at(14)->getKey());



	BST<int,string> bst77(Node<int, string> (14, "RootVal"));
	bst77.emplace(Node<int, string>(10, "value"));
	bst77.emplace(Node<int, string>(17, "value"));
	bst77.emplace(Node<int, string>(6, "value"));
	bst77.emplace(Node<int, string>(3, "value"));
	bst77.emplace(Node<int, string>(18, "value"));
	bst77.emplace(Node<int, string>(20, "value"));
	bst77.emplace(Node<int, string>(7, "value"));
	bst77.emplace(Node<int, string>(5, "value"));
	bst77.emplace(Node<int, string>(19, "value"));
	bst77.emplace(Node<int, string>(4, "value"));
	bst77.emplace(Node<int, string>(9, "value"));

	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(18)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(7)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(14)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(20)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(9)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(4)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(5)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(17)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(19)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(6)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(10)->getKey());
	bst77.ascend_printout(bst77.getRoot());
	bst77.deleteNode(bst77.at(3)->getKey());



	BST<int,string> bst78(Node<int, string> (11, "RootVal"));
	bst78.emplace(Node<int, string>(2, "value"));
	bst78.emplace(Node<int, string>(19, "value"));
	bst78.emplace(Node<int, string>(8, "value"));
	bst78.emplace(Node<int, string>(7, "value"));
	bst78.emplace(Node<int, string>(17, "value"));
	bst78.emplace(Node<int, string>(6, "value"));
	bst78.emplace(Node<int, string>(3, "value"));
	bst78.emplace(Node<int, string>(13, "value"));
	bst78.emplace(Node<int, string>(14, "value"));
	bst78.emplace(Node<int, string>(18, "value"));
	bst78.emplace(Node<int, string>(20, "value"));

	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(8)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(20)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(18)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(19)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(13)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(14)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(11)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(7)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(17)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(3)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(2)->getKey());
	bst78.ascend_printout(bst78.getRoot());
	bst78.deleteNode(bst78.at(6)->getKey());



	BST<int,string> bst79(Node<int, string> (2, "RootVal"));
	bst79.emplace(Node<int, string>(14, "value"));
	bst79.emplace(Node<int, string>(13, "value"));
	bst79.emplace(Node<int, string>(7, "value"));
	bst79.emplace(Node<int, string>(18, "value"));
	bst79.emplace(Node<int, string>(20, "value"));
	bst79.emplace(Node<int, string>(6, "value"));
	bst79.emplace(Node<int, string>(8, "value"));
	bst79.emplace(Node<int, string>(5, "value"));
	bst79.emplace(Node<int, string>(12, "value"));
	bst79.emplace(Node<int, string>(3, "value"));
	bst79.emplace(Node<int, string>(1, "value"));
	bst79.emplace(Node<int, string>(4, "value"));
	bst79.emplace(Node<int, string>(16, "value"));

	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(13)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(8)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(5)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(14)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(18)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(1)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(20)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(16)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(3)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(6)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(4)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(12)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(2)->getKey());
	bst79.ascend_printout(bst79.getRoot());
	bst79.deleteNode(bst79.at(7)->getKey());



	BST<int,string> bst80(Node<int, string> (17, "RootVal"));
	bst80.emplace(Node<int, string>(10, "value"));
	bst80.emplace(Node<int, string>(6, "value"));
	bst80.emplace(Node<int, string>(9, "value"));
	bst80.emplace(Node<int, string>(1, "value"));
	bst80.emplace(Node<int, string>(18, "value"));
	bst80.emplace(Node<int, string>(19, "value"));
	bst80.emplace(Node<int, string>(7, "value"));
	bst80.emplace(Node<int, string>(20, "value"));
	bst80.emplace(Node<int, string>(15, "value"));
	bst80.emplace(Node<int, string>(12, "value"));
	bst80.emplace(Node<int, string>(5, "value"));
	bst80.emplace(Node<int, string>(13, "value"));
	bst80.emplace(Node<int, string>(16, "value"));

	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(10)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(9)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(7)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(20)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(19)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(5)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(15)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(1)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(6)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(16)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(13)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(12)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(18)->getKey());
	bst80.ascend_printout(bst80.getRoot());
	bst80.deleteNode(bst80.at(17)->getKey());



	BST<int,string> bst81(Node<int, string> (8, "RootVal"));
	bst81.emplace(Node<int, string>(15, "value"));
	bst81.emplace(Node<int, string>(1, "value"));
	bst81.emplace(Node<int, string>(18, "value"));
	bst81.emplace(Node<int, string>(17, "value"));
	bst81.emplace(Node<int, string>(9, "value"));
	bst81.emplace(Node<int, string>(20, "value"));
	bst81.emplace(Node<int, string>(13, "value"));
	bst81.emplace(Node<int, string>(4, "value"));
	bst81.emplace(Node<int, string>(12, "value"));
	bst81.emplace(Node<int, string>(10, "value"));
	bst81.emplace(Node<int, string>(5, "value"));
	bst81.emplace(Node<int, string>(16, "value"));
	bst81.emplace(Node<int, string>(11, "value"));
	bst81.emplace(Node<int, string>(2, "value"));
	bst81.emplace(Node<int, string>(6, "value"));

	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(17)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(15)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(13)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(2)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(5)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(1)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(6)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(8)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(18)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(11)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(16)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(20)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(10)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(4)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(12)->getKey());
	bst81.ascend_printout(bst81.getRoot());
	bst81.deleteNode(bst81.at(9)->getKey());



	BST<int,string> bst82(Node<int, string> (17, "RootVal"));
	bst82.emplace(Node<int, string>(5, "value"));
	bst82.emplace(Node<int, string>(4, "value"));
	bst82.emplace(Node<int, string>(6, "value"));
	bst82.emplace(Node<int, string>(15, "value"));
	bst82.emplace(Node<int, string>(10, "value"));
	bst82.emplace(Node<int, string>(18, "value"));
	bst82.emplace(Node<int, string>(2, "value"));
	bst82.emplace(Node<int, string>(16, "value"));
	bst82.emplace(Node<int, string>(20, "value"));
	bst82.emplace(Node<int, string>(12, "value"));
	bst82.emplace(Node<int, string>(1, "value"));

	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(10)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(20)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(17)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(15)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(18)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(2)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(1)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(12)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(16)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(5)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(6)->getKey());
	bst82.ascend_printout(bst82.getRoot());
	bst82.deleteNode(bst82.at(4)->getKey());



	BST<int,string> bst83(Node<int, string> (14, "RootVal"));
	bst83.emplace(Node<int, string>(11, "value"));
	bst83.emplace(Node<int, string>(15, "value"));
	bst83.emplace(Node<int, string>(10, "value"));
	bst83.emplace(Node<int, string>(17, "value"));
	bst83.emplace(Node<int, string>(13, "value"));
	bst83.emplace(Node<int, string>(9, "value"));
	bst83.emplace(Node<int, string>(1, "value"));
	bst83.emplace(Node<int, string>(2, "value"));
	bst83.emplace(Node<int, string>(19, "value"));
	bst83.emplace(Node<int, string>(16, "value"));
	bst83.emplace(Node<int, string>(12, "value"));

	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(11)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(12)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(16)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(15)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(17)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(14)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(1)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(2)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(9)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(10)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(13)->getKey());
	bst83.ascend_printout(bst83.getRoot());
	bst83.deleteNode(bst83.at(19)->getKey());



	BST<int,string> bst84(Node<int, string> (14, "RootVal"));
	bst84.emplace(Node<int, string>(9, "value"));
	bst84.emplace(Node<int, string>(15, "value"));
	bst84.emplace(Node<int, string>(10, "value"));
	bst84.emplace(Node<int, string>(8, "value"));
	bst84.emplace(Node<int, string>(19, "value"));
	bst84.emplace(Node<int, string>(5, "value"));
	bst84.emplace(Node<int, string>(11, "value"));
	bst84.emplace(Node<int, string>(13, "value"));
	bst84.emplace(Node<int, string>(3, "value"));
	bst84.emplace(Node<int, string>(4, "value"));
	bst84.emplace(Node<int, string>(18, "value"));
	bst84.emplace(Node<int, string>(16, "value"));

	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(8)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(4)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(9)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(16)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(5)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(15)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(11)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(13)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(3)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(19)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(14)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(18)->getKey());
	bst84.ascend_printout(bst84.getRoot());
	bst84.deleteNode(bst84.at(10)->getKey());



	BST<int,string> bst85(Node<int, string> (12, "RootVal"));
	bst85.emplace(Node<int, string>(11, "value"));
	bst85.emplace(Node<int, string>(10, "value"));
	bst85.emplace(Node<int, string>(4, "value"));
	bst85.emplace(Node<int, string>(6, "value"));
	bst85.emplace(Node<int, string>(8, "value"));
	bst85.emplace(Node<int, string>(20, "value"));
	bst85.emplace(Node<int, string>(16, "value"));
	bst85.emplace(Node<int, string>(9, "value"));
	bst85.emplace(Node<int, string>(19, "value"));
	bst85.emplace(Node<int, string>(14, "value"));

	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(12)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(8)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(6)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(20)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(19)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(11)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(16)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(9)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(4)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(10)->getKey());
	bst85.ascend_printout(bst85.getRoot());
	bst85.deleteNode(bst85.at(14)->getKey());



	BST<int,string> bst86(Node<int, string> (19, "RootVal"));
	bst86.emplace(Node<int, string>(12, "value"));
	bst86.emplace(Node<int, string>(10, "value"));
	bst86.emplace(Node<int, string>(7, "value"));
	bst86.emplace(Node<int, string>(4, "value"));
	bst86.emplace(Node<int, string>(8, "value"));
	bst86.emplace(Node<int, string>(14, "value"));
	bst86.emplace(Node<int, string>(20, "value"));
	bst86.emplace(Node<int, string>(11, "value"));
	bst86.emplace(Node<int, string>(18, "value"));
	bst86.emplace(Node<int, string>(15, "value"));
	bst86.emplace(Node<int, string>(17, "value"));

	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(19)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(11)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(10)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(12)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(8)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(14)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(18)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(4)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(17)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(20)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(15)->getKey());
	bst86.ascend_printout(bst86.getRoot());
	bst86.deleteNode(bst86.at(7)->getKey());



	BST<int,string> bst87(Node<int, string> (17, "RootVal"));
	bst87.emplace(Node<int, string>(2, "value"));
	bst87.emplace(Node<int, string>(20, "value"));
	bst87.emplace(Node<int, string>(4, "value"));
	bst87.emplace(Node<int, string>(3, "value"));
	bst87.emplace(Node<int, string>(7, "value"));
	bst87.emplace(Node<int, string>(1, "value"));
	bst87.emplace(Node<int, string>(14, "value"));
	bst87.emplace(Node<int, string>(5, "value"));
	bst87.emplace(Node<int, string>(6, "value"));
	bst87.emplace(Node<int, string>(9, "value"));
	bst87.emplace(Node<int, string>(16, "value"));
	bst87.emplace(Node<int, string>(15, "value"));

	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(5)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(7)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(6)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(4)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(9)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(17)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(14)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(1)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(16)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(20)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(3)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(2)->getKey());
	bst87.ascend_printout(bst87.getRoot());
	bst87.deleteNode(bst87.at(15)->getKey());



	BST<int,string> bst88(Node<int, string> (1, "RootVal"));
	bst88.emplace(Node<int, string>(16, "value"));
	bst88.emplace(Node<int, string>(3, "value"));
	bst88.emplace(Node<int, string>(15, "value"));
	bst88.emplace(Node<int, string>(19, "value"));
	bst88.emplace(Node<int, string>(13, "value"));
	bst88.emplace(Node<int, string>(7, "value"));
	bst88.emplace(Node<int, string>(10, "value"));
	bst88.emplace(Node<int, string>(18, "value"));
	bst88.emplace(Node<int, string>(20, "value"));
	bst88.emplace(Node<int, string>(8, "value"));
	bst88.emplace(Node<int, string>(2, "value"));
	bst88.emplace(Node<int, string>(12, "value"));
	bst88.emplace(Node<int, string>(11, "value"));

	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(8)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(20)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(16)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(1)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(11)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(12)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(18)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(19)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(13)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(7)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(10)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(3)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(15)->getKey());
	bst88.ascend_printout(bst88.getRoot());
	bst88.deleteNode(bst88.at(2)->getKey());



	BST<int,string> bst89(Node<int, string> (19, "RootVal"));
	bst89.emplace(Node<int, string>(18, "value"));
	bst89.emplace(Node<int, string>(7, "value"));
	bst89.emplace(Node<int, string>(5, "value"));
	bst89.emplace(Node<int, string>(17, "value"));
	bst89.emplace(Node<int, string>(2, "value"));
	bst89.emplace(Node<int, string>(13, "value"));
	bst89.emplace(Node<int, string>(4, "value"));
	bst89.emplace(Node<int, string>(15, "value"));
	bst89.emplace(Node<int, string>(3, "value"));
	bst89.emplace(Node<int, string>(6, "value"));
	bst89.emplace(Node<int, string>(1, "value"));
	bst89.emplace(Node<int, string>(12, "value"));

	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(6)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(1)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(15)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(17)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(18)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(3)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(5)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(19)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(12)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(4)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(7)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(2)->getKey());
	bst89.ascend_printout(bst89.getRoot());
	bst89.deleteNode(bst89.at(13)->getKey());



	BST<int,string> bst90(Node<int, string> (11, "RootVal"));
	bst90.emplace(Node<int, string>(17, "value"));
	bst90.emplace(Node<int, string>(13, "value"));
	bst90.emplace(Node<int, string>(9, "value"));
	bst90.emplace(Node<int, string>(15, "value"));
	bst90.emplace(Node<int, string>(6, "value"));
	bst90.emplace(Node<int, string>(3, "value"));
	bst90.emplace(Node<int, string>(2, "value"));
	bst90.emplace(Node<int, string>(10, "value"));
	bst90.emplace(Node<int, string>(7, "value"));
	bst90.emplace(Node<int, string>(16, "value"));
	bst90.emplace(Node<int, string>(1, "value"));

	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(7)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(15)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(6)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(1)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(13)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(10)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(16)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(17)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(2)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(11)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(3)->getKey());
	bst90.ascend_printout(bst90.getRoot());
	bst90.deleteNode(bst90.at(9)->getKey());



	BST<int,string> bst91(Node<int, string> (6, "RootVal"));
	bst91.emplace(Node<int, string>(7, "value"));
	bst91.emplace(Node<int, string>(4, "value"));
	bst91.emplace(Node<int, string>(13, "value"));
	bst91.emplace(Node<int, string>(11, "value"));
	bst91.emplace(Node<int, string>(18, "value"));
	bst91.emplace(Node<int, string>(3, "value"));
	bst91.emplace(Node<int, string>(5, "value"));
	bst91.emplace(Node<int, string>(14, "value"));
	bst91.emplace(Node<int, string>(17, "value"));
	bst91.emplace(Node<int, string>(12, "value"));
	bst91.emplace(Node<int, string>(2, "value"));

	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(14)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(11)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(12)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(13)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(5)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(3)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(17)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(7)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(6)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(18)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(2)->getKey());
	bst91.ascend_printout(bst91.getRoot());
	bst91.deleteNode(bst91.at(4)->getKey());



	BST<int,string> bst92(Node<int, string> (6, "RootVal"));
	bst92.emplace(Node<int, string>(14, "value"));
	bst92.emplace(Node<int, string>(1, "value"));
	bst92.emplace(Node<int, string>(7, "value"));
	bst92.emplace(Node<int, string>(2, "value"));
	bst92.emplace(Node<int, string>(9, "value"));
	bst92.emplace(Node<int, string>(19, "value"));
	bst92.emplace(Node<int, string>(18, "value"));
	bst92.emplace(Node<int, string>(15, "value"));
	bst92.emplace(Node<int, string>(10, "value"));
	bst92.emplace(Node<int, string>(17, "value"));
	bst92.emplace(Node<int, string>(5, "value"));
	bst92.emplace(Node<int, string>(4, "value"));
	bst92.emplace(Node<int, string>(12, "value"));

	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(7)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(4)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(17)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(1)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(10)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(2)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(14)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(6)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(12)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(15)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(9)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(5)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(18)->getKey());
	bst92.ascend_printout(bst92.getRoot());
	bst92.deleteNode(bst92.at(19)->getKey());



	BST<int,string> bst93(Node<int, string> (5, "RootVal"));
	bst93.emplace(Node<int, string>(20, "value"));
	bst93.emplace(Node<int, string>(18, "value"));
	bst93.emplace(Node<int, string>(8, "value"));
	bst93.emplace(Node<int, string>(3, "value"));
	bst93.emplace(Node<int, string>(1, "value"));
	bst93.emplace(Node<int, string>(19, "value"));
	bst93.emplace(Node<int, string>(12, "value"));
	bst93.emplace(Node<int, string>(2, "value"));

	bst93.ascend_printout(bst93.getRoot());
	bst93.deleteNode(bst93.at(5)->getKey());
	bst93.ascend_printout(bst93.getRoot());
	bst93.deleteNode(bst93.at(1)->getKey());
	bst93.ascend_printout(bst93.getRoot());
	bst93.deleteNode(bst93.at(19)->getKey());
	bst93.ascend_printout(bst93.getRoot());
	bst93.deleteNode(bst93.at(8)->getKey());
	bst93.ascend_printout(bst93.getRoot());
	bst93.deleteNode(bst93.at(2)->getKey());
	bst93.ascend_printout(bst93.getRoot());
	bst93.deleteNode(bst93.at(18)->getKey());
	bst93.ascend_printout(bst93.getRoot());
	bst93.deleteNode(bst93.at(3)->getKey());
	bst93.ascend_printout(bst93.getRoot());
	bst93.deleteNode(bst93.at(12)->getKey());
	bst93.ascend_printout(bst93.getRoot());
	bst93.deleteNode(bst93.at(20)->getKey());



	BST<int,string> bst94(Node<int, string> (14, "RootVal"));
	bst94.emplace(Node<int, string>(3, "value"));
	bst94.emplace(Node<int, string>(20, "value"));
	bst94.emplace(Node<int, string>(10, "value"));
	bst94.emplace(Node<int, string>(6, "value"));
	bst94.emplace(Node<int, string>(4, "value"));
	bst94.emplace(Node<int, string>(16, "value"));
	bst94.emplace(Node<int, string>(9, "value"));
	bst94.emplace(Node<int, string>(18, "value"));
	bst94.emplace(Node<int, string>(2, "value"));
	bst94.emplace(Node<int, string>(11, "value"));
	bst94.emplace(Node<int, string>(7, "value"));

	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(11)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(16)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(14)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(20)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(9)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(10)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(2)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(3)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(18)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(4)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(6)->getKey());
	bst94.ascend_printout(bst94.getRoot());
	bst94.deleteNode(bst94.at(7)->getKey());



	BST<int,string> bst95(Node<int, string> (9, "RootVal"));
	bst95.emplace(Node<int, string>(11, "value"));
	bst95.emplace(Node<int, string>(6, "value"));
	bst95.emplace(Node<int, string>(7, "value"));
	bst95.emplace(Node<int, string>(12, "value"));
	bst95.emplace(Node<int, string>(14, "value"));
	bst95.emplace(Node<int, string>(3, "value"));
	bst95.emplace(Node<int, string>(4, "value"));
	bst95.emplace(Node<int, string>(10, "value"));
	bst95.emplace(Node<int, string>(19, "value"));
	bst95.emplace(Node<int, string>(17, "value"));
	bst95.emplace(Node<int, string>(16, "value"));
	bst95.emplace(Node<int, string>(1, "value"));
	bst95.emplace(Node<int, string>(5, "value"));
	bst95.emplace(Node<int, string>(15, "value"));

	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(1)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(11)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(5)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(12)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(4)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(19)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(14)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(16)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(6)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(9)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(17)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(10)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(15)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(7)->getKey());
	bst95.ascend_printout(bst95.getRoot());
	bst95.deleteNode(bst95.at(3)->getKey());



	BST<int,string> bst96(Node<int, string> (16, "RootVal"));
	bst96.emplace(Node<int, string>(7, "value"));
	bst96.emplace(Node<int, string>(6, "value"));
	bst96.emplace(Node<int, string>(9, "value"));
	bst96.emplace(Node<int, string>(10, "value"));
	bst96.emplace(Node<int, string>(8, "value"));
	bst96.emplace(Node<int, string>(15, "value"));
	bst96.emplace(Node<int, string>(11, "value"));
	bst96.emplace(Node<int, string>(1, "value"));
	bst96.emplace(Node<int, string>(18, "value"));
	bst96.emplace(Node<int, string>(14, "value"));
	bst96.emplace(Node<int, string>(12, "value"));
	bst96.emplace(Node<int, string>(5, "value"));

	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(6)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(9)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(5)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(14)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(10)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(16)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(1)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(7)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(11)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(18)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(15)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(8)->getKey());
	bst96.ascend_printout(bst96.getRoot());
	bst96.deleteNode(bst96.at(12)->getKey());



	BST<int,string> bst97(Node<int, string> (4, "RootVal"));
	bst97.emplace(Node<int, string>(17, "value"));
	bst97.emplace(Node<int, string>(10, "value"));
	bst97.emplace(Node<int, string>(9, "value"));
	bst97.emplace(Node<int, string>(2, "value"));
	bst97.emplace(Node<int, string>(18, "value"));
	bst97.emplace(Node<int, string>(16, "value"));
	bst97.emplace(Node<int, string>(19, "value"));
	bst97.emplace(Node<int, string>(20, "value"));
	bst97.emplace(Node<int, string>(1, "value"));
	bst97.emplace(Node<int, string>(6, "value"));
	bst97.emplace(Node<int, string>(14, "value"));

	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(6)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(17)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(9)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(4)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(2)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(20)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(10)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(14)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(18)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(19)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(16)->getKey());
	bst97.ascend_printout(bst97.getRoot());
	bst97.deleteNode(bst97.at(1)->getKey());



	BST<int,string> bst98(Node<int, string> (14, "RootVal"));
	bst98.emplace(Node<int, string>(3, "value"));
	bst98.emplace(Node<int, string>(17, "value"));
	bst98.emplace(Node<int, string>(6, "value"));
	bst98.emplace(Node<int, string>(19, "value"));
	bst98.emplace(Node<int, string>(15, "value"));
	bst98.emplace(Node<int, string>(1, "value"));
	bst98.emplace(Node<int, string>(20, "value"));
	bst98.emplace(Node<int, string>(7, "value"));
	bst98.emplace(Node<int, string>(2, "value"));
	bst98.emplace(Node<int, string>(10, "value"));
	bst98.emplace(Node<int, string>(16, "value"));
	bst98.emplace(Node<int, string>(4, "value"));

	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(2)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(7)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(1)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(14)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(15)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(20)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(4)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(16)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(10)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(19)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(17)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(6)->getKey());
	bst98.ascend_printout(bst98.getRoot());
	bst98.deleteNode(bst98.at(3)->getKey());



	BST<int,string> bst99(Node<int, string> (8, "RootVal"));
	bst99.emplace(Node<int, string>(7, "value"));
	bst99.emplace(Node<int, string>(10, "value"));
	bst99.emplace(Node<int, string>(5, "value"));
	bst99.emplace(Node<int, string>(14, "value"));
	bst99.emplace(Node<int, string>(20, "value"));
	bst99.emplace(Node<int, string>(18, "value"));
	bst99.emplace(Node<int, string>(15, "value"));
	bst99.emplace(Node<int, string>(2, "value"));
	bst99.emplace(Node<int, string>(19, "value"));
	bst99.emplace(Node<int, string>(11, "value"));
	bst99.emplace(Node<int, string>(1, "value"));
	bst99.emplace(Node<int, string>(13, "value"));

	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(2)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(19)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(1)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(7)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(18)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(20)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(13)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(5)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(10)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(15)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(11)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(14)->getKey());
	bst99.ascend_printout(bst99.getRoot());
	bst99.deleteNode(bst99.at(8)->getKey());



	BST<int,string> bst100(Node<int, string> (14, "RootVal"));
	bst100.emplace(Node<int, string>(9, "value"));
	bst100.emplace(Node<int, string>(17, "value"));
	bst100.emplace(Node<int, string>(15, "value"));
	bst100.emplace(Node<int, string>(3, "value"));
	bst100.emplace(Node<int, string>(1, "value"));
	bst100.emplace(Node<int, string>(20, "value"));
	bst100.emplace(Node<int, string>(13, "value"));
	bst100.emplace(Node<int, string>(7, "value"));
	bst100.emplace(Node<int, string>(19, "value"));
	bst100.emplace(Node<int, string>(8, "value"));
	bst100.emplace(Node<int, string>(5, "value"));

	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(14)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(20)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(7)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(19)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(5)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(9)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(1)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(15)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(3)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(13)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(8)->getKey());
	bst100.ascend_printout(bst100.getRoot());
	bst100.deleteNode(bst100.at(17)->getKey());



	BST<int,string> bst101(Node<int, string> (14, "RootVal"));
	bst101.emplace(Node<int, string>(2, "value"));
	bst101.emplace(Node<int, string>(17, "value"));
	bst101.emplace(Node<int, string>(20, "value"));
	bst101.emplace(Node<int, string>(13, "value"));
	bst101.emplace(Node<int, string>(3, "value"));
	bst101.emplace(Node<int, string>(4, "value"));
	bst101.emplace(Node<int, string>(11, "value"));
	bst101.emplace(Node<int, string>(9, "value"));
	bst101.emplace(Node<int, string>(19, "value"));
	bst101.emplace(Node<int, string>(8, "value"));
	bst101.emplace(Node<int, string>(6, "value"));
	bst101.emplace(Node<int, string>(12, "value"));
	bst101.emplace(Node<int, string>(5, "value"));

	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(8)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(9)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(3)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(6)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(19)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(11)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(20)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(2)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(13)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(17)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(5)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(12)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(4)->getKey());
	bst101.ascend_printout(bst101.getRoot());
	bst101.deleteNode(bst101.at(14)->getKey());



	BST<int,string> bst102(Node<int, string> (4, "RootVal"));
	bst102.emplace(Node<int, string>(14, "value"));
	bst102.emplace(Node<int, string>(1, "value"));
	bst102.emplace(Node<int, string>(17, "value"));
	bst102.emplace(Node<int, string>(5, "value"));
	bst102.emplace(Node<int, string>(3, "value"));
	bst102.emplace(Node<int, string>(10, "value"));
	bst102.emplace(Node<int, string>(12, "value"));
	bst102.emplace(Node<int, string>(16, "value"));
	bst102.emplace(Node<int, string>(11, "value"));
	bst102.emplace(Node<int, string>(15, "value"));
	bst102.emplace(Node<int, string>(8, "value"));
	bst102.emplace(Node<int, string>(13, "value"));

	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(4)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(3)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(13)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(15)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(1)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(10)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(11)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(14)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(12)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(16)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(17)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(5)->getKey());
	bst102.ascend_printout(bst102.getRoot());
	bst102.deleteNode(bst102.at(8)->getKey());



	BST<int,string> bst103(Node<int, string> (5, "RootVal"));
	bst103.emplace(Node<int, string>(10, "value"));
	bst103.emplace(Node<int, string>(15, "value"));
	bst103.emplace(Node<int, string>(3, "value"));
	bst103.emplace(Node<int, string>(6, "value"));
	bst103.emplace(Node<int, string>(19, "value"));
	bst103.emplace(Node<int, string>(9, "value"));
	bst103.emplace(Node<int, string>(7, "value"));
	bst103.emplace(Node<int, string>(1, "value"));
	bst103.emplace(Node<int, string>(11, "value"));
	bst103.emplace(Node<int, string>(13, "value"));
	bst103.emplace(Node<int, string>(16, "value"));
	bst103.emplace(Node<int, string>(17, "value"));
	bst103.emplace(Node<int, string>(8, "value"));
	bst103.emplace(Node<int, string>(2, "value"));
	bst103.emplace(Node<int, string>(20, "value"));

	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(6)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(20)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(2)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(15)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(16)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(11)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(3)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(5)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(13)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(9)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(19)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(17)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(10)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(8)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(7)->getKey());
	bst103.ascend_printout(bst103.getRoot());
	bst103.deleteNode(bst103.at(1)->getKey());



	BST<int,string> bst104(Node<int, string> (1, "RootVal"));
	bst104.emplace(Node<int, string>(5, "value"));
	bst104.emplace(Node<int, string>(9, "value"));
	bst104.emplace(Node<int, string>(18, "value"));
	bst104.emplace(Node<int, string>(8, "value"));
	bst104.emplace(Node<int, string>(15, "value"));
	bst104.emplace(Node<int, string>(14, "value"));
	bst104.emplace(Node<int, string>(19, "value"));
	bst104.emplace(Node<int, string>(7, "value"));
	bst104.emplace(Node<int, string>(12, "value"));
	bst104.emplace(Node<int, string>(11, "value"));
	bst104.emplace(Node<int, string>(6, "value"));

	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(19)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(1)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(12)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(5)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(18)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(11)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(9)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(14)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(6)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(7)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(15)->getKey());
	bst104.ascend_printout(bst104.getRoot());
	bst104.deleteNode(bst104.at(8)->getKey());



	BST<int,string> bst105(Node<int, string> (7, "RootVal"));
	bst105.emplace(Node<int, string>(19, "value"));
	bst105.emplace(Node<int, string>(18, "value"));
	bst105.emplace(Node<int, string>(13, "value"));
	bst105.emplace(Node<int, string>(10, "value"));
	bst105.emplace(Node<int, string>(14, "value"));
	bst105.emplace(Node<int, string>(3, "value"));
	bst105.emplace(Node<int, string>(4, "value"));
	bst105.emplace(Node<int, string>(8, "value"));
	bst105.emplace(Node<int, string>(15, "value"));
	bst105.emplace(Node<int, string>(6, "value"));
	bst105.emplace(Node<int, string>(1, "value"));
	bst105.emplace(Node<int, string>(16, "value"));

	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(16)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(8)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(18)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(13)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(15)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(14)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(1)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(10)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(19)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(7)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(6)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(4)->getKey());
	bst105.ascend_printout(bst105.getRoot());
	bst105.deleteNode(bst105.at(3)->getKey());



	BST<int,string> bst106(Node<int, string> (6, "RootVal"));
	bst106.emplace(Node<int, string>(7, "value"));
	bst106.emplace(Node<int, string>(12, "value"));
	bst106.emplace(Node<int, string>(3, "value"));
	bst106.emplace(Node<int, string>(9, "value"));
	bst106.emplace(Node<int, string>(2, "value"));
	bst106.emplace(Node<int, string>(20, "value"));
	bst106.emplace(Node<int, string>(19, "value"));
	bst106.emplace(Node<int, string>(5, "value"));
	bst106.emplace(Node<int, string>(17, "value"));
	bst106.emplace(Node<int, string>(10, "value"));
	bst106.emplace(Node<int, string>(16, "value"));

	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(5)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(9)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(12)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(2)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(19)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(16)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(10)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(3)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(20)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(7)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(17)->getKey());
	bst106.ascend_printout(bst106.getRoot());
	bst106.deleteNode(bst106.at(6)->getKey());



	BST<int,string> bst107(Node<int, string> (16, "RootVal"));
	bst107.emplace(Node<int, string>(3, "value"));
	bst107.emplace(Node<int, string>(20, "value"));
	bst107.emplace(Node<int, string>(13, "value"));
	bst107.emplace(Node<int, string>(15, "value"));
	bst107.emplace(Node<int, string>(10, "value"));
	bst107.emplace(Node<int, string>(9, "value"));
	bst107.emplace(Node<int, string>(7, "value"));
	bst107.emplace(Node<int, string>(11, "value"));
	bst107.emplace(Node<int, string>(2, "value"));
	bst107.emplace(Node<int, string>(12, "value"));
	bst107.emplace(Node<int, string>(14, "value"));
	bst107.emplace(Node<int, string>(17, "value"));

	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(10)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(13)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(14)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(15)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(20)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(7)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(16)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(11)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(9)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(3)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(12)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(2)->getKey());
	bst107.ascend_printout(bst107.getRoot());
	bst107.deleteNode(bst107.at(17)->getKey());



	BST<int,string> bst108(Node<int, string> (15, "RootVal"));
	bst108.emplace(Node<int, string>(10, "value"));
	bst108.emplace(Node<int, string>(1, "value"));
	bst108.emplace(Node<int, string>(18, "value"));
	bst108.emplace(Node<int, string>(14, "value"));
	bst108.emplace(Node<int, string>(8, "value"));
	bst108.emplace(Node<int, string>(19, "value"));
	bst108.emplace(Node<int, string>(9, "value"));
	bst108.emplace(Node<int, string>(20, "value"));
	bst108.emplace(Node<int, string>(4, "value"));
	bst108.emplace(Node<int, string>(6, "value"));
	bst108.emplace(Node<int, string>(17, "value"));
	bst108.emplace(Node<int, string>(12, "value"));

	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(15)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(18)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(14)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(17)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(12)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(9)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(4)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(10)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(6)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(20)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(1)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(8)->getKey());
	bst108.ascend_printout(bst108.getRoot());
	bst108.deleteNode(bst108.at(19)->getKey());



	BST<int,string> bst109(Node<int, string> (9, "RootVal"));
	bst109.emplace(Node<int, string>(20, "value"));
	bst109.emplace(Node<int, string>(1, "value"));
	bst109.emplace(Node<int, string>(18, "value"));
	bst109.emplace(Node<int, string>(14, "value"));
	bst109.emplace(Node<int, string>(6, "value"));
	bst109.emplace(Node<int, string>(13, "value"));
	bst109.emplace(Node<int, string>(11, "value"));
	bst109.emplace(Node<int, string>(19, "value"));
	bst109.emplace(Node<int, string>(5, "value"));
	bst109.emplace(Node<int, string>(4, "value"));
	bst109.emplace(Node<int, string>(2, "value"));
	bst109.emplace(Node<int, string>(7, "value"));

	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(19)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(5)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(20)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(2)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(1)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(11)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(18)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(13)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(4)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(7)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(14)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(9)->getKey());
	bst109.ascend_printout(bst109.getRoot());
	bst109.deleteNode(bst109.at(6)->getKey());



	BST<int,string> bst110(Node<int, string> (17, "RootVal"));
	bst110.emplace(Node<int, string>(3, "value"));
	bst110.emplace(Node<int, string>(9, "value"));
	bst110.emplace(Node<int, string>(4, "value"));
	bst110.emplace(Node<int, string>(2, "value"));
	bst110.emplace(Node<int, string>(15, "value"));
	bst110.emplace(Node<int, string>(12, "value"));
	bst110.emplace(Node<int, string>(8, "value"));
	bst110.emplace(Node<int, string>(5, "value"));
	bst110.emplace(Node<int, string>(10, "value"));
	bst110.emplace(Node<int, string>(6, "value"));
	bst110.emplace(Node<int, string>(14, "value"));

	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(8)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(15)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(3)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(4)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(12)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(17)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(6)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(2)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(5)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(14)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(9)->getKey());
	bst110.ascend_printout(bst110.getRoot());
	bst110.deleteNode(bst110.at(10)->getKey());



	BST<int,string> bst111(Node<int, string> (19, "RootVal"));
	bst111.emplace(Node<int, string>(7, "value"));
	bst111.emplace(Node<int, string>(13, "value"));
	bst111.emplace(Node<int, string>(3, "value"));
	bst111.emplace(Node<int, string>(12, "value"));
	bst111.emplace(Node<int, string>(4, "value"));
	bst111.emplace(Node<int, string>(8, "value"));
	bst111.emplace(Node<int, string>(6, "value"));
	bst111.emplace(Node<int, string>(15, "value"));
	bst111.emplace(Node<int, string>(1, "value"));
	bst111.emplace(Node<int, string>(16, "value"));
	bst111.emplace(Node<int, string>(10, "value"));

	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(6)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(19)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(3)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(8)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(12)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(1)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(10)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(13)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(16)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(4)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(7)->getKey());
	bst111.ascend_printout(bst111.getRoot());
	bst111.deleteNode(bst111.at(15)->getKey());



	BST<int,string> bst112(Node<int, string> (10, "RootVal"));
	bst112.emplace(Node<int, string>(13, "value"));
	bst112.emplace(Node<int, string>(11, "value"));
	bst112.emplace(Node<int, string>(14, "value"));
	bst112.emplace(Node<int, string>(9, "value"));
	bst112.emplace(Node<int, string>(4, "value"));
	bst112.emplace(Node<int, string>(15, "value"));
	bst112.emplace(Node<int, string>(17, "value"));
	bst112.emplace(Node<int, string>(18, "value"));
	bst112.emplace(Node<int, string>(8, "value"));
	bst112.emplace(Node<int, string>(5, "value"));
	bst112.emplace(Node<int, string>(7, "value"));
	bst112.emplace(Node<int, string>(1, "value"));

	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(18)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(9)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(15)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(14)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(13)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(7)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(10)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(8)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(11)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(1)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(5)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(17)->getKey());
	bst112.ascend_printout(bst112.getRoot());
	bst112.deleteNode(bst112.at(4)->getKey());



	BST<int,string> bst113(Node<int, string> (11, "RootVal"));
	bst113.emplace(Node<int, string>(8, "value"));
	bst113.emplace(Node<int, string>(17, "value"));
	bst113.emplace(Node<int, string>(12, "value"));
	bst113.emplace(Node<int, string>(2, "value"));
	bst113.emplace(Node<int, string>(4, "value"));
	bst113.emplace(Node<int, string>(18, "value"));
	bst113.emplace(Node<int, string>(14, "value"));
	bst113.emplace(Node<int, string>(13, "value"));
	bst113.emplace(Node<int, string>(19, "value"));
	bst113.emplace(Node<int, string>(7, "value"));
	bst113.emplace(Node<int, string>(5, "value"));
	bst113.emplace(Node<int, string>(1, "value"));

	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(2)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(14)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(13)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(18)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(7)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(11)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(12)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(4)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(19)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(8)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(5)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(17)->getKey());
	bst113.ascend_printout(bst113.getRoot());
	bst113.deleteNode(bst113.at(1)->getKey());



	BST<int,string> bst114(Node<int, string> (18, "RootVal"));
	bst114.emplace(Node<int, string>(14, "value"));
	bst114.emplace(Node<int, string>(13, "value"));
	bst114.emplace(Node<int, string>(20, "value"));
	bst114.emplace(Node<int, string>(9, "value"));
	bst114.emplace(Node<int, string>(5, "value"));
	bst114.emplace(Node<int, string>(16, "value"));
	bst114.emplace(Node<int, string>(8, "value"));
	bst114.emplace(Node<int, string>(7, "value"));
	bst114.emplace(Node<int, string>(2, "value"));
	bst114.emplace(Node<int, string>(19, "value"));
	bst114.emplace(Node<int, string>(10, "value"));
	bst114.emplace(Node<int, string>(1, "value"));

	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(16)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(1)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(19)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(7)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(9)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(13)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(10)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(2)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(5)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(8)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(14)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(20)->getKey());
	bst114.ascend_printout(bst114.getRoot());
	bst114.deleteNode(bst114.at(18)->getKey());



	BST<int,string> bst115(Node<int, string> (10, "RootVal"));
	bst115.emplace(Node<int, string>(13, "value"));
	bst115.emplace(Node<int, string>(1, "value"));
	bst115.emplace(Node<int, string>(11, "value"));
	bst115.emplace(Node<int, string>(19, "value"));
	bst115.emplace(Node<int, string>(5, "value"));
	bst115.emplace(Node<int, string>(3, "value"));
	bst115.emplace(Node<int, string>(7, "value"));
	bst115.emplace(Node<int, string>(17, "value"));
	bst115.emplace(Node<int, string>(16, "value"));
	bst115.emplace(Node<int, string>(18, "value"));

	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(13)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(11)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(19)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(5)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(7)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(17)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(1)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(16)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(3)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(18)->getKey());
	bst115.ascend_printout(bst115.getRoot());
	bst115.deleteNode(bst115.at(10)->getKey());



	BST<int,string> bst116(Node<int, string> (13, "RootVal"));
	bst116.emplace(Node<int, string>(3, "value"));
	bst116.emplace(Node<int, string>(16, "value"));
	bst116.emplace(Node<int, string>(20, "value"));
	bst116.emplace(Node<int, string>(2, "value"));
	bst116.emplace(Node<int, string>(6, "value"));
	bst116.emplace(Node<int, string>(9, "value"));
	bst116.emplace(Node<int, string>(11, "value"));
	bst116.emplace(Node<int, string>(12, "value"));
	bst116.emplace(Node<int, string>(18, "value"));
	bst116.emplace(Node<int, string>(17, "value"));

	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(3)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(17)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(20)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(12)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(13)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(6)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(16)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(9)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(18)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(11)->getKey());
	bst116.ascend_printout(bst116.getRoot());
	bst116.deleteNode(bst116.at(2)->getKey());



	BST<int,string> bst117(Node<int, string> (12, "RootVal"));
	bst117.emplace(Node<int, string>(19, "value"));
	bst117.emplace(Node<int, string>(8, "value"));
	bst117.emplace(Node<int, string>(7, "value"));
	bst117.emplace(Node<int, string>(5, "value"));
	bst117.emplace(Node<int, string>(13, "value"));
	bst117.emplace(Node<int, string>(15, "value"));
	bst117.emplace(Node<int, string>(10, "value"));
	bst117.emplace(Node<int, string>(17, "value"));
	bst117.emplace(Node<int, string>(4, "value"));
	bst117.emplace(Node<int, string>(1, "value"));
	bst117.emplace(Node<int, string>(2, "value"));
	bst117.emplace(Node<int, string>(9, "value"));
	bst117.emplace(Node<int, string>(18, "value"));
	bst117.emplace(Node<int, string>(20, "value"));

	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(18)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(9)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(10)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(8)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(1)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(12)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(4)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(5)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(13)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(2)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(15)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(19)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(7)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(17)->getKey());
	bst117.ascend_printout(bst117.getRoot());
	bst117.deleteNode(bst117.at(20)->getKey());



	BST<int,string> bst118(Node<int, string> (17, "RootVal"));
	bst118.emplace(Node<int, string>(13, "value"));
	bst118.emplace(Node<int, string>(20, "value"));
	bst118.emplace(Node<int, string>(19, "value"));
	bst118.emplace(Node<int, string>(5, "value"));
	bst118.emplace(Node<int, string>(1, "value"));
	bst118.emplace(Node<int, string>(7, "value"));
	bst118.emplace(Node<int, string>(15, "value"));
	bst118.emplace(Node<int, string>(9, "value"));
	bst118.emplace(Node<int, string>(6, "value"));
	bst118.emplace(Node<int, string>(3, "value"));
	bst118.emplace(Node<int, string>(16, "value"));
	bst118.emplace(Node<int, string>(14, "value"));
	bst118.emplace(Node<int, string>(4, "value"));
	bst118.emplace(Node<int, string>(8, "value"));
	bst118.emplace(Node<int, string>(11, "value"));

	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(20)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(1)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(4)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(17)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(5)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(15)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(13)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(19)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(11)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(6)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(14)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(9)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(8)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(3)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(16)->getKey());
	bst118.ascend_printout(bst118.getRoot());
	bst118.deleteNode(bst118.at(7)->getKey());



	BST<int,string> bst119(Node<int, string> (17, "RootVal"));
	bst119.emplace(Node<int, string>(1, "value"));
	bst119.emplace(Node<int, string>(2, "value"));
	bst119.emplace(Node<int, string>(12, "value"));
	bst119.emplace(Node<int, string>(8, "value"));
	bst119.emplace(Node<int, string>(14, "value"));
	bst119.emplace(Node<int, string>(18, "value"));
	bst119.emplace(Node<int, string>(19, "value"));
	bst119.emplace(Node<int, string>(20, "value"));
	bst119.emplace(Node<int, string>(15, "value"));
	bst119.emplace(Node<int, string>(5, "value"));
	bst119.emplace(Node<int, string>(16, "value"));
	bst119.emplace(Node<int, string>(9, "value"));
	bst119.emplace(Node<int, string>(4, "value"));

	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(8)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(16)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(17)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(12)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(19)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(1)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(20)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(2)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(4)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(14)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(9)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(5)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(15)->getKey());
	bst119.ascend_printout(bst119.getRoot());
	bst119.deleteNode(bst119.at(18)->getKey());



	BST<int,string> bst120(Node<int, string> (12, "RootVal"));
	bst120.emplace(Node<int, string>(14, "value"));
	bst120.emplace(Node<int, string>(1, "value"));
	bst120.emplace(Node<int, string>(8, "value"));
	bst120.emplace(Node<int, string>(9, "value"));
	bst120.emplace(Node<int, string>(6, "value"));
	bst120.emplace(Node<int, string>(11, "value"));
	bst120.emplace(Node<int, string>(17, "value"));
	bst120.emplace(Node<int, string>(10, "value"));
	bst120.emplace(Node<int, string>(4, "value"));
	bst120.emplace(Node<int, string>(5, "value"));
	bst120.emplace(Node<int, string>(15, "value"));
	bst120.emplace(Node<int, string>(20, "value"));

	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(8)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(9)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(14)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(5)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(12)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(17)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(11)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(4)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(10)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(15)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(6)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(1)->getKey());
	bst120.ascend_printout(bst120.getRoot());
	bst120.deleteNode(bst120.at(20)->getKey());



	BST<int,string> bst121(Node<int, string> (2, "RootVal"));
	bst121.emplace(Node<int, string>(17, "value"));
	bst121.emplace(Node<int, string>(9, "value"));
	bst121.emplace(Node<int, string>(13, "value"));
	bst121.emplace(Node<int, string>(10, "value"));
	bst121.emplace(Node<int, string>(20, "value"));
	bst121.emplace(Node<int, string>(15, "value"));
	bst121.emplace(Node<int, string>(14, "value"));
	bst121.emplace(Node<int, string>(19, "value"));
	bst121.emplace(Node<int, string>(5, "value"));
	bst121.emplace(Node<int, string>(12, "value"));
	bst121.emplace(Node<int, string>(1, "value"));
	bst121.emplace(Node<int, string>(7, "value"));

	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(20)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(2)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(19)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(9)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(1)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(7)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(10)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(17)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(14)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(5)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(12)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(13)->getKey());
	bst121.ascend_printout(bst121.getRoot());
	bst121.deleteNode(bst121.at(15)->getKey());



	BST<int,string> bst122(Node<int, string> (1, "RootVal"));
	bst122.emplace(Node<int, string>(12, "value"));
	bst122.emplace(Node<int, string>(6, "value"));
	bst122.emplace(Node<int, string>(16, "value"));
	bst122.emplace(Node<int, string>(3, "value"));
	bst122.emplace(Node<int, string>(14, "value"));
	bst122.emplace(Node<int, string>(9, "value"));
	bst122.emplace(Node<int, string>(11, "value"));
	bst122.emplace(Node<int, string>(19, "value"));
	bst122.emplace(Node<int, string>(13, "value"));
	bst122.emplace(Node<int, string>(7, "value"));
	bst122.emplace(Node<int, string>(15, "value"));
	bst122.emplace(Node<int, string>(18, "value"));
	bst122.emplace(Node<int, string>(8, "value"));
	bst122.emplace(Node<int, string>(4, "value"));
	bst122.emplace(Node<int, string>(5, "value"));

	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(4)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(6)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(1)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(3)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(19)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(9)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(15)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(5)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(16)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(18)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(8)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(7)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(12)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(14)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(11)->getKey());
	bst122.ascend_printout(bst122.getRoot());
	bst122.deleteNode(bst122.at(13)->getKey());



	BST<int,string> bst123(Node<int, string> (18, "RootVal"));
	bst123.emplace(Node<int, string>(13, "value"));
	bst123.emplace(Node<int, string>(12, "value"));
	bst123.emplace(Node<int, string>(1, "value"));
	bst123.emplace(Node<int, string>(11, "value"));
	bst123.emplace(Node<int, string>(16, "value"));
	bst123.emplace(Node<int, string>(20, "value"));
	bst123.emplace(Node<int, string>(8, "value"));
	bst123.emplace(Node<int, string>(7, "value"));
	bst123.emplace(Node<int, string>(4, "value"));
	bst123.emplace(Node<int, string>(5, "value"));

	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(18)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(11)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(12)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(5)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(1)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(8)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(20)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(7)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(4)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(16)->getKey());
	bst123.ascend_printout(bst123.getRoot());
	bst123.deleteNode(bst123.at(13)->getKey());



	BST<int,string> bst124(Node<int, string> (9, "RootVal"));
	bst124.emplace(Node<int, string>(11, "value"));
	bst124.emplace(Node<int, string>(1, "value"));
	bst124.emplace(Node<int, string>(12, "value"));
	bst124.emplace(Node<int, string>(14, "value"));
	bst124.emplace(Node<int, string>(13, "value"));
	bst124.emplace(Node<int, string>(7, "value"));
	bst124.emplace(Node<int, string>(6, "value"));
	bst124.emplace(Node<int, string>(20, "value"));
	bst124.emplace(Node<int, string>(17, "value"));

	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(13)->getKey());
	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(11)->getKey());
	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(7)->getKey());
	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(17)->getKey());
	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(6)->getKey());
	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(20)->getKey());
	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(1)->getKey());
	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(12)->getKey());
	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(9)->getKey());
	bst124.ascend_printout(bst124.getRoot());
	bst124.deleteNode(bst124.at(14)->getKey());



	BST<int,string> bst125(Node<int, string> (13, "RootVal"));
	bst125.emplace(Node<int, string>(6, "value"));
	bst125.emplace(Node<int, string>(19, "value"));
	bst125.emplace(Node<int, string>(15, "value"));
	bst125.emplace(Node<int, string>(17, "value"));
	bst125.emplace(Node<int, string>(9, "value"));
	bst125.emplace(Node<int, string>(3, "value"));
	bst125.emplace(Node<int, string>(20, "value"));
	bst125.emplace(Node<int, string>(5, "value"));
	bst125.emplace(Node<int, string>(7, "value"));
	bst125.emplace(Node<int, string>(11, "value"));

	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(17)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(11)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(5)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(9)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(3)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(7)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(6)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(19)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(13)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(20)->getKey());
	bst125.ascend_printout(bst125.getRoot());
	bst125.deleteNode(bst125.at(15)->getKey());



	BST<int,string> bst126(Node<int, string> (2, "RootVal"));
	bst126.emplace(Node<int, string>(1, "value"));
	bst126.emplace(Node<int, string>(17, "value"));
	bst126.emplace(Node<int, string>(8, "value"));
	bst126.emplace(Node<int, string>(13, "value"));
	bst126.emplace(Node<int, string>(3, "value"));
	bst126.emplace(Node<int, string>(9, "value"));
	bst126.emplace(Node<int, string>(20, "value"));
	bst126.emplace(Node<int, string>(7, "value"));
	bst126.emplace(Node<int, string>(5, "value"));
	bst126.emplace(Node<int, string>(16, "value"));
	bst126.emplace(Node<int, string>(19, "value"));
	bst126.emplace(Node<int, string>(14, "value"));

	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(1)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(16)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(7)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(9)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(13)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(19)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(3)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(20)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(14)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(8)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(17)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(2)->getKey());
	bst126.ascend_printout(bst126.getRoot());
	bst126.deleteNode(bst126.at(5)->getKey());



	BST<int,string> bst127(Node<int, string> (1, "RootVal"));
	bst127.emplace(Node<int, string>(15, "value"));
	bst127.emplace(Node<int, string>(17, "value"));
	bst127.emplace(Node<int, string>(11, "value"));
	bst127.emplace(Node<int, string>(2, "value"));
	bst127.emplace(Node<int, string>(20, "value"));
	bst127.emplace(Node<int, string>(3, "value"));
	bst127.emplace(Node<int, string>(4, "value"));
	bst127.emplace(Node<int, string>(9, "value"));
	bst127.emplace(Node<int, string>(18, "value"));
	bst127.emplace(Node<int, string>(19, "value"));
	bst127.emplace(Node<int, string>(12, "value"));
	bst127.emplace(Node<int, string>(10, "value"));

	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(19)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(3)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(20)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(2)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(1)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(12)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(10)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(17)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(4)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(11)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(9)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(15)->getKey());
	bst127.ascend_printout(bst127.getRoot());
	bst127.deleteNode(bst127.at(18)->getKey());



	BST<int,string> bst128(Node<int, string> (15, "RootVal"));
	bst128.emplace(Node<int, string>(19, "value"));
	bst128.emplace(Node<int, string>(9, "value"));
	bst128.emplace(Node<int, string>(20, "value"));
	bst128.emplace(Node<int, string>(16, "value"));
	bst128.emplace(Node<int, string>(4, "value"));
	bst128.emplace(Node<int, string>(17, "value"));
	bst128.emplace(Node<int, string>(8, "value"));
	bst128.emplace(Node<int, string>(1, "value"));
	bst128.emplace(Node<int, string>(3, "value"));

	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(3)->getKey());
	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(17)->getKey());
	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(8)->getKey());
	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(9)->getKey());
	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(1)->getKey());
	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(15)->getKey());
	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(16)->getKey());
	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(19)->getKey());
	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(20)->getKey());
	bst128.ascend_printout(bst128.getRoot());
	bst128.deleteNode(bst128.at(4)->getKey());



	BST<int,string> bst129(Node<int, string> (14, "RootVal"));
	bst129.emplace(Node<int, string>(12, "value"));
	bst129.emplace(Node<int, string>(11, "value"));
	bst129.emplace(Node<int, string>(19, "value"));
	bst129.emplace(Node<int, string>(17, "value"));
	bst129.emplace(Node<int, string>(18, "value"));
	bst129.emplace(Node<int, string>(1, "value"));
	bst129.emplace(Node<int, string>(2, "value"));
	bst129.emplace(Node<int, string>(5, "value"));
	bst129.emplace(Node<int, string>(20, "value"));
	bst129.emplace(Node<int, string>(8, "value"));

	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(12)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(20)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(17)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(1)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(8)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(11)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(14)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(19)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(5)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(2)->getKey());
	bst129.ascend_printout(bst129.getRoot());
	bst129.deleteNode(bst129.at(18)->getKey());



	BST<int,string> bst130(Node<int, string> (13, "RootVal"));
	bst130.emplace(Node<int, string>(8, "value"));
	bst130.emplace(Node<int, string>(11, "value"));
	bst130.emplace(Node<int, string>(5, "value"));
	bst130.emplace(Node<int, string>(4, "value"));
	bst130.emplace(Node<int, string>(10, "value"));
	bst130.emplace(Node<int, string>(6, "value"));
	bst130.emplace(Node<int, string>(15, "value"));
	bst130.emplace(Node<int, string>(18, "value"));
	bst130.emplace(Node<int, string>(19, "value"));
	bst130.emplace(Node<int, string>(9, "value"));

	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(8)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(11)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(9)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(4)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(13)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(19)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(10)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(18)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(6)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(5)->getKey());
	bst130.ascend_printout(bst130.getRoot());
	bst130.deleteNode(bst130.at(15)->getKey());



	BST<int,string> bst131(Node<int, string> (15, "RootVal"));
	bst131.emplace(Node<int, string>(11, "value"));
	bst131.emplace(Node<int, string>(5, "value"));
	bst131.emplace(Node<int, string>(7, "value"));
	bst131.emplace(Node<int, string>(8, "value"));
	bst131.emplace(Node<int, string>(1, "value"));
	bst131.emplace(Node<int, string>(4, "value"));
	bst131.emplace(Node<int, string>(6, "value"));
	bst131.emplace(Node<int, string>(14, "value"));
	bst131.emplace(Node<int, string>(18, "value"));
	bst131.emplace(Node<int, string>(20, "value"));
	bst131.emplace(Node<int, string>(2, "value"));
	bst131.emplace(Node<int, string>(9, "value"));
	bst131.emplace(Node<int, string>(13, "value"));

	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(9)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(13)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(15)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(20)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(1)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(6)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(5)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(7)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(18)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(2)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(8)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(4)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(11)->getKey());
	bst131.ascend_printout(bst131.getRoot());
	bst131.deleteNode(bst131.at(14)->getKey());



	BST<int,string> bst132(Node<int, string> (5, "RootVal"));
	bst132.emplace(Node<int, string>(2, "value"));
	bst132.emplace(Node<int, string>(7, "value"));
	bst132.emplace(Node<int, string>(6, "value"));
	bst132.emplace(Node<int, string>(14, "value"));
	bst132.emplace(Node<int, string>(8, "value"));
	bst132.emplace(Node<int, string>(12, "value"));
	bst132.emplace(Node<int, string>(17, "value"));
	bst132.emplace(Node<int, string>(3, "value"));
	bst132.emplace(Node<int, string>(9, "value"));
	bst132.emplace(Node<int, string>(19, "value"));
	bst132.emplace(Node<int, string>(20, "value"));
	bst132.emplace(Node<int, string>(15, "value"));

	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(20)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(17)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(14)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(9)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(3)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(7)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(2)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(5)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(15)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(8)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(12)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(6)->getKey());
	bst132.ascend_printout(bst132.getRoot());
	bst132.deleteNode(bst132.at(19)->getKey());



	BST<int,string> bst133(Node<int, string> (13, "RootVal"));
	bst133.emplace(Node<int, string>(1, "value"));
	bst133.emplace(Node<int, string>(9, "value"));
	bst133.emplace(Node<int, string>(7, "value"));
	bst133.emplace(Node<int, string>(20, "value"));
	bst133.emplace(Node<int, string>(15, "value"));
	bst133.emplace(Node<int, string>(17, "value"));
	bst133.emplace(Node<int, string>(10, "value"));
	bst133.emplace(Node<int, string>(8, "value"));
	bst133.emplace(Node<int, string>(16, "value"));
	bst133.emplace(Node<int, string>(5, "value"));
	bst133.emplace(Node<int, string>(3, "value"));
	bst133.emplace(Node<int, string>(4, "value"));

	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(9)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(13)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(16)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(1)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(10)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(5)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(7)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(3)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(8)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(17)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(20)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(15)->getKey());
	bst133.ascend_printout(bst133.getRoot());
	bst133.deleteNode(bst133.at(4)->getKey());



	BST<int,string> bst134(Node<int, string> (19, "RootVal"));
	bst134.emplace(Node<int, string>(16, "value"));
	bst134.emplace(Node<int, string>(15, "value"));
	bst134.emplace(Node<int, string>(9, "value"));
	bst134.emplace(Node<int, string>(2, "value"));
	bst134.emplace(Node<int, string>(18, "value"));
	bst134.emplace(Node<int, string>(7, "value"));
	bst134.emplace(Node<int, string>(11, "value"));
	bst134.emplace(Node<int, string>(20, "value"));
	bst134.emplace(Node<int, string>(4, "value"));
	bst134.emplace(Node<int, string>(6, "value"));
	bst134.emplace(Node<int, string>(1, "value"));
	bst134.emplace(Node<int, string>(5, "value"));
	bst134.emplace(Node<int, string>(14, "value"));

	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(4)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(16)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(20)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(6)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(5)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(14)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(9)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(11)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(19)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(1)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(7)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(15)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(2)->getKey());
	bst134.ascend_printout(bst134.getRoot());
	bst134.deleteNode(bst134.at(18)->getKey());



	BST<int,string> bst135(Node<int, string> (9, "RootVal"));
	bst135.emplace(Node<int, string>(14, "value"));
	bst135.emplace(Node<int, string>(5, "value"));
	bst135.emplace(Node<int, string>(2, "value"));
	bst135.emplace(Node<int, string>(1, "value"));
	bst135.emplace(Node<int, string>(20, "value"));
	bst135.emplace(Node<int, string>(18, "value"));
	bst135.emplace(Node<int, string>(10, "value"));
	bst135.emplace(Node<int, string>(6, "value"));
	bst135.emplace(Node<int, string>(15, "value"));
	bst135.emplace(Node<int, string>(7, "value"));
	bst135.emplace(Node<int, string>(4, "value"));
	bst135.emplace(Node<int, string>(8, "value"));

	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(6)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(14)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(2)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(8)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(7)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(5)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(20)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(1)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(9)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(10)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(18)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(15)->getKey());
	bst135.ascend_printout(bst135.getRoot());
	bst135.deleteNode(bst135.at(4)->getKey());



	BST<int,string> bst136(Node<int, string> (12, "RootVal"));
	bst136.emplace(Node<int, string>(6, "value"));
	bst136.emplace(Node<int, string>(9, "value"));
	bst136.emplace(Node<int, string>(18, "value"));
	bst136.emplace(Node<int, string>(15, "value"));
	bst136.emplace(Node<int, string>(7, "value"));
	bst136.emplace(Node<int, string>(3, "value"));
	bst136.emplace(Node<int, string>(16, "value"));
	bst136.emplace(Node<int, string>(14, "value"));
	bst136.emplace(Node<int, string>(10, "value"));
	bst136.emplace(Node<int, string>(2, "value"));
	bst136.emplace(Node<int, string>(13, "value"));

	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(7)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(18)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(16)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(13)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(12)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(2)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(3)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(6)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(15)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(10)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(14)->getKey());
	bst136.ascend_printout(bst136.getRoot());
	bst136.deleteNode(bst136.at(9)->getKey());



	BST<int,string> bst137(Node<int, string> (20, "RootVal"));
	bst137.emplace(Node<int, string>(14, "value"));
	bst137.emplace(Node<int, string>(3, "value"));
	bst137.emplace(Node<int, string>(10, "value"));
	bst137.emplace(Node<int, string>(18, "value"));
	bst137.emplace(Node<int, string>(15, "value"));
	bst137.emplace(Node<int, string>(4, "value"));
	bst137.emplace(Node<int, string>(6, "value"));
	bst137.emplace(Node<int, string>(8, "value"));
	bst137.emplace(Node<int, string>(17, "value"));
	bst137.emplace(Node<int, string>(19, "value"));
	bst137.emplace(Node<int, string>(2, "value"));

	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(2)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(17)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(4)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(20)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(19)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(10)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(14)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(3)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(6)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(18)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(8)->getKey());
	bst137.ascend_printout(bst137.getRoot());
	bst137.deleteNode(bst137.at(15)->getKey());



	BST<int,string> bst138(Node<int, string> (11, "RootVal"));
	bst138.emplace(Node<int, string>(18, "value"));
	bst138.emplace(Node<int, string>(4, "value"));
	bst138.emplace(Node<int, string>(19, "value"));
	bst138.emplace(Node<int, string>(6, "value"));
	bst138.emplace(Node<int, string>(20, "value"));
	bst138.emplace(Node<int, string>(16, "value"));
	bst138.emplace(Node<int, string>(14, "value"));
	bst138.emplace(Node<int, string>(8, "value"));
	bst138.emplace(Node<int, string>(13, "value"));
	bst138.emplace(Node<int, string>(17, "value"));
	bst138.emplace(Node<int, string>(3, "value"));
	bst138.emplace(Node<int, string>(10, "value"));

	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(11)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(3)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(18)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(10)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(14)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(19)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(13)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(20)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(6)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(8)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(17)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(4)->getKey());
	bst138.ascend_printout(bst138.getRoot());
	bst138.deleteNode(bst138.at(16)->getKey());



	BST<int,string> bst139(Node<int, string> (9, "RootVal"));
	bst139.emplace(Node<int, string>(14, "value"));
	bst139.emplace(Node<int, string>(7, "value"));
	bst139.emplace(Node<int, string>(6, "value"));
	bst139.emplace(Node<int, string>(5, "value"));
	bst139.emplace(Node<int, string>(3, "value"));
	bst139.emplace(Node<int, string>(19, "value"));
	bst139.emplace(Node<int, string>(20, "value"));
	bst139.emplace(Node<int, string>(10, "value"));
	bst139.emplace(Node<int, string>(17, "value"));
	bst139.emplace(Node<int, string>(11, "value"));
	bst139.emplace(Node<int, string>(15, "value"));
	bst139.emplace(Node<int, string>(12, "value"));

	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(10)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(15)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(20)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(19)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(17)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(7)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(14)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(12)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(11)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(6)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(3)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(9)->getKey());
	bst139.ascend_printout(bst139.getRoot());
	bst139.deleteNode(bst139.at(5)->getKey());



	BST<int,string> bst140(Node<int, string> (10, "RootVal"));
	bst140.emplace(Node<int, string>(4, "value"));
	bst140.emplace(Node<int, string>(18, "value"));
	bst140.emplace(Node<int, string>(11, "value"));
	bst140.emplace(Node<int, string>(3, "value"));
	bst140.emplace(Node<int, string>(5, "value"));
	bst140.emplace(Node<int, string>(12, "value"));
	bst140.emplace(Node<int, string>(2, "value"));
	bst140.emplace(Node<int, string>(9, "value"));
	bst140.emplace(Node<int, string>(6, "value"));
	bst140.emplace(Node<int, string>(13, "value"));
	bst140.emplace(Node<int, string>(7, "value"));
	bst140.emplace(Node<int, string>(16, "value"));
	bst140.emplace(Node<int, string>(17, "value"));

	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(3)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(11)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(7)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(12)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(5)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(17)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(4)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(2)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(10)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(9)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(16)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(6)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(13)->getKey());
	bst140.ascend_printout(bst140.getRoot());
	bst140.deleteNode(bst140.at(18)->getKey());



	BST<int,string> bst141(Node<int, string> (2, "RootVal"));
	bst141.emplace(Node<int, string>(5, "value"));
	bst141.emplace(Node<int, string>(17, "value"));
	bst141.emplace(Node<int, string>(6, "value"));
	bst141.emplace(Node<int, string>(4, "value"));
	bst141.emplace(Node<int, string>(8, "value"));
	bst141.emplace(Node<int, string>(20, "value"));
	bst141.emplace(Node<int, string>(13, "value"));
	bst141.emplace(Node<int, string>(14, "value"));
	bst141.emplace(Node<int, string>(3, "value"));
	bst141.emplace(Node<int, string>(9, "value"));
	bst141.emplace(Node<int, string>(19, "value"));
	bst141.emplace(Node<int, string>(18, "value"));

	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(14)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(5)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(19)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(4)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(3)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(18)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(8)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(6)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(2)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(9)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(17)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(20)->getKey());
	bst141.ascend_printout(bst141.getRoot());
	bst141.deleteNode(bst141.at(13)->getKey());



	BST<int,string> bst142(Node<int, string> (17, "RootVal"));
	bst142.emplace(Node<int, string>(6, "value"));
	bst142.emplace(Node<int, string>(14, "value"));
	bst142.emplace(Node<int, string>(13, "value"));
	bst142.emplace(Node<int, string>(2, "value"));
	bst142.emplace(Node<int, string>(3, "value"));
	bst142.emplace(Node<int, string>(9, "value"));
	bst142.emplace(Node<int, string>(4, "value"));
	bst142.emplace(Node<int, string>(18, "value"));

	bst142.ascend_printout(bst142.getRoot());
	bst142.deleteNode(bst142.at(13)->getKey());
	bst142.ascend_printout(bst142.getRoot());
	bst142.deleteNode(bst142.at(14)->getKey());
	bst142.ascend_printout(bst142.getRoot());
	bst142.deleteNode(bst142.at(17)->getKey());
	bst142.ascend_printout(bst142.getRoot());
	bst142.deleteNode(bst142.at(9)->getKey());
	bst142.ascend_printout(bst142.getRoot());
	bst142.deleteNode(bst142.at(2)->getKey());
	bst142.ascend_printout(bst142.getRoot());
	bst142.deleteNode(bst142.at(4)->getKey());
	bst142.ascend_printout(bst142.getRoot());
	bst142.deleteNode(bst142.at(18)->getKey());
	bst142.ascend_printout(bst142.getRoot());
	bst142.deleteNode(bst142.at(3)->getKey());
	bst142.ascend_printout(bst142.getRoot());
	bst142.deleteNode(bst142.at(6)->getKey());



	BST<int,string> bst143(Node<int, string> (13, "RootVal"));
	bst143.emplace(Node<int, string>(17, "value"));
	bst143.emplace(Node<int, string>(19, "value"));
	bst143.emplace(Node<int, string>(8, "value"));
	bst143.emplace(Node<int, string>(6, "value"));
	bst143.emplace(Node<int, string>(5, "value"));
	bst143.emplace(Node<int, string>(7, "value"));
	bst143.emplace(Node<int, string>(11, "value"));
	bst143.emplace(Node<int, string>(10, "value"));
	bst143.emplace(Node<int, string>(12, "value"));
	bst143.emplace(Node<int, string>(1, "value"));
	bst143.emplace(Node<int, string>(16, "value"));
	bst143.emplace(Node<int, string>(4, "value"));
	bst143.emplace(Node<int, string>(3, "value"));

	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(5)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(10)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(17)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(13)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(6)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(7)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(4)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(11)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(3)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(16)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(1)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(12)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(8)->getKey());
	bst143.ascend_printout(bst143.getRoot());
	bst143.deleteNode(bst143.at(19)->getKey());



	BST<int,string> bst144(Node<int, string> (19, "RootVal"));
	bst144.emplace(Node<int, string>(10, "value"));
	bst144.emplace(Node<int, string>(3, "value"));
	bst144.emplace(Node<int, string>(4, "value"));
	bst144.emplace(Node<int, string>(17, "value"));
	bst144.emplace(Node<int, string>(8, "value"));
	bst144.emplace(Node<int, string>(11, "value"));
	bst144.emplace(Node<int, string>(18, "value"));
	bst144.emplace(Node<int, string>(1, "value"));
	bst144.emplace(Node<int, string>(12, "value"));
	bst144.emplace(Node<int, string>(6, "value"));
	bst144.emplace(Node<int, string>(9, "value"));
	bst144.emplace(Node<int, string>(7, "value"));

	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(4)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(9)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(11)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(1)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(19)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(17)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(7)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(6)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(12)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(18)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(8)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(3)->getKey());
	bst144.ascend_printout(bst144.getRoot());
	bst144.deleteNode(bst144.at(10)->getKey());



	BST<int,string> bst145(Node<int, string> (10, "RootVal"));
	bst145.emplace(Node<int, string>(13, "value"));
	bst145.emplace(Node<int, string>(11, "value"));
	bst145.emplace(Node<int, string>(6, "value"));
	bst145.emplace(Node<int, string>(17, "value"));
	bst145.emplace(Node<int, string>(19, "value"));
	bst145.emplace(Node<int, string>(20, "value"));
	bst145.emplace(Node<int, string>(5, "value"));
	bst145.emplace(Node<int, string>(7, "value"));
	bst145.emplace(Node<int, string>(15, "value"));
	bst145.emplace(Node<int, string>(9, "value"));

	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(5)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(6)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(7)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(11)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(9)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(19)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(17)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(10)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(15)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(13)->getKey());
	bst145.ascend_printout(bst145.getRoot());
	bst145.deleteNode(bst145.at(20)->getKey());



	BST<int,string> bst146(Node<int, string> (5, "RootVal"));
	bst146.emplace(Node<int, string>(13, "value"));
	bst146.emplace(Node<int, string>(7, "value"));
	bst146.emplace(Node<int, string>(1, "value"));
	bst146.emplace(Node<int, string>(4, "value"));
	bst146.emplace(Node<int, string>(9, "value"));
	bst146.emplace(Node<int, string>(11, "value"));
	bst146.emplace(Node<int, string>(16, "value"));
	bst146.emplace(Node<int, string>(2, "value"));
	bst146.emplace(Node<int, string>(6, "value"));
	bst146.emplace(Node<int, string>(12, "value"));
	bst146.emplace(Node<int, string>(20, "value"));
	bst146.emplace(Node<int, string>(17, "value"));
	bst146.emplace(Node<int, string>(3, "value"));

	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(6)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(12)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(4)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(20)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(11)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(2)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(5)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(9)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(17)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(7)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(13)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(1)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(16)->getKey());
	bst146.ascend_printout(bst146.getRoot());
	bst146.deleteNode(bst146.at(3)->getKey());



	BST<int,string> bst147(Node<int, string> (5, "RootVal"));
	bst147.emplace(Node<int, string>(15, "value"));
	bst147.emplace(Node<int, string>(19, "value"));
	bst147.emplace(Node<int, string>(9, "value"));
	bst147.emplace(Node<int, string>(14, "value"));
	bst147.emplace(Node<int, string>(7, "value"));
	bst147.emplace(Node<int, string>(18, "value"));
	bst147.emplace(Node<int, string>(16, "value"));
	bst147.emplace(Node<int, string>(20, "value"));
	bst147.emplace(Node<int, string>(13, "value"));
	bst147.emplace(Node<int, string>(10, "value"));
	bst147.emplace(Node<int, string>(4, "value"));
	bst147.emplace(Node<int, string>(6, "value"));

	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(7)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(16)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(13)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(4)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(9)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(10)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(15)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(14)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(6)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(20)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(19)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(5)->getKey());
	bst147.ascend_printout(bst147.getRoot());
	bst147.deleteNode(bst147.at(18)->getKey());



	BST<int,string> bst148(Node<int, string> (12, "RootVal"));
	bst148.emplace(Node<int, string>(14, "value"));
	bst148.emplace(Node<int, string>(11, "value"));
	bst148.emplace(Node<int, string>(17, "value"));
	bst148.emplace(Node<int, string>(9, "value"));
	bst148.emplace(Node<int, string>(2, "value"));
	bst148.emplace(Node<int, string>(1, "value"));
	bst148.emplace(Node<int, string>(5, "value"));
	bst148.emplace(Node<int, string>(10, "value"));
	bst148.emplace(Node<int, string>(8, "value"));
	bst148.emplace(Node<int, string>(16, "value"));

	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(5)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(8)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(17)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(16)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(14)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(1)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(9)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(2)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(11)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(10)->getKey());
	bst148.ascend_printout(bst148.getRoot());
	bst148.deleteNode(bst148.at(12)->getKey());



	BST<int,string> bst149(Node<int, string> (11, "RootVal"));
	bst149.emplace(Node<int, string>(10, "value"));
	bst149.emplace(Node<int, string>(14, "value"));
	bst149.emplace(Node<int, string>(15, "value"));
	bst149.emplace(Node<int, string>(3, "value"));
	bst149.emplace(Node<int, string>(7, "value"));
	bst149.emplace(Node<int, string>(9, "value"));
	bst149.emplace(Node<int, string>(1, "value"));
	bst149.emplace(Node<int, string>(18, "value"));
	bst149.emplace(Node<int, string>(20, "value"));
	bst149.emplace(Node<int, string>(4, "value"));

	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(10)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(4)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(20)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(9)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(14)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(3)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(11)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(18)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(7)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(15)->getKey());
	bst149.ascend_printout(bst149.getRoot());
	bst149.deleteNode(bst149.at(1)->getKey());



	BST<int,string> bst150(Node<int, string> (11, "RootVal"));
	bst150.emplace(Node<int, string>(14, "value"));
	bst150.emplace(Node<int, string>(4, "value"));
	bst150.emplace(Node<int, string>(5, "value"));
	bst150.emplace(Node<int, string>(9, "value"));
	bst150.emplace(Node<int, string>(2, "value"));
	bst150.emplace(Node<int, string>(17, "value"));
	bst150.emplace(Node<int, string>(19, "value"));
	bst150.emplace(Node<int, string>(7, "value"));
	bst150.emplace(Node<int, string>(6, "value"));
	bst150.emplace(Node<int, string>(8, "value"));
	bst150.emplace(Node<int, string>(18, "value"));

	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(11)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(2)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(19)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(17)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(6)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(4)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(7)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(8)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(14)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(5)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(18)->getKey());
	bst150.ascend_printout(bst150.getRoot());
	bst150.deleteNode(bst150.at(9)->getKey());



	BST<int,string> bst151(Node<int, string> (12, "RootVal"));
	bst151.emplace(Node<int, string>(10, "value"));
	bst151.emplace(Node<int, string>(2, "value"));
	bst151.emplace(Node<int, string>(9, "value"));
	bst151.emplace(Node<int, string>(7, "value"));
	bst151.emplace(Node<int, string>(11, "value"));
	bst151.emplace(Node<int, string>(16, "value"));
	bst151.emplace(Node<int, string>(18, "value"));
	bst151.emplace(Node<int, string>(6, "value"));
	bst151.emplace(Node<int, string>(1, "value"));

	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(2)->getKey());
	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(6)->getKey());
	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(1)->getKey());
	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(18)->getKey());
	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(16)->getKey());
	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(11)->getKey());
	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(7)->getKey());
	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(12)->getKey());
	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(10)->getKey());
	bst151.ascend_printout(bst151.getRoot());
	bst151.deleteNode(bst151.at(9)->getKey());



	BST<int,string> bst152(Node<int, string> (20, "RootVal"));
	bst152.emplace(Node<int, string>(14, "value"));
	bst152.emplace(Node<int, string>(16, "value"));
	bst152.emplace(Node<int, string>(19, "value"));
	bst152.emplace(Node<int, string>(10, "value"));
	bst152.emplace(Node<int, string>(4, "value"));
	bst152.emplace(Node<int, string>(13, "value"));
	bst152.emplace(Node<int, string>(2, "value"));
	bst152.emplace(Node<int, string>(18, "value"));
	bst152.emplace(Node<int, string>(6, "value"));
	bst152.emplace(Node<int, string>(12, "value"));
	bst152.emplace(Node<int, string>(3, "value"));
	bst152.emplace(Node<int, string>(7, "value"));

	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(2)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(7)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(19)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(12)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(10)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(16)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(14)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(18)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(6)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(3)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(20)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(13)->getKey());
	bst152.ascend_printout(bst152.getRoot());
	bst152.deleteNode(bst152.at(4)->getKey());



	BST<int,string> bst153(Node<int, string> (11, "RootVal"));
	bst153.emplace(Node<int, string>(20, "value"));
	bst153.emplace(Node<int, string>(18, "value"));
	bst153.emplace(Node<int, string>(6, "value"));
	bst153.emplace(Node<int, string>(14, "value"));
	bst153.emplace(Node<int, string>(17, "value"));
	bst153.emplace(Node<int, string>(12, "value"));
	bst153.emplace(Node<int, string>(9, "value"));
	bst153.emplace(Node<int, string>(3, "value"));
	bst153.emplace(Node<int, string>(13, "value"));
	bst153.emplace(Node<int, string>(1, "value"));
	bst153.emplace(Node<int, string>(4, "value"));
	bst153.emplace(Node<int, string>(7, "value"));
	bst153.emplace(Node<int, string>(8, "value"));

	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(14)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(20)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(12)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(8)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(6)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(9)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(4)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(1)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(7)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(13)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(17)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(18)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(3)->getKey());
	bst153.ascend_printout(bst153.getRoot());
	bst153.deleteNode(bst153.at(11)->getKey());



	BST<int,string> bst154(Node<int, string> (13, "RootVal"));
	bst154.emplace(Node<int, string>(10, "value"));
	bst154.emplace(Node<int, string>(11, "value"));
	bst154.emplace(Node<int, string>(6, "value"));
	bst154.emplace(Node<int, string>(17, "value"));
	bst154.emplace(Node<int, string>(1, "value"));
	bst154.emplace(Node<int, string>(14, "value"));
	bst154.emplace(Node<int, string>(2, "value"));
	bst154.emplace(Node<int, string>(19, "value"));
	bst154.emplace(Node<int, string>(4, "value"));
	bst154.emplace(Node<int, string>(3, "value"));
	bst154.emplace(Node<int, string>(8, "value"));

	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(11)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(10)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(17)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(2)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(14)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(1)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(3)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(6)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(13)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(8)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(4)->getKey());
	bst154.ascend_printout(bst154.getRoot());
	bst154.deleteNode(bst154.at(19)->getKey());



	BST<int,string> bst155(Node<int, string> (16, "RootVal"));
	bst155.emplace(Node<int, string>(15, "value"));
	bst155.emplace(Node<int, string>(12, "value"));
	bst155.emplace(Node<int, string>(18, "value"));
	bst155.emplace(Node<int, string>(13, "value"));
	bst155.emplace(Node<int, string>(3, "value"));
	bst155.emplace(Node<int, string>(1, "value"));
	bst155.emplace(Node<int, string>(20, "value"));
	bst155.emplace(Node<int, string>(7, "value"));
	bst155.emplace(Node<int, string>(6, "value"));
	bst155.emplace(Node<int, string>(14, "value"));
	bst155.emplace(Node<int, string>(11, "value"));
	bst155.emplace(Node<int, string>(8, "value"));

	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(6)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(15)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(8)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(1)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(13)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(20)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(18)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(16)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(11)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(14)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(12)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(3)->getKey());
	bst155.ascend_printout(bst155.getRoot());
	bst155.deleteNode(bst155.at(7)->getKey());



	BST<int,string> bst156(Node<int, string> (4, "RootVal"));
	bst156.emplace(Node<int, string>(18, "value"));
	bst156.emplace(Node<int, string>(9, "value"));
	bst156.emplace(Node<int, string>(17, "value"));
	bst156.emplace(Node<int, string>(14, "value"));
	bst156.emplace(Node<int, string>(8, "value"));
	bst156.emplace(Node<int, string>(12, "value"));
	bst156.emplace(Node<int, string>(13, "value"));
	bst156.emplace(Node<int, string>(16, "value"));
	bst156.emplace(Node<int, string>(11, "value"));
	bst156.emplace(Node<int, string>(3, "value"));
	bst156.emplace(Node<int, string>(10, "value"));
	bst156.emplace(Node<int, string>(2, "value"));

	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(14)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(2)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(11)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(16)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(18)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(17)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(9)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(3)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(13)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(10)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(4)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(12)->getKey());
	bst156.ascend_printout(bst156.getRoot());
	bst156.deleteNode(bst156.at(8)->getKey());



	BST<int,string> bst157(Node<int, string> (20, "RootVal"));
	bst157.emplace(Node<int, string>(1, "value"));
	bst157.emplace(Node<int, string>(8, "value"));
	bst157.emplace(Node<int, string>(14, "value"));
	bst157.emplace(Node<int, string>(18, "value"));
	bst157.emplace(Node<int, string>(10, "value"));
	bst157.emplace(Node<int, string>(9, "value"));
	bst157.emplace(Node<int, string>(2, "value"));
	bst157.emplace(Node<int, string>(19, "value"));
	bst157.emplace(Node<int, string>(12, "value"));
	bst157.emplace(Node<int, string>(13, "value"));
	bst157.emplace(Node<int, string>(16, "value"));
	bst157.emplace(Node<int, string>(17, "value"));

	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(19)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(9)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(8)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(1)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(20)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(10)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(2)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(13)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(18)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(17)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(12)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(16)->getKey());
	bst157.ascend_printout(bst157.getRoot());
	bst157.deleteNode(bst157.at(14)->getKey());



	BST<int,string> bst158(Node<int, string> (19, "RootVal"));
	bst158.emplace(Node<int, string>(4, "value"));
	bst158.emplace(Node<int, string>(5, "value"));
	bst158.emplace(Node<int, string>(3, "value"));
	bst158.emplace(Node<int, string>(17, "value"));
	bst158.emplace(Node<int, string>(14, "value"));
	bst158.emplace(Node<int, string>(10, "value"));
	bst158.emplace(Node<int, string>(2, "value"));
	bst158.emplace(Node<int, string>(15, "value"));
	bst158.emplace(Node<int, string>(18, "value"));
	bst158.emplace(Node<int, string>(8, "value"));
	bst158.emplace(Node<int, string>(6, "value"));
	bst158.emplace(Node<int, string>(11, "value"));

	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(14)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(18)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(5)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(2)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(19)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(6)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(10)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(3)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(17)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(11)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(8)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(15)->getKey());
	bst158.ascend_printout(bst158.getRoot());
	bst158.deleteNode(bst158.at(4)->getKey());



	BST<int,string> bst159(Node<int, string> (1, "RootVal"));
	bst159.emplace(Node<int, string>(3, "value"));
	bst159.emplace(Node<int, string>(12, "value"));
	bst159.emplace(Node<int, string>(9, "value"));
	bst159.emplace(Node<int, string>(5, "value"));
	bst159.emplace(Node<int, string>(13, "value"));
	bst159.emplace(Node<int, string>(7, "value"));
	bst159.emplace(Node<int, string>(6, "value"));
	bst159.emplace(Node<int, string>(16, "value"));
	bst159.emplace(Node<int, string>(4, "value"));
	bst159.emplace(Node<int, string>(2, "value"));
	bst159.emplace(Node<int, string>(19, "value"));
	bst159.emplace(Node<int, string>(15, "value"));

	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(3)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(15)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(9)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(13)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(7)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(16)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(4)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(5)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(1)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(12)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(6)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(19)->getKey());
	bst159.ascend_printout(bst159.getRoot());
	bst159.deleteNode(bst159.at(2)->getKey());



	BST<int,string> bst160(Node<int, string> (2, "RootVal"));
	bst160.emplace(Node<int, string>(8, "value"));
	bst160.emplace(Node<int, string>(19, "value"));
	bst160.emplace(Node<int, string>(3, "value"));
	bst160.emplace(Node<int, string>(13, "value"));
	bst160.emplace(Node<int, string>(18, "value"));
	bst160.emplace(Node<int, string>(20, "value"));
	bst160.emplace(Node<int, string>(4, "value"));
	bst160.emplace(Node<int, string>(12, "value"));
	bst160.emplace(Node<int, string>(11, "value"));
	bst160.emplace(Node<int, string>(10, "value"));
	bst160.emplace(Node<int, string>(6, "value"));

	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(6)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(18)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(13)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(19)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(12)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(4)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(2)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(11)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(8)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(3)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(20)->getKey());
	bst160.ascend_printout(bst160.getRoot());
	bst160.deleteNode(bst160.at(10)->getKey());



	BST<int,string> bst161(Node<int, string> (11, "RootVal"));
	bst161.emplace(Node<int, string>(15, "value"));
	bst161.emplace(Node<int, string>(14, "value"));
	bst161.emplace(Node<int, string>(17, "value"));
	bst161.emplace(Node<int, string>(13, "value"));
	bst161.emplace(Node<int, string>(10, "value"));
	bst161.emplace(Node<int, string>(16, "value"));
	bst161.emplace(Node<int, string>(12, "value"));
	bst161.emplace(Node<int, string>(6, "value"));
	bst161.emplace(Node<int, string>(20, "value"));
	bst161.emplace(Node<int, string>(3, "value"));

	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(20)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(12)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(3)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(10)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(6)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(13)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(15)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(17)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(14)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(16)->getKey());
	bst161.ascend_printout(bst161.getRoot());
	bst161.deleteNode(bst161.at(11)->getKey());



	BST<int,string> bst162(Node<int, string> (2, "RootVal"));
	bst162.emplace(Node<int, string>(12, "value"));
	bst162.emplace(Node<int, string>(13, "value"));
	bst162.emplace(Node<int, string>(16, "value"));
	bst162.emplace(Node<int, string>(6, "value"));
	bst162.emplace(Node<int, string>(20, "value"));
	bst162.emplace(Node<int, string>(11, "value"));
	bst162.emplace(Node<int, string>(19, "value"));
	bst162.emplace(Node<int, string>(15, "value"));
	bst162.emplace(Node<int, string>(7, "value"));
	bst162.emplace(Node<int, string>(4, "value"));
	bst162.emplace(Node<int, string>(5, "value"));
	bst162.emplace(Node<int, string>(18, "value"));
	bst162.emplace(Node<int, string>(8, "value"));

	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(2)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(13)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(4)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(12)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(19)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(6)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(20)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(16)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(15)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(5)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(7)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(8)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(11)->getKey());
	bst162.ascend_printout(bst162.getRoot());
	bst162.deleteNode(bst162.at(18)->getKey());



	BST<int,string> bst163(Node<int, string> (16, "RootVal"));
	bst163.emplace(Node<int, string>(8, "value"));
	bst163.emplace(Node<int, string>(20, "value"));
	bst163.emplace(Node<int, string>(7, "value"));
	bst163.emplace(Node<int, string>(13, "value"));
	bst163.emplace(Node<int, string>(17, "value"));
	bst163.emplace(Node<int, string>(4, "value"));
	bst163.emplace(Node<int, string>(5, "value"));
	bst163.emplace(Node<int, string>(1, "value"));
	bst163.emplace(Node<int, string>(15, "value"));
	bst163.emplace(Node<int, string>(10, "value"));
	bst163.emplace(Node<int, string>(19, "value"));
	bst163.emplace(Node<int, string>(9, "value"));

	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(16)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(8)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(20)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(10)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(15)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(13)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(17)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(19)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(5)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(4)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(1)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(9)->getKey());
	bst163.ascend_printout(bst163.getRoot());
	bst163.deleteNode(bst163.at(7)->getKey());



	BST<int,string> bst164(Node<int, string> (2, "RootVal"));
	bst164.emplace(Node<int, string>(10, "value"));
	bst164.emplace(Node<int, string>(5, "value"));
	bst164.emplace(Node<int, string>(16, "value"));
	bst164.emplace(Node<int, string>(1, "value"));
	bst164.emplace(Node<int, string>(14, "value"));
	bst164.emplace(Node<int, string>(17, "value"));
	bst164.emplace(Node<int, string>(7, "value"));
	bst164.emplace(Node<int, string>(20, "value"));
	bst164.emplace(Node<int, string>(9, "value"));
	bst164.emplace(Node<int, string>(11, "value"));
	bst164.emplace(Node<int, string>(15, "value"));
	bst164.emplace(Node<int, string>(18, "value"));
	bst164.emplace(Node<int, string>(6, "value"));
	bst164.emplace(Node<int, string>(8, "value"));

	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(9)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(5)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(6)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(11)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(17)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(20)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(7)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(14)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(2)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(15)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(18)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(10)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(1)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(16)->getKey());
	bst164.ascend_printout(bst164.getRoot());
	bst164.deleteNode(bst164.at(8)->getKey());



	BST<int,string> bst165(Node<int, string> (12, "RootVal"));
	bst165.emplace(Node<int, string>(18, "value"));
	bst165.emplace(Node<int, string>(10, "value"));
	bst165.emplace(Node<int, string>(11, "value"));
	bst165.emplace(Node<int, string>(3, "value"));
	bst165.emplace(Node<int, string>(15, "value"));
	bst165.emplace(Node<int, string>(4, "value"));
	bst165.emplace(Node<int, string>(2, "value"));
	bst165.emplace(Node<int, string>(14, "value"));
	bst165.emplace(Node<int, string>(19, "value"));
	bst165.emplace(Node<int, string>(13, "value"));
	bst165.emplace(Node<int, string>(8, "value"));
	bst165.emplace(Node<int, string>(5, "value"));

	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(19)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(10)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(8)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(4)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(14)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(18)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(2)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(15)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(13)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(12)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(5)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(3)->getKey());
	bst165.ascend_printout(bst165.getRoot());
	bst165.deleteNode(bst165.at(11)->getKey());



	BST<int,string> bst166(Node<int, string> (2, "RootVal"));
	bst166.emplace(Node<int, string>(6, "value"));
	bst166.emplace(Node<int, string>(1, "value"));
	bst166.emplace(Node<int, string>(9, "value"));
	bst166.emplace(Node<int, string>(18, "value"));
	bst166.emplace(Node<int, string>(13, "value"));
	bst166.emplace(Node<int, string>(20, "value"));
	bst166.emplace(Node<int, string>(3, "value"));
	bst166.emplace(Node<int, string>(10, "value"));
	bst166.emplace(Node<int, string>(19, "value"));
	bst166.emplace(Node<int, string>(16, "value"));
	bst166.emplace(Node<int, string>(12, "value"));
	bst166.emplace(Node<int, string>(4, "value"));
	bst166.emplace(Node<int, string>(8, "value"));

	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(9)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(10)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(4)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(3)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(18)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(8)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(12)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(1)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(6)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(2)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(19)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(16)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(20)->getKey());
	bst166.ascend_printout(bst166.getRoot());
	bst166.deleteNode(bst166.at(13)->getKey());



	BST<int,string> bst167(Node<int, string> (8, "RootVal"));
	bst167.emplace(Node<int, string>(20, "value"));
	bst167.emplace(Node<int, string>(5, "value"));
	bst167.emplace(Node<int, string>(3, "value"));
	bst167.emplace(Node<int, string>(4, "value"));
	bst167.emplace(Node<int, string>(16, "value"));
	bst167.emplace(Node<int, string>(10, "value"));
	bst167.emplace(Node<int, string>(13, "value"));
	bst167.emplace(Node<int, string>(2, "value"));
	bst167.emplace(Node<int, string>(1, "value"));
	bst167.emplace(Node<int, string>(17, "value"));
	bst167.emplace(Node<int, string>(18, "value"));
	bst167.emplace(Node<int, string>(19, "value"));

	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(8)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(16)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(20)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(19)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(13)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(4)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(2)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(18)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(1)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(10)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(17)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(3)->getKey());
	bst167.ascend_printout(bst167.getRoot());
	bst167.deleteNode(bst167.at(5)->getKey());



	BST<int,string> bst168(Node<int, string> (9, "RootVal"));
	bst168.emplace(Node<int, string>(12, "value"));
	bst168.emplace(Node<int, string>(16, "value"));
	bst168.emplace(Node<int, string>(1, "value"));
	bst168.emplace(Node<int, string>(15, "value"));
	bst168.emplace(Node<int, string>(5, "value"));
	bst168.emplace(Node<int, string>(8, "value"));
	bst168.emplace(Node<int, string>(13, "value"));
	bst168.emplace(Node<int, string>(7, "value"));
	bst168.emplace(Node<int, string>(10, "value"));
	bst168.emplace(Node<int, string>(6, "value"));
	bst168.emplace(Node<int, string>(20, "value"));
	bst168.emplace(Node<int, string>(3, "value"));
	bst168.emplace(Node<int, string>(2, "value"));

	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(12)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(10)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(2)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(9)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(3)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(13)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(8)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(6)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(16)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(5)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(7)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(15)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(20)->getKey());
	bst168.ascend_printout(bst168.getRoot());
	bst168.deleteNode(bst168.at(1)->getKey());



	BST<int,string> bst169(Node<int, string> (8, "RootVal"));
	bst169.emplace(Node<int, string>(10, "value"));
	bst169.emplace(Node<int, string>(4, "value"));
	bst169.emplace(Node<int, string>(18, "value"));
	bst169.emplace(Node<int, string>(15, "value"));
	bst169.emplace(Node<int, string>(9, "value"));
	bst169.emplace(Node<int, string>(16, "value"));
	bst169.emplace(Node<int, string>(3, "value"));
	bst169.emplace(Node<int, string>(6, "value"));
	bst169.emplace(Node<int, string>(11, "value"));
	bst169.emplace(Node<int, string>(12, "value"));
	bst169.emplace(Node<int, string>(2, "value"));
	bst169.emplace(Node<int, string>(20, "value"));
	bst169.emplace(Node<int, string>(1, "value"));

	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(1)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(16)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(4)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(18)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(6)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(20)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(2)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(8)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(12)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(10)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(3)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(15)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(11)->getKey());
	bst169.ascend_printout(bst169.getRoot());
	bst169.deleteNode(bst169.at(9)->getKey());



	BST<int,string> bst170(Node<int, string> (7, "RootVal"));
	bst170.emplace(Node<int, string>(15, "value"));
	bst170.emplace(Node<int, string>(5, "value"));
	bst170.emplace(Node<int, string>(14, "value"));
	bst170.emplace(Node<int, string>(9, "value"));
	bst170.emplace(Node<int, string>(10, "value"));
	bst170.emplace(Node<int, string>(3, "value"));
	bst170.emplace(Node<int, string>(8, "value"));
	bst170.emplace(Node<int, string>(16, "value"));
	bst170.emplace(Node<int, string>(4, "value"));
	bst170.emplace(Node<int, string>(2, "value"));
	bst170.emplace(Node<int, string>(17, "value"));
	bst170.emplace(Node<int, string>(12, "value"));
	bst170.emplace(Node<int, string>(1, "value"));

	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(14)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(12)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(4)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(9)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(7)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(1)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(2)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(10)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(5)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(3)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(16)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(17)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(8)->getKey());
	bst170.ascend_printout(bst170.getRoot());
	bst170.deleteNode(bst170.at(15)->getKey());



	BST<int,string> bst171(Node<int, string> (8, "RootVal"));
	bst171.emplace(Node<int, string>(12, "value"));
	bst171.emplace(Node<int, string>(5, "value"));
	bst171.emplace(Node<int, string>(10, "value"));
	bst171.emplace(Node<int, string>(4, "value"));
	bst171.emplace(Node<int, string>(13, "value"));
	bst171.emplace(Node<int, string>(19, "value"));
	bst171.emplace(Node<int, string>(14, "value"));
	bst171.emplace(Node<int, string>(18, "value"));
	bst171.emplace(Node<int, string>(16, "value"));

	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(10)->getKey());
	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(16)->getKey());
	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(14)->getKey());
	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(12)->getKey());
	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(13)->getKey());
	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(5)->getKey());
	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(18)->getKey());
	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(4)->getKey());
	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(19)->getKey());
	bst171.ascend_printout(bst171.getRoot());
	bst171.deleteNode(bst171.at(8)->getKey());



	BST<int,string> bst172(Node<int, string> (19, "RootVal"));
	bst172.emplace(Node<int, string>(7, "value"));
	bst172.emplace(Node<int, string>(6, "value"));
	bst172.emplace(Node<int, string>(4, "value"));
	bst172.emplace(Node<int, string>(20, "value"));
	bst172.emplace(Node<int, string>(18, "value"));
	bst172.emplace(Node<int, string>(11, "value"));
	bst172.emplace(Node<int, string>(16, "value"));
	bst172.emplace(Node<int, string>(14, "value"));
	bst172.emplace(Node<int, string>(1, "value"));
	bst172.emplace(Node<int, string>(13, "value"));

	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(11)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(20)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(16)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(19)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(1)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(18)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(7)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(4)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(14)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(13)->getKey());
	bst172.ascend_printout(bst172.getRoot());
	bst172.deleteNode(bst172.at(6)->getKey());



	BST<int,string> bst173(Node<int, string> (4, "RootVal"));
	bst173.emplace(Node<int, string>(3, "value"));
	bst173.emplace(Node<int, string>(7, "value"));
	bst173.emplace(Node<int, string>(10, "value"));
	bst173.emplace(Node<int, string>(9, "value"));
	bst173.emplace(Node<int, string>(17, "value"));
	bst173.emplace(Node<int, string>(14, "value"));
	bst173.emplace(Node<int, string>(12, "value"));
	bst173.emplace(Node<int, string>(19, "value"));
	bst173.emplace(Node<int, string>(16, "value"));
	bst173.emplace(Node<int, string>(13, "value"));
	bst173.emplace(Node<int, string>(2, "value"));
	bst173.emplace(Node<int, string>(6, "value"));

	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(12)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(9)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(16)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(13)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(4)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(7)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(14)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(17)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(19)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(6)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(3)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(10)->getKey());
	bst173.ascend_printout(bst173.getRoot());
	bst173.deleteNode(bst173.at(2)->getKey());



	BST<int,string> bst174(Node<int, string> (14, "RootVal"));
	bst174.emplace(Node<int, string>(13, "value"));
	bst174.emplace(Node<int, string>(9, "value"));
	bst174.emplace(Node<int, string>(19, "value"));
	bst174.emplace(Node<int, string>(11, "value"));
	bst174.emplace(Node<int, string>(2, "value"));
	bst174.emplace(Node<int, string>(6, "value"));
	bst174.emplace(Node<int, string>(4, "value"));
	bst174.emplace(Node<int, string>(12, "value"));
	bst174.emplace(Node<int, string>(18, "value"));
	bst174.emplace(Node<int, string>(10, "value"));
	bst174.emplace(Node<int, string>(3, "value"));

	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(19)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(13)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(3)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(9)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(2)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(14)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(18)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(10)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(4)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(11)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(12)->getKey());
	bst174.ascend_printout(bst174.getRoot());
	bst174.deleteNode(bst174.at(6)->getKey());



	BST<int,string> bst175(Node<int, string> (10, "RootVal"));
	bst175.emplace(Node<int, string>(12, "value"));
	bst175.emplace(Node<int, string>(6, "value"));
	bst175.emplace(Node<int, string>(13, "value"));
	bst175.emplace(Node<int, string>(20, "value"));
	bst175.emplace(Node<int, string>(5, "value"));
	bst175.emplace(Node<int, string>(8, "value"));
	bst175.emplace(Node<int, string>(9, "value"));
	bst175.emplace(Node<int, string>(14, "value"));
	bst175.emplace(Node<int, string>(4, "value"));
	bst175.emplace(Node<int, string>(2, "value"));
	bst175.emplace(Node<int, string>(3, "value"));
	bst175.emplace(Node<int, string>(19, "value"));

	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(2)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(6)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(8)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(3)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(4)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(12)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(10)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(13)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(20)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(5)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(9)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(19)->getKey());
	bst175.ascend_printout(bst175.getRoot());
	bst175.deleteNode(bst175.at(14)->getKey());



	BST<int,string> bst176(Node<int, string> (15, "RootVal"));
	bst176.emplace(Node<int, string>(3, "value"));
	bst176.emplace(Node<int, string>(11, "value"));
	bst176.emplace(Node<int, string>(1, "value"));
	bst176.emplace(Node<int, string>(16, "value"));
	bst176.emplace(Node<int, string>(7, "value"));
	bst176.emplace(Node<int, string>(20, "value"));
	bst176.emplace(Node<int, string>(18, "value"));
	bst176.emplace(Node<int, string>(19, "value"));

	bst176.ascend_printout(bst176.getRoot());
	bst176.deleteNode(bst176.at(16)->getKey());
	bst176.ascend_printout(bst176.getRoot());
	bst176.deleteNode(bst176.at(18)->getKey());
	bst176.ascend_printout(bst176.getRoot());
	bst176.deleteNode(bst176.at(7)->getKey());
	bst176.ascend_printout(bst176.getRoot());
	bst176.deleteNode(bst176.at(1)->getKey());
	bst176.ascend_printout(bst176.getRoot());
	bst176.deleteNode(bst176.at(15)->getKey());
	bst176.ascend_printout(bst176.getRoot());
	bst176.deleteNode(bst176.at(20)->getKey());
	bst176.ascend_printout(bst176.getRoot());
	bst176.deleteNode(bst176.at(11)->getKey());
	bst176.ascend_printout(bst176.getRoot());
	bst176.deleteNode(bst176.at(19)->getKey());
	bst176.ascend_printout(bst176.getRoot());
	bst176.deleteNode(bst176.at(3)->getKey());



	BST<int,string> bst177(Node<int, string> (16, "RootVal"));
	bst177.emplace(Node<int, string>(19, "value"));
	bst177.emplace(Node<int, string>(20, "value"));
	bst177.emplace(Node<int, string>(14, "value"));
	bst177.emplace(Node<int, string>(17, "value"));
	bst177.emplace(Node<int, string>(11, "value"));
	bst177.emplace(Node<int, string>(8, "value"));
	bst177.emplace(Node<int, string>(13, "value"));
	bst177.emplace(Node<int, string>(1, "value"));
	bst177.emplace(Node<int, string>(5, "value"));
	bst177.emplace(Node<int, string>(9, "value"));
	bst177.emplace(Node<int, string>(4, "value"));
	bst177.emplace(Node<int, string>(10, "value"));
	bst177.emplace(Node<int, string>(6, "value"));

	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(4)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(19)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(10)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(1)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(11)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(8)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(5)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(14)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(17)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(6)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(13)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(9)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(16)->getKey());
	bst177.ascend_printout(bst177.getRoot());
	bst177.deleteNode(bst177.at(20)->getKey());



	BST<int,string> bst178(Node<int, string> (9, "RootVal"));
	bst178.emplace(Node<int, string>(5, "value"));
	bst178.emplace(Node<int, string>(8, "value"));
	bst178.emplace(Node<int, string>(3, "value"));
	bst178.emplace(Node<int, string>(18, "value"));
	bst178.emplace(Node<int, string>(16, "value"));
	bst178.emplace(Node<int, string>(17, "value"));
	bst178.emplace(Node<int, string>(6, "value"));
	bst178.emplace(Node<int, string>(10, "value"));
	bst178.emplace(Node<int, string>(7, "value"));
	bst178.emplace(Node<int, string>(4, "value"));
	bst178.emplace(Node<int, string>(12, "value"));
	bst178.emplace(Node<int, string>(13, "value"));
	bst178.emplace(Node<int, string>(15, "value"));

	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(6)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(9)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(8)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(13)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(16)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(4)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(3)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(18)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(17)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(12)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(10)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(5)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(15)->getKey());
	bst178.ascend_printout(bst178.getRoot());
	bst178.deleteNode(bst178.at(7)->getKey());



	BST<int,string> bst179(Node<int, string> (7, "RootVal"));
	bst179.emplace(Node<int, string>(5, "value"));
	bst179.emplace(Node<int, string>(19, "value"));
	bst179.emplace(Node<int, string>(1, "value"));
	bst179.emplace(Node<int, string>(2, "value"));
	bst179.emplace(Node<int, string>(12, "value"));
	bst179.emplace(Node<int, string>(16, "value"));
	bst179.emplace(Node<int, string>(3, "value"));
	bst179.emplace(Node<int, string>(9, "value"));
	bst179.emplace(Node<int, string>(14, "value"));
	bst179.emplace(Node<int, string>(4, "value"));
	bst179.emplace(Node<int, string>(13, "value"));

	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(3)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(13)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(14)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(12)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(2)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(5)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(7)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(16)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(9)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(4)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(1)->getKey());
	bst179.ascend_printout(bst179.getRoot());
	bst179.deleteNode(bst179.at(19)->getKey());



	BST<int,string> bst180(Node<int, string> (14, "RootVal"));
	bst180.emplace(Node<int, string>(1, "value"));
	bst180.emplace(Node<int, string>(4, "value"));
	bst180.emplace(Node<int, string>(10, "value"));
	bst180.emplace(Node<int, string>(6, "value"));
	bst180.emplace(Node<int, string>(7, "value"));
	bst180.emplace(Node<int, string>(17, "value"));
	bst180.emplace(Node<int, string>(20, "value"));
	bst180.emplace(Node<int, string>(13, "value"));
	bst180.emplace(Node<int, string>(8, "value"));
	bst180.emplace(Node<int, string>(3, "value"));
	bst180.emplace(Node<int, string>(9, "value"));
	bst180.emplace(Node<int, string>(16, "value"));

	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(14)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(17)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(6)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(4)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(1)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(7)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(9)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(10)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(20)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(3)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(8)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(13)->getKey());
	bst180.ascend_printout(bst180.getRoot());
	bst180.deleteNode(bst180.at(16)->getKey());



	BST<int,string> bst181(Node<int, string> (4, "RootVal"));
	bst181.emplace(Node<int, string>(6, "value"));
	bst181.emplace(Node<int, string>(14, "value"));
	bst181.emplace(Node<int, string>(20, "value"));
	bst181.emplace(Node<int, string>(11, "value"));
	bst181.emplace(Node<int, string>(3, "value"));
	bst181.emplace(Node<int, string>(8, "value"));
	bst181.emplace(Node<int, string>(5, "value"));
	bst181.emplace(Node<int, string>(1, "value"));
	bst181.emplace(Node<int, string>(17, "value"));
	bst181.emplace(Node<int, string>(16, "value"));
	bst181.emplace(Node<int, string>(19, "value"));
	bst181.emplace(Node<int, string>(18, "value"));

	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(6)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(4)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(14)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(18)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(20)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(19)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(5)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(11)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(16)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(1)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(3)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(17)->getKey());
	bst181.ascend_printout(bst181.getRoot());
	bst181.deleteNode(bst181.at(8)->getKey());



	BST<int,string> bst182(Node<int, string> (5, "RootVal"));
	bst182.emplace(Node<int, string>(14, "value"));
	bst182.emplace(Node<int, string>(13, "value"));
	bst182.emplace(Node<int, string>(11, "value"));
	bst182.emplace(Node<int, string>(4, "value"));
	bst182.emplace(Node<int, string>(18, "value"));
	bst182.emplace(Node<int, string>(16, "value"));
	bst182.emplace(Node<int, string>(20, "value"));
	bst182.emplace(Node<int, string>(2, "value"));
	bst182.emplace(Node<int, string>(9, "value"));
	bst182.emplace(Node<int, string>(7, "value"));
	bst182.emplace(Node<int, string>(19, "value"));
	bst182.emplace(Node<int, string>(8, "value"));
	bst182.emplace(Node<int, string>(17, "value"));
	bst182.emplace(Node<int, string>(15, "value"));
	bst182.emplace(Node<int, string>(12, "value"));
	bst182.emplace(Node<int, string>(10, "value"));
	bst182.emplace(Node<int, string>(1, "value"));

	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(15)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(9)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(8)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(20)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(7)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(17)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(10)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(12)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(19)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(1)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(16)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(14)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(11)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(5)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(18)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(4)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(13)->getKey());
	bst182.ascend_printout(bst182.getRoot());
	bst182.deleteNode(bst182.at(2)->getKey());



	BST<int,string> bst183(Node<int, string> (16, "RootVal"));
	bst183.emplace(Node<int, string>(2, "value"));
	bst183.emplace(Node<int, string>(7, "value"));
	bst183.emplace(Node<int, string>(15, "value"));
	bst183.emplace(Node<int, string>(3, "value"));
	bst183.emplace(Node<int, string>(1, "value"));
	bst183.emplace(Node<int, string>(20, "value"));
	bst183.emplace(Node<int, string>(4, "value"));
	bst183.emplace(Node<int, string>(11, "value"));
	bst183.emplace(Node<int, string>(13, "value"));
	bst183.emplace(Node<int, string>(6, "value"));
	bst183.emplace(Node<int, string>(8, "value"));
	bst183.emplace(Node<int, string>(19, "value"));
	bst183.emplace(Node<int, string>(17, "value"));
	bst183.emplace(Node<int, string>(18, "value"));

	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(1)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(2)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(16)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(20)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(11)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(8)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(13)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(18)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(3)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(17)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(15)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(6)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(19)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(4)->getKey());
	bst183.ascend_printout(bst183.getRoot());
	bst183.deleteNode(bst183.at(7)->getKey());



	BST<int,string> bst184(Node<int, string> (12, "RootVal"));
	bst184.emplace(Node<int, string>(16, "value"));
	bst184.emplace(Node<int, string>(7, "value"));
	bst184.emplace(Node<int, string>(18, "value"));
	bst184.emplace(Node<int, string>(17, "value"));
	bst184.emplace(Node<int, string>(2, "value"));
	bst184.emplace(Node<int, string>(5, "value"));
	bst184.emplace(Node<int, string>(20, "value"));
	bst184.emplace(Node<int, string>(15, "value"));
	bst184.emplace(Node<int, string>(9, "value"));
	bst184.emplace(Node<int, string>(11, "value"));
	bst184.emplace(Node<int, string>(14, "value"));
	bst184.emplace(Node<int, string>(13, "value"));
	bst184.emplace(Node<int, string>(3, "value"));

	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(20)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(13)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(9)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(18)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(12)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(2)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(11)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(14)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(3)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(15)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(16)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(7)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(5)->getKey());
	bst184.ascend_printout(bst184.getRoot());
	bst184.deleteNode(bst184.at(17)->getKey());



	BST<int,string> bst185(Node<int, string> (6, "RootVal"));
	bst185.emplace(Node<int, string>(16, "value"));
	bst185.emplace(Node<int, string>(14, "value"));
	bst185.emplace(Node<int, string>(13, "value"));
	bst185.emplace(Node<int, string>(17, "value"));
	bst185.emplace(Node<int, string>(7, "value"));
	bst185.emplace(Node<int, string>(12, "value"));
	bst185.emplace(Node<int, string>(2, "value"));
	bst185.emplace(Node<int, string>(8, "value"));
	bst185.emplace(Node<int, string>(10, "value"));
	bst185.emplace(Node<int, string>(18, "value"));
	bst185.emplace(Node<int, string>(4, "value"));

	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(18)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(6)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(13)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(14)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(16)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(10)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(12)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(8)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(17)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(7)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(4)->getKey());
	bst185.ascend_printout(bst185.getRoot());
	bst185.deleteNode(bst185.at(2)->getKey());



	BST<int,string> bst186(Node<int, string> (10, "RootVal"));
	bst186.emplace(Node<int, string>(11, "value"));
	bst186.emplace(Node<int, string>(19, "value"));
	bst186.emplace(Node<int, string>(16, "value"));
	bst186.emplace(Node<int, string>(2, "value"));
	bst186.emplace(Node<int, string>(15, "value"));
	bst186.emplace(Node<int, string>(17, "value"));
	bst186.emplace(Node<int, string>(14, "value"));
	bst186.emplace(Node<int, string>(7, "value"));
	bst186.emplace(Node<int, string>(13, "value"));

	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(16)->getKey());
	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(13)->getKey());
	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(7)->getKey());
	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(17)->getKey());
	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(19)->getKey());
	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(14)->getKey());
	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(10)->getKey());
	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(2)->getKey());
	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(15)->getKey());
	bst186.ascend_printout(bst186.getRoot());
	bst186.deleteNode(bst186.at(11)->getKey());



	BST<int,string> bst187(Node<int, string> (19, "RootVal"));
	bst187.emplace(Node<int, string>(14, "value"));
	bst187.emplace(Node<int, string>(16, "value"));
	bst187.emplace(Node<int, string>(1, "value"));
	bst187.emplace(Node<int, string>(11, "value"));
	bst187.emplace(Node<int, string>(12, "value"));
	bst187.emplace(Node<int, string>(13, "value"));
	bst187.emplace(Node<int, string>(7, "value"));
	bst187.emplace(Node<int, string>(4, "value"));
	bst187.emplace(Node<int, string>(20, "value"));
	bst187.emplace(Node<int, string>(2, "value"));
	bst187.emplace(Node<int, string>(9, "value"));

	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(12)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(13)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(7)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(16)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(1)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(4)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(9)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(14)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(11)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(19)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(20)->getKey());
	bst187.ascend_printout(bst187.getRoot());
	bst187.deleteNode(bst187.at(2)->getKey());



	BST<int,string> bst188(Node<int, string> (5, "RootVal"));
	bst188.emplace(Node<int, string>(10, "value"));
	bst188.emplace(Node<int, string>(8, "value"));
	bst188.emplace(Node<int, string>(2, "value"));
	bst188.emplace(Node<int, string>(7, "value"));
	bst188.emplace(Node<int, string>(17, "value"));
	bst188.emplace(Node<int, string>(3, "value"));
	bst188.emplace(Node<int, string>(6, "value"));
	bst188.emplace(Node<int, string>(18, "value"));
	bst188.emplace(Node<int, string>(1, "value"));

	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(10)->getKey());
	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(5)->getKey());
	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(8)->getKey());
	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(6)->getKey());
	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(18)->getKey());
	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(1)->getKey());
	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(3)->getKey());
	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(7)->getKey());
	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(17)->getKey());
	bst188.ascend_printout(bst188.getRoot());
	bst188.deleteNode(bst188.at(2)->getKey());



	BST<int,string> bst189(Node<int, string> (4, "RootVal"));
	bst189.emplace(Node<int, string>(13, "value"));
	bst189.emplace(Node<int, string>(7, "value"));
	bst189.emplace(Node<int, string>(2, "value"));
	bst189.emplace(Node<int, string>(12, "value"));
	bst189.emplace(Node<int, string>(6, "value"));
	bst189.emplace(Node<int, string>(20, "value"));
	bst189.emplace(Node<int, string>(3, "value"));
	bst189.emplace(Node<int, string>(14, "value"));
	bst189.emplace(Node<int, string>(9, "value"));
	bst189.emplace(Node<int, string>(16, "value"));
	bst189.emplace(Node<int, string>(17, "value"));

	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(7)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(17)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(13)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(12)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(20)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(16)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(4)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(6)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(2)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(3)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(9)->getKey());
	bst189.ascend_printout(bst189.getRoot());
	bst189.deleteNode(bst189.at(14)->getKey());



	BST<int,string> bst190(Node<int, string> (12, "RootVal"));
	bst190.emplace(Node<int, string>(8, "value"));
	bst190.emplace(Node<int, string>(2, "value"));
	bst190.emplace(Node<int, string>(1, "value"));
	bst190.emplace(Node<int, string>(18, "value"));
	bst190.emplace(Node<int, string>(19, "value"));
	bst190.emplace(Node<int, string>(13, "value"));
	bst190.emplace(Node<int, string>(7, "value"));
	bst190.emplace(Node<int, string>(4, "value"));
	bst190.emplace(Node<int, string>(17, "value"));
	bst190.emplace(Node<int, string>(11, "value"));
	bst190.emplace(Node<int, string>(5, "value"));
	bst190.emplace(Node<int, string>(9, "value"));
	bst190.emplace(Node<int, string>(14, "value"));

	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(2)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(19)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(14)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(8)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(12)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(5)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(18)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(1)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(7)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(4)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(11)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(17)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(13)->getKey());
	bst190.ascend_printout(bst190.getRoot());
	bst190.deleteNode(bst190.at(9)->getKey());



	BST<int,string> bst191(Node<int, string> (7, "RootVal"));
	bst191.emplace(Node<int, string>(15, "value"));
	bst191.emplace(Node<int, string>(13, "value"));
	bst191.emplace(Node<int, string>(8, "value"));
	bst191.emplace(Node<int, string>(19, "value"));
	bst191.emplace(Node<int, string>(17, "value"));
	bst191.emplace(Node<int, string>(6, "value"));
	bst191.emplace(Node<int, string>(14, "value"));
	bst191.emplace(Node<int, string>(16, "value"));
	bst191.emplace(Node<int, string>(5, "value"));
	bst191.emplace(Node<int, string>(18, "value"));
	bst191.emplace(Node<int, string>(12, "value"));
	bst191.emplace(Node<int, string>(1, "value"));
	bst191.emplace(Node<int, string>(9, "value"));

	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(1)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(13)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(19)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(12)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(8)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(18)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(5)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(17)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(16)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(14)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(15)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(7)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(9)->getKey());
	bst191.ascend_printout(bst191.getRoot());
	bst191.deleteNode(bst191.at(6)->getKey());



	BST<int,string> bst192(Node<int, string> (2, "RootVal"));
	bst192.emplace(Node<int, string>(10, "value"));
	bst192.emplace(Node<int, string>(9, "value"));
	bst192.emplace(Node<int, string>(8, "value"));
	bst192.emplace(Node<int, string>(14, "value"));
	bst192.emplace(Node<int, string>(15, "value"));
	bst192.emplace(Node<int, string>(12, "value"));
	bst192.emplace(Node<int, string>(19, "value"));
	bst192.emplace(Node<int, string>(17, "value"));
	bst192.emplace(Node<int, string>(5, "value"));
	bst192.emplace(Node<int, string>(7, "value"));
	bst192.emplace(Node<int, string>(3, "value"));
	bst192.emplace(Node<int, string>(4, "value"));
	bst192.emplace(Node<int, string>(1, "value"));
	bst192.emplace(Node<int, string>(13, "value"));
	bst192.emplace(Node<int, string>(18, "value"));

	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(7)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(4)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(13)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(18)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(10)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(9)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(1)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(15)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(5)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(19)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(17)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(8)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(3)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(12)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(2)->getKey());
	bst192.ascend_printout(bst192.getRoot());
	bst192.deleteNode(bst192.at(14)->getKey());



	BST<int,string> bst193(Node<int, string> (16, "RootVal"));
	bst193.emplace(Node<int, string>(2, "value"));
	bst193.emplace(Node<int, string>(11, "value"));
	bst193.emplace(Node<int, string>(17, "value"));
	bst193.emplace(Node<int, string>(3, "value"));
	bst193.emplace(Node<int, string>(5, "value"));
	bst193.emplace(Node<int, string>(14, "value"));
	bst193.emplace(Node<int, string>(13, "value"));
	bst193.emplace(Node<int, string>(6, "value"));
	bst193.emplace(Node<int, string>(19, "value"));

	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(3)->getKey());
	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(16)->getKey());
	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(17)->getKey());
	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(13)->getKey());
	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(11)->getKey());
	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(6)->getKey());
	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(14)->getKey());
	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(2)->getKey());
	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(5)->getKey());
	bst193.ascend_printout(bst193.getRoot());
	bst193.deleteNode(bst193.at(19)->getKey());



	BST<int,string> bst194(Node<int, string> (15, "RootVal"));
	bst194.emplace(Node<int, string>(13, "value"));
	bst194.emplace(Node<int, string>(7, "value"));
	bst194.emplace(Node<int, string>(9, "value"));
	bst194.emplace(Node<int, string>(20, "value"));
	bst194.emplace(Node<int, string>(2, "value"));
	bst194.emplace(Node<int, string>(19, "value"));
	bst194.emplace(Node<int, string>(1, "value"));
	bst194.emplace(Node<int, string>(10, "value"));
	bst194.emplace(Node<int, string>(18, "value"));

	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(20)->getKey());
	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(9)->getKey());
	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(13)->getKey());
	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(10)->getKey());
	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(1)->getKey());
	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(18)->getKey());
	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(19)->getKey());
	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(7)->getKey());
	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(2)->getKey());
	bst194.ascend_printout(bst194.getRoot());
	bst194.deleteNode(bst194.at(15)->getKey());



	BST<int,string> bst195(Node<int, string> (7, "RootVal"));
	bst195.emplace(Node<int, string>(13, "value"));
	bst195.emplace(Node<int, string>(4, "value"));
	bst195.emplace(Node<int, string>(18, "value"));
	bst195.emplace(Node<int, string>(3, "value"));
	bst195.emplace(Node<int, string>(9, "value"));
	bst195.emplace(Node<int, string>(19, "value"));
	bst195.emplace(Node<int, string>(11, "value"));
	bst195.emplace(Node<int, string>(1, "value"));
	bst195.emplace(Node<int, string>(5, "value"));
	bst195.emplace(Node<int, string>(12, "value"));
	bst195.emplace(Node<int, string>(6, "value"));

	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(11)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(4)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(12)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(19)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(1)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(18)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(13)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(3)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(9)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(6)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(5)->getKey());
	bst195.ascend_printout(bst195.getRoot());
	bst195.deleteNode(bst195.at(7)->getKey());



	BST<int,string> bst196(Node<int, string> (14, "RootVal"));
	bst196.emplace(Node<int, string>(8, "value"));
	bst196.emplace(Node<int, string>(12, "value"));
	bst196.emplace(Node<int, string>(16, "value"));
	bst196.emplace(Node<int, string>(4, "value"));
	bst196.emplace(Node<int, string>(1, "value"));
	bst196.emplace(Node<int, string>(5, "value"));
	bst196.emplace(Node<int, string>(6, "value"));
	bst196.emplace(Node<int, string>(19, "value"));
	bst196.emplace(Node<int, string>(9, "value"));
	bst196.emplace(Node<int, string>(15, "value"));
	bst196.emplace(Node<int, string>(13, "value"));
	bst196.emplace(Node<int, string>(17, "value"));

	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(12)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(16)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(9)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(19)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(4)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(13)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(1)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(5)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(6)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(8)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(17)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(15)->getKey());
	bst196.ascend_printout(bst196.getRoot());
	bst196.deleteNode(bst196.at(14)->getKey());



	BST<int,string> bst197(Node<int, string> (2, "RootVal"));
	bst197.emplace(Node<int, string>(14, "value"));
	bst197.emplace(Node<int, string>(18, "value"));
	bst197.emplace(Node<int, string>(17, "value"));
	bst197.emplace(Node<int, string>(19, "value"));
	bst197.emplace(Node<int, string>(16, "value"));
	bst197.emplace(Node<int, string>(7, "value"));
	bst197.emplace(Node<int, string>(13, "value"));
	bst197.emplace(Node<int, string>(10, "value"));
	bst197.emplace(Node<int, string>(15, "value"));
	bst197.emplace(Node<int, string>(4, "value"));
	bst197.emplace(Node<int, string>(8, "value"));
	bst197.emplace(Node<int, string>(3, "value"));

	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(18)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(15)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(17)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(19)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(8)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(14)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(16)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(4)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(3)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(7)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(2)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(10)->getKey());
	bst197.ascend_printout(bst197.getRoot());
	bst197.deleteNode(bst197.at(13)->getKey());



	BST<int,string> bst198(Node<int, string> (10, "RootVal"));
	bst198.emplace(Node<int, string>(5, "value"));
	bst198.emplace(Node<int, string>(3, "value"));
	bst198.emplace(Node<int, string>(16, "value"));
	bst198.emplace(Node<int, string>(9, "value"));
	bst198.emplace(Node<int, string>(20, "value"));
	bst198.emplace(Node<int, string>(1, "value"));
	bst198.emplace(Node<int, string>(13, "value"));
	bst198.emplace(Node<int, string>(6, "value"));
	bst198.emplace(Node<int, string>(15, "value"));
	bst198.emplace(Node<int, string>(11, "value"));
	bst198.emplace(Node<int, string>(7, "value"));

	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(20)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(3)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(16)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(13)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(11)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(5)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(7)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(9)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(15)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(10)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(1)->getKey());
	bst198.ascend_printout(bst198.getRoot());
	bst198.deleteNode(bst198.at(6)->getKey());



	BST<int,string> bst199(Node<int, string> (4, "RootVal"));
	bst199.emplace(Node<int, string>(18, "value"));
	bst199.emplace(Node<int, string>(8, "value"));
	bst199.emplace(Node<int, string>(20, "value"));
	bst199.emplace(Node<int, string>(13, "value"));
	bst199.emplace(Node<int, string>(2, "value"));
	bst199.emplace(Node<int, string>(15, "value"));
	bst199.emplace(Node<int, string>(5, "value"));
	bst199.emplace(Node<int, string>(6, "value"));
	bst199.emplace(Node<int, string>(10, "value"));

	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(4)->getKey());
	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(13)->getKey());
	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(2)->getKey());
	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(6)->getKey());
	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(5)->getKey());
	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(20)->getKey());
	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(10)->getKey());
	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(15)->getKey());
	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(18)->getKey());
	bst199.ascend_printout(bst199.getRoot());
	bst199.deleteNode(bst199.at(8)->getKey());



	BST<int,string> bst200(Node<int, string> (14, "RootVal"));
	bst200.emplace(Node<int, string>(20, "value"));
	bst200.emplace(Node<int, string>(7, "value"));
	bst200.emplace(Node<int, string>(3, "value"));
	bst200.emplace(Node<int, string>(1, "value"));
	bst200.emplace(Node<int, string>(2, "value"));
	bst200.emplace(Node<int, string>(6, "value"));
	bst200.emplace(Node<int, string>(11, "value"));
	bst200.emplace(Node<int, string>(12, "value"));
	bst200.emplace(Node<int, string>(9, "value"));
	bst200.emplace(Node<int, string>(4, "value"));
	bst200.emplace(Node<int, string>(16, "value"));
	bst200.emplace(Node<int, string>(17, "value"));
	bst200.emplace(Node<int, string>(10, "value"));

	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(12)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(1)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(3)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(9)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(17)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(4)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(7)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(2)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(11)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(20)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(14)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(16)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(10)->getKey());
	bst200.ascend_printout(bst200.getRoot());
	bst200.deleteNode(bst200.at(6)->getKey());



	BST<int,string> bst201(Node<int, string> (4, "RootVal"));
	bst201.emplace(Node<int, string>(20, "value"));
	bst201.emplace(Node<int, string>(12, "value"));
	bst201.emplace(Node<int, string>(11, "value"));
	bst201.emplace(Node<int, string>(7, "value"));
	bst201.emplace(Node<int, string>(9, "value"));
	bst201.emplace(Node<int, string>(6, "value"));
	bst201.emplace(Node<int, string>(14, "value"));
	bst201.emplace(Node<int, string>(13, "value"));
	bst201.emplace(Node<int, string>(16, "value"));
	bst201.emplace(Node<int, string>(19, "value"));
	bst201.emplace(Node<int, string>(17, "value"));
	bst201.emplace(Node<int, string>(5, "value"));

	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(4)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(13)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(11)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(12)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(5)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(20)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(17)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(7)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(16)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(6)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(14)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(19)->getKey());
	bst201.ascend_printout(bst201.getRoot());
	bst201.deleteNode(bst201.at(9)->getKey());



	BST<int,string> bst202(Node<int, string> (3, "RootVal"));
	bst202.emplace(Node<int, string>(20, "value"));
	bst202.emplace(Node<int, string>(16, "value"));
	bst202.emplace(Node<int, string>(15, "value"));
	bst202.emplace(Node<int, string>(9, "value"));
	bst202.emplace(Node<int, string>(8, "value"));
	bst202.emplace(Node<int, string>(12, "value"));
	bst202.emplace(Node<int, string>(4, "value"));
	bst202.emplace(Node<int, string>(11, "value"));
	bst202.emplace(Node<int, string>(2, "value"));
	bst202.emplace(Node<int, string>(7, "value"));
	bst202.emplace(Node<int, string>(14, "value"));
	bst202.emplace(Node<int, string>(6, "value"));
	bst202.emplace(Node<int, string>(17, "value"));

	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(6)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(3)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(12)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(20)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(16)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(4)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(14)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(2)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(17)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(7)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(9)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(8)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(15)->getKey());
	bst202.ascend_printout(bst202.getRoot());
	bst202.deleteNode(bst202.at(11)->getKey());



	BST<int,string> bst203(Node<int, string> (11, "RootVal"));
	bst203.emplace(Node<int, string>(13, "value"));
	bst203.emplace(Node<int, string>(7, "value"));
	bst203.emplace(Node<int, string>(4, "value"));
	bst203.emplace(Node<int, string>(5, "value"));
	bst203.emplace(Node<int, string>(17, "value"));
	bst203.emplace(Node<int, string>(14, "value"));
	bst203.emplace(Node<int, string>(19, "value"));
	bst203.emplace(Node<int, string>(1, "value"));
	bst203.emplace(Node<int, string>(15, "value"));

	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(4)->getKey());
	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(1)->getKey());
	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(19)->getKey());
	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(13)->getKey());
	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(7)->getKey());
	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(15)->getKey());
	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(14)->getKey());
	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(5)->getKey());
	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(17)->getKey());
	bst203.ascend_printout(bst203.getRoot());
	bst203.deleteNode(bst203.at(11)->getKey());



	BST<int,string> bst204(Node<int, string> (16, "RootVal"));
	bst204.emplace(Node<int, string>(4, "value"));
	bst204.emplace(Node<int, string>(8, "value"));
	bst204.emplace(Node<int, string>(19, "value"));
	bst204.emplace(Node<int, string>(15, "value"));
	bst204.emplace(Node<int, string>(2, "value"));
	bst204.emplace(Node<int, string>(17, "value"));
	bst204.emplace(Node<int, string>(20, "value"));
	bst204.emplace(Node<int, string>(9, "value"));
	bst204.emplace(Node<int, string>(13, "value"));
	bst204.emplace(Node<int, string>(1, "value"));
	bst204.emplace(Node<int, string>(18, "value"));
	bst204.emplace(Node<int, string>(5, "value"));
	bst204.emplace(Node<int, string>(11, "value"));

	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(11)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(5)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(16)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(19)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(2)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(13)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(4)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(1)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(9)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(17)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(20)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(18)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(8)->getKey());
	bst204.ascend_printout(bst204.getRoot());
	bst204.deleteNode(bst204.at(15)->getKey());



	BST<int,string> bst205(Node<int, string> (14, "RootVal"));
	bst205.emplace(Node<int, string>(7, "value"));
	bst205.emplace(Node<int, string>(15, "value"));
	bst205.emplace(Node<int, string>(16, "value"));
	bst205.emplace(Node<int, string>(5, "value"));
	bst205.emplace(Node<int, string>(17, "value"));
	bst205.emplace(Node<int, string>(9, "value"));
	bst205.emplace(Node<int, string>(10, "value"));
	bst205.emplace(Node<int, string>(11, "value"));
	bst205.emplace(Node<int, string>(18, "value"));
	bst205.emplace(Node<int, string>(13, "value"));
	bst205.emplace(Node<int, string>(12, "value"));
	bst205.emplace(Node<int, string>(20, "value"));
	bst205.emplace(Node<int, string>(2, "value"));
	bst205.emplace(Node<int, string>(1, "value"));

	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(16)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(11)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(10)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(5)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(7)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(13)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(1)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(9)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(17)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(18)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(2)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(15)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(14)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(20)->getKey());
	bst205.ascend_printout(bst205.getRoot());
	bst205.deleteNode(bst205.at(12)->getKey());



	BST<int,string> bst206(Node<int, string> (7, "RootVal"));
	bst206.emplace(Node<int, string>(10, "value"));
	bst206.emplace(Node<int, string>(13, "value"));
	bst206.emplace(Node<int, string>(2, "value"));
	bst206.emplace(Node<int, string>(5, "value"));
	bst206.emplace(Node<int, string>(8, "value"));
	bst206.emplace(Node<int, string>(12, "value"));
	bst206.emplace(Node<int, string>(4, "value"));
	bst206.emplace(Node<int, string>(15, "value"));
	bst206.emplace(Node<int, string>(16, "value"));
	bst206.emplace(Node<int, string>(9, "value"));
	bst206.emplace(Node<int, string>(3, "value"));
	bst206.emplace(Node<int, string>(6, "value"));

	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(15)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(10)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(16)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(4)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(5)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(7)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(13)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(8)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(6)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(12)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(2)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(9)->getKey());
	bst206.ascend_printout(bst206.getRoot());
	bst206.deleteNode(bst206.at(3)->getKey());



	BST<int,string> bst207(Node<int, string> (6, "RootVal"));
	bst207.emplace(Node<int, string>(1, "value"));
	bst207.emplace(Node<int, string>(7, "value"));
	bst207.emplace(Node<int, string>(2, "value"));
	bst207.emplace(Node<int, string>(14, "value"));
	bst207.emplace(Node<int, string>(11, "value"));
	bst207.emplace(Node<int, string>(4, "value"));
	bst207.emplace(Node<int, string>(8, "value"));
	bst207.emplace(Node<int, string>(13, "value"));
	bst207.emplace(Node<int, string>(16, "value"));
	bst207.emplace(Node<int, string>(20, "value"));

	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(14)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(11)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(7)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(8)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(16)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(13)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(1)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(20)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(6)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(2)->getKey());
	bst207.ascend_printout(bst207.getRoot());
	bst207.deleteNode(bst207.at(4)->getKey());



	BST<int,string> bst208(Node<int, string> (10, "RootVal"));
	bst208.emplace(Node<int, string>(8, "value"));
	bst208.emplace(Node<int, string>(18, "value"));
	bst208.emplace(Node<int, string>(15, "value"));
	bst208.emplace(Node<int, string>(1, "value"));
	bst208.emplace(Node<int, string>(14, "value"));
	bst208.emplace(Node<int, string>(3, "value"));
	bst208.emplace(Node<int, string>(16, "value"));
	bst208.emplace(Node<int, string>(5, "value"));
	bst208.emplace(Node<int, string>(12, "value"));
	bst208.emplace(Node<int, string>(19, "value"));

	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(16)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(8)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(5)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(12)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(18)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(15)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(19)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(1)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(3)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(14)->getKey());
	bst208.ascend_printout(bst208.getRoot());
	bst208.deleteNode(bst208.at(10)->getKey());



	BST<int,string> bst209(Node<int, string> (13, "RootVal"));
	bst209.emplace(Node<int, string>(17, "value"));
	bst209.emplace(Node<int, string>(20, "value"));
	bst209.emplace(Node<int, string>(7, "value"));
	bst209.emplace(Node<int, string>(9, "value"));
	bst209.emplace(Node<int, string>(12, "value"));
	bst209.emplace(Node<int, string>(5, "value"));
	bst209.emplace(Node<int, string>(8, "value"));
	bst209.emplace(Node<int, string>(3, "value"));
	bst209.emplace(Node<int, string>(19, "value"));
	bst209.emplace(Node<int, string>(10, "value"));
	bst209.emplace(Node<int, string>(14, "value"));
	bst209.emplace(Node<int, string>(15, "value"));

	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(5)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(10)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(14)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(8)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(19)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(12)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(7)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(9)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(20)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(13)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(17)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(15)->getKey());
	bst209.ascend_printout(bst209.getRoot());
	bst209.deleteNode(bst209.at(3)->getKey());



	BST<int,string> bst210(Node<int, string> (16, "RootVal"));
	bst210.emplace(Node<int, string>(9, "value"));
	bst210.emplace(Node<int, string>(10, "value"));
	bst210.emplace(Node<int, string>(8, "value"));
	bst210.emplace(Node<int, string>(7, "value"));
	bst210.emplace(Node<int, string>(2, "value"));
	bst210.emplace(Node<int, string>(18, "value"));
	bst210.emplace(Node<int, string>(20, "value"));
	bst210.emplace(Node<int, string>(3, "value"));
	bst210.emplace(Node<int, string>(11, "value"));
	bst210.emplace(Node<int, string>(6, "value"));
	bst210.emplace(Node<int, string>(19, "value"));
	bst210.emplace(Node<int, string>(5, "value"));

	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(8)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(11)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(2)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(16)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(20)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(7)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(18)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(6)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(10)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(19)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(9)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(5)->getKey());
	bst210.ascend_printout(bst210.getRoot());
	bst210.deleteNode(bst210.at(3)->getKey());



	BST<int,string> bst211(Node<int, string> (14, "RootVal"));
	bst211.emplace(Node<int, string>(13, "value"));
	bst211.emplace(Node<int, string>(12, "value"));
	bst211.emplace(Node<int, string>(20, "value"));
	bst211.emplace(Node<int, string>(11, "value"));
	bst211.emplace(Node<int, string>(15, "value"));
	bst211.emplace(Node<int, string>(16, "value"));
	bst211.emplace(Node<int, string>(18, "value"));
	bst211.emplace(Node<int, string>(4, "value"));
	bst211.emplace(Node<int, string>(2, "value"));
	bst211.emplace(Node<int, string>(5, "value"));
	bst211.emplace(Node<int, string>(17, "value"));
	bst211.emplace(Node<int, string>(3, "value"));

	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(15)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(11)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(13)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(12)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(3)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(14)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(4)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(16)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(5)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(20)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(17)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(2)->getKey());
	bst211.ascend_printout(bst211.getRoot());
	bst211.deleteNode(bst211.at(18)->getKey());



	BST<int,string> bst212(Node<int, string> (11, "RootVal"));
	bst212.emplace(Node<int, string>(20, "value"));
	bst212.emplace(Node<int, string>(5, "value"));
	bst212.emplace(Node<int, string>(4, "value"));
	bst212.emplace(Node<int, string>(17, "value"));
	bst212.emplace(Node<int, string>(12, "value"));
	bst212.emplace(Node<int, string>(18, "value"));
	bst212.emplace(Node<int, string>(2, "value"));
	bst212.emplace(Node<int, string>(15, "value"));
	bst212.emplace(Node<int, string>(7, "value"));
	bst212.emplace(Node<int, string>(14, "value"));
	bst212.emplace(Node<int, string>(6, "value"));

	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(12)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(4)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(20)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(11)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(6)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(17)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(2)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(5)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(7)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(18)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(15)->getKey());
	bst212.ascend_printout(bst212.getRoot());
	bst212.deleteNode(bst212.at(14)->getKey());



	BST<int,string> bst213(Node<int, string> (8, "RootVal"));
	bst213.emplace(Node<int, string>(9, "value"));
	bst213.emplace(Node<int, string>(6, "value"));
	bst213.emplace(Node<int, string>(3, "value"));
	bst213.emplace(Node<int, string>(10, "value"));
	bst213.emplace(Node<int, string>(16, "value"));
	bst213.emplace(Node<int, string>(7, "value"));
	bst213.emplace(Node<int, string>(1, "value"));
	bst213.emplace(Node<int, string>(14, "value"));
	bst213.emplace(Node<int, string>(20, "value"));
	bst213.emplace(Node<int, string>(18, "value"));
	bst213.emplace(Node<int, string>(5, "value"));
	bst213.emplace(Node<int, string>(2, "value"));
	bst213.emplace(Node<int, string>(17, "value"));

	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(18)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(14)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(2)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(3)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(9)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(20)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(17)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(5)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(10)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(7)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(16)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(6)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(1)->getKey());
	bst213.ascend_printout(bst213.getRoot());
	bst213.deleteNode(bst213.at(8)->getKey());



	BST<int,string> bst214(Node<int, string> (19, "RootVal"));
	bst214.emplace(Node<int, string>(14, "value"));
	bst214.emplace(Node<int, string>(3, "value"));
	bst214.emplace(Node<int, string>(8, "value"));
	bst214.emplace(Node<int, string>(4, "value"));
	bst214.emplace(Node<int, string>(20, "value"));
	bst214.emplace(Node<int, string>(5, "value"));
	bst214.emplace(Node<int, string>(9, "value"));
	bst214.emplace(Node<int, string>(13, "value"));
	bst214.emplace(Node<int, string>(18, "value"));
	bst214.emplace(Node<int, string>(7, "value"));
	bst214.emplace(Node<int, string>(10, "value"));
	bst214.emplace(Node<int, string>(2, "value"));
	bst214.emplace(Node<int, string>(12, "value"));
	bst214.emplace(Node<int, string>(11, "value"));

	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(20)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(11)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(3)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(10)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(8)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(12)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(14)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(7)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(5)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(19)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(13)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(18)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(9)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(4)->getKey());
	bst214.ascend_printout(bst214.getRoot());
	bst214.deleteNode(bst214.at(2)->getKey());



	BST<int,string> bst215(Node<int, string> (9, "RootVal"));
	bst215.emplace(Node<int, string>(20, "value"));
	bst215.emplace(Node<int, string>(2, "value"));
	bst215.emplace(Node<int, string>(6, "value"));
	bst215.emplace(Node<int, string>(15, "value"));
	bst215.emplace(Node<int, string>(12, "value"));
	bst215.emplace(Node<int, string>(16, "value"));
	bst215.emplace(Node<int, string>(4, "value"));
	bst215.emplace(Node<int, string>(13, "value"));
	bst215.emplace(Node<int, string>(18, "value"));
	bst215.emplace(Node<int, string>(8, "value"));

	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(16)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(2)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(12)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(15)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(13)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(20)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(9)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(4)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(6)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(18)->getKey());
	bst215.ascend_printout(bst215.getRoot());
	bst215.deleteNode(bst215.at(8)->getKey());



	BST<int,string> bst216(Node<int, string> (8, "RootVal"));
	bst216.emplace(Node<int, string>(13, "value"));
	bst216.emplace(Node<int, string>(7, "value"));
	bst216.emplace(Node<int, string>(19, "value"));
	bst216.emplace(Node<int, string>(2, "value"));
	bst216.emplace(Node<int, string>(20, "value"));
	bst216.emplace(Node<int, string>(14, "value"));
	bst216.emplace(Node<int, string>(11, "value"));
	bst216.emplace(Node<int, string>(12, "value"));
	bst216.emplace(Node<int, string>(5, "value"));
	bst216.emplace(Node<int, string>(16, "value"));

	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(12)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(2)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(14)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(8)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(13)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(5)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(20)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(11)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(19)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(7)->getKey());
	bst216.ascend_printout(bst216.getRoot());
	bst216.deleteNode(bst216.at(16)->getKey());



	BST<int,string> bst217(Node<int, string> (10, "RootVal"));
	bst217.emplace(Node<int, string>(17, "value"));
	bst217.emplace(Node<int, string>(11, "value"));
	bst217.emplace(Node<int, string>(13, "value"));
	bst217.emplace(Node<int, string>(2, "value"));
	bst217.emplace(Node<int, string>(14, "value"));
	bst217.emplace(Node<int, string>(12, "value"));
	bst217.emplace(Node<int, string>(8, "value"));
	bst217.emplace(Node<int, string>(7, "value"));
	bst217.emplace(Node<int, string>(19, "value"));
	bst217.emplace(Node<int, string>(16, "value"));
	bst217.emplace(Node<int, string>(20, "value"));
	bst217.emplace(Node<int, string>(5, "value"));

	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(2)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(11)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(13)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(17)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(7)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(14)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(20)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(12)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(5)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(16)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(19)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(8)->getKey());
	bst217.ascend_printout(bst217.getRoot());
	bst217.deleteNode(bst217.at(10)->getKey());



	BST<int,string> bst218(Node<int, string> (10, "RootVal"));
	bst218.emplace(Node<int, string>(16, "value"));
	bst218.emplace(Node<int, string>(6, "value"));
	bst218.emplace(Node<int, string>(9, "value"));
	bst218.emplace(Node<int, string>(5, "value"));
	bst218.emplace(Node<int, string>(19, "value"));
	bst218.emplace(Node<int, string>(18, "value"));
	bst218.emplace(Node<int, string>(7, "value"));
	bst218.emplace(Node<int, string>(3, "value"));
	bst218.emplace(Node<int, string>(20, "value"));
	bst218.emplace(Node<int, string>(2, "value"));
	bst218.emplace(Node<int, string>(4, "value"));

	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(19)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(5)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(3)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(10)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(6)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(7)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(16)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(4)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(9)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(20)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(2)->getKey());
	bst218.ascend_printout(bst218.getRoot());
	bst218.deleteNode(bst218.at(18)->getKey());



	BST<int,string> bst219(Node<int, string> (18, "RootVal"));
	bst219.emplace(Node<int, string>(2, "value"));
	bst219.emplace(Node<int, string>(12, "value"));
	bst219.emplace(Node<int, string>(19, "value"));
	bst219.emplace(Node<int, string>(9, "value"));
	bst219.emplace(Node<int, string>(13, "value"));
	bst219.emplace(Node<int, string>(6, "value"));
	bst219.emplace(Node<int, string>(15, "value"));
	bst219.emplace(Node<int, string>(14, "value"));
	bst219.emplace(Node<int, string>(4, "value"));
	bst219.emplace(Node<int, string>(1, "value"));
	bst219.emplace(Node<int, string>(16, "value"));
	bst219.emplace(Node<int, string>(3, "value"));

	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(14)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(13)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(12)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(15)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(19)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(16)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(9)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(1)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(6)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(3)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(2)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(4)->getKey());
	bst219.ascend_printout(bst219.getRoot());
	bst219.deleteNode(bst219.at(18)->getKey());



	BST<int,string> bst220(Node<int, string> (12, "RootVal"));
	bst220.emplace(Node<int, string>(19, "value"));
	bst220.emplace(Node<int, string>(1, "value"));
	bst220.emplace(Node<int, string>(2, "value"));
	bst220.emplace(Node<int, string>(17, "value"));
	bst220.emplace(Node<int, string>(14, "value"));
	bst220.emplace(Node<int, string>(4, "value"));
	bst220.emplace(Node<int, string>(13, "value"));
	bst220.emplace(Node<int, string>(9, "value"));
	bst220.emplace(Node<int, string>(15, "value"));
	bst220.emplace(Node<int, string>(3, "value"));
	bst220.emplace(Node<int, string>(10, "value"));

	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(1)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(19)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(15)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(12)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(17)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(14)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(3)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(10)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(13)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(2)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(4)->getKey());
	bst220.ascend_printout(bst220.getRoot());
	bst220.deleteNode(bst220.at(9)->getKey());



	BST<int,string> bst221(Node<int, string> (10, "RootVal"));
	bst221.emplace(Node<int, string>(13, "value"));
	bst221.emplace(Node<int, string>(7, "value"));
	bst221.emplace(Node<int, string>(16, "value"));
	bst221.emplace(Node<int, string>(18, "value"));
	bst221.emplace(Node<int, string>(2, "value"));
	bst221.emplace(Node<int, string>(5, "value"));
	bst221.emplace(Node<int, string>(3, "value"));
	bst221.emplace(Node<int, string>(14, "value"));
	bst221.emplace(Node<int, string>(11, "value"));
	bst221.emplace(Node<int, string>(1, "value"));
	bst221.emplace(Node<int, string>(4, "value"));
	bst221.emplace(Node<int, string>(8, "value"));
	bst221.emplace(Node<int, string>(15, "value"));

	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(14)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(7)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(10)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(16)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(13)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(5)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(1)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(18)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(15)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(8)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(2)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(3)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(4)->getKey());
	bst221.ascend_printout(bst221.getRoot());
	bst221.deleteNode(bst221.at(11)->getKey());



	BST<int,string> bst222(Node<int, string> (13, "RootVal"));
	bst222.emplace(Node<int, string>(20, "value"));
	bst222.emplace(Node<int, string>(2, "value"));
	bst222.emplace(Node<int, string>(5, "value"));
	bst222.emplace(Node<int, string>(18, "value"));
	bst222.emplace(Node<int, string>(14, "value"));
	bst222.emplace(Node<int, string>(8, "value"));
	bst222.emplace(Node<int, string>(4, "value"));
	bst222.emplace(Node<int, string>(11, "value"));
	bst222.emplace(Node<int, string>(3, "value"));
	bst222.emplace(Node<int, string>(7, "value"));
	bst222.emplace(Node<int, string>(6, "value"));

	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(2)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(7)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(8)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(3)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(13)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(5)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(14)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(18)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(20)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(11)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(6)->getKey());
	bst222.ascend_printout(bst222.getRoot());
	bst222.deleteNode(bst222.at(4)->getKey());



	BST<int,string> bst223(Node<int, string> (13, "RootVal"));
	bst223.emplace(Node<int, string>(8, "value"));
	bst223.emplace(Node<int, string>(9, "value"));
	bst223.emplace(Node<int, string>(3, "value"));
	bst223.emplace(Node<int, string>(20, "value"));
	bst223.emplace(Node<int, string>(5, "value"));
	bst223.emplace(Node<int, string>(14, "value"));
	bst223.emplace(Node<int, string>(7, "value"));
	bst223.emplace(Node<int, string>(12, "value"));
	bst223.emplace(Node<int, string>(4, "value"));
	bst223.emplace(Node<int, string>(19, "value"));
	bst223.emplace(Node<int, string>(1, "value"));

	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(12)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(1)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(7)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(19)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(4)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(20)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(3)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(8)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(13)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(14)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(5)->getKey());
	bst223.ascend_printout(bst223.getRoot());
	bst223.deleteNode(bst223.at(9)->getKey());



	BST<int,string> bst224(Node<int, string> (18, "RootVal"));
	bst224.emplace(Node<int, string>(6, "value"));
	bst224.emplace(Node<int, string>(14, "value"));
	bst224.emplace(Node<int, string>(16, "value"));
	bst224.emplace(Node<int, string>(5, "value"));
	bst224.emplace(Node<int, string>(2, "value"));
	bst224.emplace(Node<int, string>(11, "value"));
	bst224.emplace(Node<int, string>(7, "value"));
	bst224.emplace(Node<int, string>(4, "value"));
	bst224.emplace(Node<int, string>(3, "value"));
	bst224.emplace(Node<int, string>(19, "value"));
	bst224.emplace(Node<int, string>(15, "value"));
	bst224.emplace(Node<int, string>(13, "value"));

	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(7)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(11)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(2)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(18)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(3)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(19)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(13)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(5)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(15)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(16)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(4)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(6)->getKey());
	bst224.ascend_printout(bst224.getRoot());
	bst224.deleteNode(bst224.at(14)->getKey());



	BST<int,string> bst225(Node<int, string> (16, "RootVal"));
	bst225.emplace(Node<int, string>(14, "value"));
	bst225.emplace(Node<int, string>(11, "value"));
	bst225.emplace(Node<int, string>(13, "value"));
	bst225.emplace(Node<int, string>(10, "value"));
	bst225.emplace(Node<int, string>(17, "value"));
	bst225.emplace(Node<int, string>(8, "value"));
	bst225.emplace(Node<int, string>(9, "value"));
	bst225.emplace(Node<int, string>(1, "value"));
	bst225.emplace(Node<int, string>(6, "value"));
	bst225.emplace(Node<int, string>(18, "value"));
	bst225.emplace(Node<int, string>(12, "value"));
	bst225.emplace(Node<int, string>(20, "value"));

	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(8)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(10)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(14)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(20)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(13)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(18)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(6)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(9)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(11)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(16)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(12)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(17)->getKey());
	bst225.ascend_printout(bst225.getRoot());
	bst225.deleteNode(bst225.at(1)->getKey());



	BST<int,string> bst226(Node<int, string> (5, "RootVal"));
	bst226.emplace(Node<int, string>(13, "value"));
	bst226.emplace(Node<int, string>(7, "value"));
	bst226.emplace(Node<int, string>(11, "value"));
	bst226.emplace(Node<int, string>(6, "value"));
	bst226.emplace(Node<int, string>(20, "value"));
	bst226.emplace(Node<int, string>(19, "value"));
	bst226.emplace(Node<int, string>(17, "value"));
	bst226.emplace(Node<int, string>(8, "value"));
	bst226.emplace(Node<int, string>(12, "value"));
	bst226.emplace(Node<int, string>(1, "value"));
	bst226.emplace(Node<int, string>(2, "value"));
	bst226.emplace(Node<int, string>(10, "value"));

	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(11)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(6)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(13)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(7)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(1)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(20)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(2)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(17)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(5)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(10)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(8)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(19)->getKey());
	bst226.ascend_printout(bst226.getRoot());
	bst226.deleteNode(bst226.at(12)->getKey());



	BST<int,string> bst227(Node<int, string> (18, "RootVal"));
	bst227.emplace(Node<int, string>(5, "value"));
	bst227.emplace(Node<int, string>(20, "value"));
	bst227.emplace(Node<int, string>(11, "value"));
	bst227.emplace(Node<int, string>(9, "value"));
	bst227.emplace(Node<int, string>(12, "value"));
	bst227.emplace(Node<int, string>(3, "value"));
	bst227.emplace(Node<int, string>(16, "value"));
	bst227.emplace(Node<int, string>(13, "value"));
	bst227.emplace(Node<int, string>(10, "value"));
	bst227.emplace(Node<int, string>(6, "value"));
	bst227.emplace(Node<int, string>(15, "value"));

	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(6)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(11)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(3)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(13)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(18)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(10)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(20)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(5)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(12)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(9)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(15)->getKey());
	bst227.ascend_printout(bst227.getRoot());
	bst227.deleteNode(bst227.at(16)->getKey());



	BST<int,string> bst228(Node<int, string> (13, "RootVal"));
	bst228.emplace(Node<int, string>(4, "value"));
	bst228.emplace(Node<int, string>(14, "value"));
	bst228.emplace(Node<int, string>(19, "value"));
	bst228.emplace(Node<int, string>(11, "value"));
	bst228.emplace(Node<int, string>(6, "value"));
	bst228.emplace(Node<int, string>(18, "value"));
	bst228.emplace(Node<int, string>(1, "value"));
	bst228.emplace(Node<int, string>(10, "value"));
	bst228.emplace(Node<int, string>(12, "value"));
	bst228.emplace(Node<int, string>(8, "value"));
	bst228.emplace(Node<int, string>(17, "value"));
	bst228.emplace(Node<int, string>(16, "value"));
	bst228.emplace(Node<int, string>(7, "value"));
	bst228.emplace(Node<int, string>(15, "value"));

	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(8)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(18)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(12)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(19)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(11)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(6)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(14)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(10)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(17)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(15)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(16)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(1)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(7)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(13)->getKey());
	bst228.ascend_printout(bst228.getRoot());
	bst228.deleteNode(bst228.at(4)->getKey());



	BST<int,string> bst229(Node<int, string> (3, "RootVal"));
	bst229.emplace(Node<int, string>(15, "value"));
	bst229.emplace(Node<int, string>(5, "value"));
	bst229.emplace(Node<int, string>(1, "value"));
	bst229.emplace(Node<int, string>(4, "value"));
	bst229.emplace(Node<int, string>(8, "value"));
	bst229.emplace(Node<int, string>(2, "value"));
	bst229.emplace(Node<int, string>(14, "value"));
	bst229.emplace(Node<int, string>(20, "value"));
	bst229.emplace(Node<int, string>(7, "value"));
	bst229.emplace(Node<int, string>(19, "value"));
	bst229.emplace(Node<int, string>(17, "value"));
	bst229.emplace(Node<int, string>(16, "value"));
	bst229.emplace(Node<int, string>(13, "value"));
	bst229.emplace(Node<int, string>(6, "value"));
	bst229.emplace(Node<int, string>(12, "value"));
	bst229.emplace(Node<int, string>(9, "value"));

	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(12)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(7)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(20)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(9)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(1)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(5)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(8)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(16)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(4)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(14)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(15)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(2)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(13)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(3)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(6)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(19)->getKey());
	bst229.ascend_printout(bst229.getRoot());
	bst229.deleteNode(bst229.at(17)->getKey());



	BST<int,string> bst230(Node<int, string> (18, "RootVal"));
	bst230.emplace(Node<int, string>(2, "value"));
	bst230.emplace(Node<int, string>(4, "value"));
	bst230.emplace(Node<int, string>(8, "value"));
	bst230.emplace(Node<int, string>(3, "value"));
	bst230.emplace(Node<int, string>(10, "value"));
	bst230.emplace(Node<int, string>(5, "value"));
	bst230.emplace(Node<int, string>(11, "value"));
	bst230.emplace(Node<int, string>(20, "value"));
	bst230.emplace(Node<int, string>(17, "value"));
	bst230.emplace(Node<int, string>(7, "value"));
	bst230.emplace(Node<int, string>(15, "value"));
	bst230.emplace(Node<int, string>(16, "value"));
	bst230.emplace(Node<int, string>(14, "value"));

	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(5)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(11)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(16)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(3)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(8)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(17)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(7)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(4)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(18)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(15)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(10)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(2)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(14)->getKey());
	bst230.ascend_printout(bst230.getRoot());
	bst230.deleteNode(bst230.at(20)->getKey());



	BST<int,string> bst231(Node<int, string> (3, "RootVal"));
	bst231.emplace(Node<int, string>(5, "value"));
	bst231.emplace(Node<int, string>(16, "value"));
	bst231.emplace(Node<int, string>(9, "value"));
	bst231.emplace(Node<int, string>(4, "value"));
	bst231.emplace(Node<int, string>(13, "value"));
	bst231.emplace(Node<int, string>(6, "value"));
	bst231.emplace(Node<int, string>(19, "value"));
	bst231.emplace(Node<int, string>(18, "value"));
	bst231.emplace(Node<int, string>(7, "value"));
	bst231.emplace(Node<int, string>(17, "value"));

	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(16)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(13)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(17)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(6)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(3)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(7)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(9)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(4)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(18)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(19)->getKey());
	bst231.ascend_printout(bst231.getRoot());
	bst231.deleteNode(bst231.at(5)->getKey());



	BST<int,string> bst232(Node<int, string> (2, "RootVal"));
	bst232.emplace(Node<int, string>(1, "value"));
	bst232.emplace(Node<int, string>(16, "value"));
	bst232.emplace(Node<int, string>(18, "value"));
	bst232.emplace(Node<int, string>(17, "value"));
	bst232.emplace(Node<int, string>(9, "value"));
	bst232.emplace(Node<int, string>(15, "value"));
	bst232.emplace(Node<int, string>(6, "value"));
	bst232.emplace(Node<int, string>(10, "value"));
	bst232.emplace(Node<int, string>(5, "value"));
	bst232.emplace(Node<int, string>(13, "value"));
	bst232.emplace(Node<int, string>(7, "value"));
	bst232.emplace(Node<int, string>(12, "value"));

	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(15)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(12)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(6)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(5)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(10)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(16)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(1)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(9)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(18)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(17)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(13)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(2)->getKey());
	bst232.ascend_printout(bst232.getRoot());
	bst232.deleteNode(bst232.at(7)->getKey());



	BST<int,string> bst233(Node<int, string> (15, "RootVal"));
	bst233.emplace(Node<int, string>(6, "value"));
	bst233.emplace(Node<int, string>(10, "value"));
	bst233.emplace(Node<int, string>(9, "value"));
	bst233.emplace(Node<int, string>(1, "value"));
	bst233.emplace(Node<int, string>(16, "value"));
	bst233.emplace(Node<int, string>(4, "value"));
	bst233.emplace(Node<int, string>(19, "value"));
	bst233.emplace(Node<int, string>(7, "value"));
	bst233.emplace(Node<int, string>(17, "value"));
	bst233.emplace(Node<int, string>(5, "value"));
	bst233.emplace(Node<int, string>(13, "value"));
	bst233.emplace(Node<int, string>(8, "value"));
	bst233.emplace(Node<int, string>(2, "value"));

	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(2)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(19)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(5)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(10)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(15)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(1)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(9)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(17)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(13)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(16)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(7)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(8)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(6)->getKey());
	bst233.ascend_printout(bst233.getRoot());
	bst233.deleteNode(bst233.at(4)->getKey());



	BST<int,string> bst234(Node<int, string> (6, "RootVal"));
	bst234.emplace(Node<int, string>(10, "value"));
	bst234.emplace(Node<int, string>(2, "value"));
	bst234.emplace(Node<int, string>(15, "value"));
	bst234.emplace(Node<int, string>(7, "value"));
	bst234.emplace(Node<int, string>(16, "value"));
	bst234.emplace(Node<int, string>(14, "value"));
	bst234.emplace(Node<int, string>(9, "value"));
	bst234.emplace(Node<int, string>(20, "value"));
	bst234.emplace(Node<int, string>(5, "value"));
	bst234.emplace(Node<int, string>(17, "value"));
	bst234.emplace(Node<int, string>(1, "value"));
	bst234.emplace(Node<int, string>(8, "value"));

	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(5)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(20)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(9)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(17)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(6)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(15)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(10)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(16)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(1)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(14)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(7)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(8)->getKey());
	bst234.ascend_printout(bst234.getRoot());
	bst234.deleteNode(bst234.at(2)->getKey());



	BST<int,string> bst235(Node<int, string> (20, "RootVal"));
	bst235.emplace(Node<int, string>(2, "value"));
	bst235.emplace(Node<int, string>(19, "value"));
	bst235.emplace(Node<int, string>(7, "value"));
	bst235.emplace(Node<int, string>(8, "value"));
	bst235.emplace(Node<int, string>(5, "value"));
	bst235.emplace(Node<int, string>(3, "value"));
	bst235.emplace(Node<int, string>(9, "value"));
	bst235.emplace(Node<int, string>(15, "value"));
	bst235.emplace(Node<int, string>(17, "value"));
	bst235.emplace(Node<int, string>(11, "value"));

	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(9)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(5)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(15)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(3)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(7)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(19)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(11)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(20)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(2)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(8)->getKey());
	bst235.ascend_printout(bst235.getRoot());
	bst235.deleteNode(bst235.at(17)->getKey());



	BST<int,string> bst236(Node<int, string> (6, "RootVal"));
	bst236.emplace(Node<int, string>(1, "value"));
	bst236.emplace(Node<int, string>(9, "value"));
	bst236.emplace(Node<int, string>(3, "value"));
	bst236.emplace(Node<int, string>(14, "value"));
	bst236.emplace(Node<int, string>(13, "value"));
	bst236.emplace(Node<int, string>(20, "value"));
	bst236.emplace(Node<int, string>(5, "value"));
	bst236.emplace(Node<int, string>(18, "value"));
	bst236.emplace(Node<int, string>(12, "value"));
	bst236.emplace(Node<int, string>(19, "value"));
	bst236.emplace(Node<int, string>(8, "value"));
	bst236.emplace(Node<int, string>(11, "value"));
	bst236.emplace(Node<int, string>(15, "value"));
	bst236.emplace(Node<int, string>(4, "value"));

	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(6)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(4)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(13)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(18)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(14)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(3)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(1)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(15)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(9)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(20)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(19)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(11)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(12)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(8)->getKey());
	bst236.ascend_printout(bst236.getRoot());
	bst236.deleteNode(bst236.at(5)->getKey());



	BST<int,string> bst237(Node<int, string> (3, "RootVal"));
	bst237.emplace(Node<int, string>(17, "value"));
	bst237.emplace(Node<int, string>(2, "value"));
	bst237.emplace(Node<int, string>(11, "value"));
	bst237.emplace(Node<int, string>(9, "value"));
	bst237.emplace(Node<int, string>(15, "value"));
	bst237.emplace(Node<int, string>(8, "value"));
	bst237.emplace(Node<int, string>(20, "value"));
	bst237.emplace(Node<int, string>(13, "value"));
	bst237.emplace(Node<int, string>(16, "value"));
	bst237.emplace(Node<int, string>(10, "value"));
	bst237.emplace(Node<int, string>(7, "value"));
	bst237.emplace(Node<int, string>(19, "value"));

	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(3)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(16)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(11)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(19)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(2)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(7)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(9)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(17)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(10)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(8)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(13)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(15)->getKey());
	bst237.ascend_printout(bst237.getRoot());
	bst237.deleteNode(bst237.at(20)->getKey());



	BST<int,string> bst238(Node<int, string> (7, "RootVal"));
	bst238.emplace(Node<int, string>(20, "value"));
	bst238.emplace(Node<int, string>(2, "value"));
	bst238.emplace(Node<int, string>(8, "value"));
	bst238.emplace(Node<int, string>(6, "value"));
	bst238.emplace(Node<int, string>(19, "value"));
	bst238.emplace(Node<int, string>(15, "value"));
	bst238.emplace(Node<int, string>(16, "value"));
	bst238.emplace(Node<int, string>(10, "value"));
	bst238.emplace(Node<int, string>(5, "value"));
	bst238.emplace(Node<int, string>(14, "value"));
	bst238.emplace(Node<int, string>(18, "value"));
	bst238.emplace(Node<int, string>(1, "value"));

	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(19)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(5)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(16)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(10)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(6)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(20)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(8)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(15)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(1)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(18)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(14)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(7)->getKey());
	bst238.ascend_printout(bst238.getRoot());
	bst238.deleteNode(bst238.at(2)->getKey());



	BST<int,string> bst239(Node<int, string> (12, "RootVal"));
	bst239.emplace(Node<int, string>(11, "value"));
	bst239.emplace(Node<int, string>(4, "value"));
	bst239.emplace(Node<int, string>(2, "value"));
	bst239.emplace(Node<int, string>(5, "value"));
	bst239.emplace(Node<int, string>(15, "value"));
	bst239.emplace(Node<int, string>(13, "value"));
	bst239.emplace(Node<int, string>(19, "value"));
	bst239.emplace(Node<int, string>(1, "value"));
	bst239.emplace(Node<int, string>(3, "value"));
	bst239.emplace(Node<int, string>(16, "value"));

	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(2)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(11)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(15)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(12)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(5)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(4)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(1)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(16)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(13)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(3)->getKey());
	bst239.ascend_printout(bst239.getRoot());
	bst239.deleteNode(bst239.at(19)->getKey());



	BST<int,string> bst240(Node<int, string> (12, "RootVal"));
	bst240.emplace(Node<int, string>(19, "value"));
	bst240.emplace(Node<int, string>(15, "value"));
	bst240.emplace(Node<int, string>(9, "value"));
	bst240.emplace(Node<int, string>(6, "value"));
	bst240.emplace(Node<int, string>(13, "value"));
	bst240.emplace(Node<int, string>(5, "value"));
	bst240.emplace(Node<int, string>(18, "value"));
	bst240.emplace(Node<int, string>(11, "value"));
	bst240.emplace(Node<int, string>(14, "value"));
	bst240.emplace(Node<int, string>(4, "value"));
	bst240.emplace(Node<int, string>(17, "value"));

	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(19)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(12)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(18)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(5)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(11)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(13)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(6)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(14)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(9)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(15)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(4)->getKey());
	bst240.ascend_printout(bst240.getRoot());
	bst240.deleteNode(bst240.at(17)->getKey());



	BST<int,string> bst241(Node<int, string> (13, "RootVal"));
	bst241.emplace(Node<int, string>(15, "value"));
	bst241.emplace(Node<int, string>(5, "value"));
	bst241.emplace(Node<int, string>(12, "value"));
	bst241.emplace(Node<int, string>(16, "value"));
	bst241.emplace(Node<int, string>(18, "value"));
	bst241.emplace(Node<int, string>(6, "value"));
	bst241.emplace(Node<int, string>(10, "value"));
	bst241.emplace(Node<int, string>(19, "value"));
	bst241.emplace(Node<int, string>(4, "value"));
	bst241.emplace(Node<int, string>(9, "value"));
	bst241.emplace(Node<int, string>(1, "value"));

	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(12)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(10)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(5)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(16)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(18)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(15)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(9)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(19)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(4)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(6)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(1)->getKey());
	bst241.ascend_printout(bst241.getRoot());
	bst241.deleteNode(bst241.at(13)->getKey());



	BST<int,string> bst242(Node<int, string> (14, "RootVal"));
	bst242.emplace(Node<int, string>(9, "value"));
	bst242.emplace(Node<int, string>(19, "value"));
	bst242.emplace(Node<int, string>(5, "value"));
	bst242.emplace(Node<int, string>(3, "value"));
	bst242.emplace(Node<int, string>(13, "value"));
	bst242.emplace(Node<int, string>(8, "value"));
	bst242.emplace(Node<int, string>(16, "value"));
	bst242.emplace(Node<int, string>(20, "value"));
	bst242.emplace(Node<int, string>(12, "value"));
	bst242.emplace(Node<int, string>(11, "value"));
	bst242.emplace(Node<int, string>(4, "value"));

	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(14)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(8)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(19)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(12)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(4)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(3)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(20)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(11)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(5)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(9)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(13)->getKey());
	bst242.ascend_printout(bst242.getRoot());
	bst242.deleteNode(bst242.at(16)->getKey());



	BST<int,string> bst243(Node<int, string> (19, "RootVal"));
	bst243.emplace(Node<int, string>(11, "value"));
	bst243.emplace(Node<int, string>(20, "value"));
	bst243.emplace(Node<int, string>(6, "value"));
	bst243.emplace(Node<int, string>(3, "value"));
	bst243.emplace(Node<int, string>(14, "value"));
	bst243.emplace(Node<int, string>(18, "value"));
	bst243.emplace(Node<int, string>(16, "value"));
	bst243.emplace(Node<int, string>(10, "value"));
	bst243.emplace(Node<int, string>(8, "value"));
	bst243.emplace(Node<int, string>(17, "value"));
	bst243.emplace(Node<int, string>(9, "value"));
	bst243.emplace(Node<int, string>(1, "value"));

	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(1)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(17)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(9)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(20)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(3)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(10)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(8)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(6)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(18)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(16)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(19)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(11)->getKey());
	bst243.ascend_printout(bst243.getRoot());
	bst243.deleteNode(bst243.at(14)->getKey());



	BST<int,string> bst244(Node<int, string> (14, "RootVal"));
	bst244.emplace(Node<int, string>(19, "value"));
	bst244.emplace(Node<int, string>(3, "value"));
	bst244.emplace(Node<int, string>(2, "value"));
	bst244.emplace(Node<int, string>(6, "value"));
	bst244.emplace(Node<int, string>(18, "value"));
	bst244.emplace(Node<int, string>(10, "value"));
	bst244.emplace(Node<int, string>(13, "value"));
	bst244.emplace(Node<int, string>(7, "value"));
	bst244.emplace(Node<int, string>(12, "value"));
	bst244.emplace(Node<int, string>(15, "value"));
	bst244.emplace(Node<int, string>(5, "value"));
	bst244.emplace(Node<int, string>(4, "value"));

	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(6)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(7)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(19)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(15)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(10)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(5)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(4)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(14)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(12)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(2)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(3)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(18)->getKey());
	bst244.ascend_printout(bst244.getRoot());
	bst244.deleteNode(bst244.at(13)->getKey());



	BST<int,string> bst245(Node<int, string> (11, "RootVal"));
	bst245.emplace(Node<int, string>(16, "value"));
	bst245.emplace(Node<int, string>(3, "value"));
	bst245.emplace(Node<int, string>(14, "value"));
	bst245.emplace(Node<int, string>(13, "value"));
	bst245.emplace(Node<int, string>(1, "value"));
	bst245.emplace(Node<int, string>(9, "value"));
	bst245.emplace(Node<int, string>(2, "value"));
	bst245.emplace(Node<int, string>(7, "value"));
	bst245.emplace(Node<int, string>(19, "value"));
	bst245.emplace(Node<int, string>(6, "value"));
	bst245.emplace(Node<int, string>(15, "value"));
	bst245.emplace(Node<int, string>(10, "value"));

	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(15)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(19)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(6)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(13)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(1)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(11)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(2)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(3)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(10)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(9)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(16)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(14)->getKey());
	bst245.ascend_printout(bst245.getRoot());
	bst245.deleteNode(bst245.at(7)->getKey());



	BST<int,string> bst246(Node<int, string> (1, "RootVal"));
	bst246.emplace(Node<int, string>(6, "value"));
	bst246.emplace(Node<int, string>(14, "value"));
	bst246.emplace(Node<int, string>(8, "value"));
	bst246.emplace(Node<int, string>(3, "value"));
	bst246.emplace(Node<int, string>(7, "value"));
	bst246.emplace(Node<int, string>(16, "value"));
	bst246.emplace(Node<int, string>(10, "value"));
	bst246.emplace(Node<int, string>(9, "value"));
	bst246.emplace(Node<int, string>(5, "value"));
	bst246.emplace(Node<int, string>(4, "value"));
	bst246.emplace(Node<int, string>(13, "value"));
	bst246.emplace(Node<int, string>(17, "value"));
	bst246.emplace(Node<int, string>(18, "value"));

	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(16)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(17)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(6)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(3)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(5)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(1)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(10)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(7)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(4)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(14)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(9)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(8)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(13)->getKey());
	bst246.ascend_printout(bst246.getRoot());
	bst246.deleteNode(bst246.at(18)->getKey());



	BST<int,string> bst247(Node<int, string> (15, "RootVal"));
	bst247.emplace(Node<int, string>(3, "value"));
	bst247.emplace(Node<int, string>(4, "value"));
	bst247.emplace(Node<int, string>(2, "value"));
	bst247.emplace(Node<int, string>(8, "value"));
	bst247.emplace(Node<int, string>(5, "value"));
	bst247.emplace(Node<int, string>(11, "value"));
	bst247.emplace(Node<int, string>(20, "value"));
	bst247.emplace(Node<int, string>(13, "value"));
	bst247.emplace(Node<int, string>(14, "value"));
	bst247.emplace(Node<int, string>(7, "value"));
	bst247.emplace(Node<int, string>(19, "value"));
	bst247.emplace(Node<int, string>(10, "value"));

	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(4)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(2)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(19)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(13)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(5)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(15)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(7)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(11)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(3)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(20)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(10)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(8)->getKey());
	bst247.ascend_printout(bst247.getRoot());
	bst247.deleteNode(bst247.at(14)->getKey());



	BST<int,string> bst248(Node<int, string> (7, "RootVal"));
	bst248.emplace(Node<int, string>(16, "value"));
	bst248.emplace(Node<int, string>(9, "value"));
	bst248.emplace(Node<int, string>(3, "value"));
	bst248.emplace(Node<int, string>(8, "value"));
	bst248.emplace(Node<int, string>(5, "value"));
	bst248.emplace(Node<int, string>(12, "value"));
	bst248.emplace(Node<int, string>(1, "value"));
	bst248.emplace(Node<int, string>(4, "value"));
	bst248.emplace(Node<int, string>(14, "value"));
	bst248.emplace(Node<int, string>(20, "value"));
	bst248.emplace(Node<int, string>(19, "value"));
	bst248.emplace(Node<int, string>(15, "value"));
	bst248.emplace(Node<int, string>(2, "value"));

	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(15)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(12)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(7)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(8)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(16)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(9)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(19)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(14)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(5)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(2)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(3)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(4)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(20)->getKey());
	bst248.ascend_printout(bst248.getRoot());
	bst248.deleteNode(bst248.at(1)->getKey());



	BST<int,string> bst249(Node<int, string> (19, "RootVal"));
	bst249.emplace(Node<int, string>(16, "value"));
	bst249.emplace(Node<int, string>(3, "value"));
	bst249.emplace(Node<int, string>(9, "value"));
	bst249.emplace(Node<int, string>(20, "value"));
	bst249.emplace(Node<int, string>(17, "value"));
	bst249.emplace(Node<int, string>(1, "value"));
	bst249.emplace(Node<int, string>(18, "value"));
	bst249.emplace(Node<int, string>(2, "value"));
	bst249.emplace(Node<int, string>(4, "value"));
	bst249.emplace(Node<int, string>(11, "value"));
	bst249.emplace(Node<int, string>(15, "value"));
	bst249.emplace(Node<int, string>(12, "value"));

	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(12)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(18)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(3)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(11)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(16)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(9)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(19)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(20)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(4)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(15)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(1)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(2)->getKey());
	bst249.ascend_printout(bst249.getRoot());
	bst249.deleteNode(bst249.at(17)->getKey());



	BST<int,string> bst250(Node<int, string> (19, "RootVal"));
	bst250.emplace(Node<int, string>(12, "value"));
	bst250.emplace(Node<int, string>(3, "value"));
	bst250.emplace(Node<int, string>(2, "value"));
	bst250.emplace(Node<int, string>(14, "value"));
	bst250.emplace(Node<int, string>(7, "value"));
	bst250.emplace(Node<int, string>(16, "value"));
	bst250.emplace(Node<int, string>(10, "value"));
	bst250.emplace(Node<int, string>(1, "value"));
	bst250.emplace(Node<int, string>(5, "value"));
	bst250.emplace(Node<int, string>(13, "value"));
	bst250.emplace(Node<int, string>(20, "value"));
	bst250.emplace(Node<int, string>(15, "value"));

	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(5)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(14)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(1)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(2)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(15)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(3)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(13)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(7)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(16)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(12)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(20)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(10)->getKey());
	bst250.ascend_printout(bst250.getRoot());
	bst250.deleteNode(bst250.at(19)->getKey());



	BST<int,string> bst251(Node<int, string> (2, "RootVal"));
	bst251.emplace(Node<int, string>(10, "value"));
	bst251.emplace(Node<int, string>(5, "value"));
	bst251.emplace(Node<int, string>(9, "value"));
	bst251.emplace(Node<int, string>(16, "value"));
	bst251.emplace(Node<int, string>(19, "value"));
	bst251.emplace(Node<int, string>(17, "value"));
	bst251.emplace(Node<int, string>(11, "value"));
	bst251.emplace(Node<int, string>(1, "value"));
	bst251.emplace(Node<int, string>(8, "value"));
	bst251.emplace(Node<int, string>(15, "value"));
	bst251.emplace(Node<int, string>(13, "value"));
	bst251.emplace(Node<int, string>(7, "value"));
	bst251.emplace(Node<int, string>(6, "value"));
	bst251.emplace(Node<int, string>(12, "value"));

	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(8)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(6)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(11)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(17)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(1)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(15)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(13)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(7)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(19)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(9)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(16)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(10)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(5)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(12)->getKey());
	bst251.ascend_printout(bst251.getRoot());
	bst251.deleteNode(bst251.at(2)->getKey());



	BST<int,string> bst252(Node<int, string> (4, "RootVal"));
	bst252.emplace(Node<int, string>(9, "value"));
	bst252.emplace(Node<int, string>(7, "value"));
	bst252.emplace(Node<int, string>(14, "value"));
	bst252.emplace(Node<int, string>(17, "value"));
	bst252.emplace(Node<int, string>(16, "value"));
	bst252.emplace(Node<int, string>(8, "value"));
	bst252.emplace(Node<int, string>(19, "value"));
	bst252.emplace(Node<int, string>(11, "value"));
	bst252.emplace(Node<int, string>(10, "value"));
	bst252.emplace(Node<int, string>(13, "value"));
	bst252.emplace(Node<int, string>(15, "value"));
	bst252.emplace(Node<int, string>(18, "value"));

	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(19)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(9)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(15)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(13)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(14)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(4)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(18)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(8)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(17)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(11)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(16)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(10)->getKey());
	bst252.ascend_printout(bst252.getRoot());
	bst252.deleteNode(bst252.at(7)->getKey());



	BST<int,string> bst253(Node<int, string> (13, "RootVal"));
	bst253.emplace(Node<int, string>(18, "value"));
	bst253.emplace(Node<int, string>(3, "value"));
	bst253.emplace(Node<int, string>(16, "value"));
	bst253.emplace(Node<int, string>(6, "value"));
	bst253.emplace(Node<int, string>(11, "value"));
	bst253.emplace(Node<int, string>(12, "value"));
	bst253.emplace(Node<int, string>(8, "value"));
	bst253.emplace(Node<int, string>(14, "value"));
	bst253.emplace(Node<int, string>(15, "value"));
	bst253.emplace(Node<int, string>(17, "value"));
	bst253.emplace(Node<int, string>(5, "value"));
	bst253.emplace(Node<int, string>(9, "value"));

	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(15)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(14)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(6)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(3)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(18)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(16)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(8)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(11)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(13)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(5)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(17)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(9)->getKey());
	bst253.ascend_printout(bst253.getRoot());
	bst253.deleteNode(bst253.at(12)->getKey());



	BST<int,string> bst254(Node<int, string> (8, "RootVal"));
	bst254.emplace(Node<int, string>(5, "value"));
	bst254.emplace(Node<int, string>(20, "value"));
	bst254.emplace(Node<int, string>(7, "value"));
	bst254.emplace(Node<int, string>(3, "value"));
	bst254.emplace(Node<int, string>(12, "value"));
	bst254.emplace(Node<int, string>(2, "value"));
	bst254.emplace(Node<int, string>(16, "value"));
	bst254.emplace(Node<int, string>(9, "value"));
	bst254.emplace(Node<int, string>(6, "value"));
	bst254.emplace(Node<int, string>(15, "value"));
	bst254.emplace(Node<int, string>(1, "value"));
	bst254.emplace(Node<int, string>(4, "value"));

	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(20)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(2)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(5)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(4)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(7)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(3)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(1)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(9)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(12)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(6)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(15)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(8)->getKey());
	bst254.ascend_printout(bst254.getRoot());
	bst254.deleteNode(bst254.at(16)->getKey());



	BST<int,string> bst255(Node<int, string> (7, "RootVal"));
	bst255.emplace(Node<int, string>(20, "value"));
	bst255.emplace(Node<int, string>(3, "value"));
	bst255.emplace(Node<int, string>(13, "value"));
	bst255.emplace(Node<int, string>(8, "value"));
	bst255.emplace(Node<int, string>(4, "value"));
	bst255.emplace(Node<int, string>(1, "value"));
	bst255.emplace(Node<int, string>(16, "value"));
	bst255.emplace(Node<int, string>(15, "value"));
	bst255.emplace(Node<int, string>(5, "value"));
	bst255.emplace(Node<int, string>(12, "value"));
	bst255.emplace(Node<int, string>(10, "value"));
	bst255.emplace(Node<int, string>(2, "value"));

	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(12)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(2)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(8)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(3)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(15)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(4)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(10)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(16)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(1)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(5)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(7)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(20)->getKey());
	bst255.ascend_printout(bst255.getRoot());
	bst255.deleteNode(bst255.at(13)->getKey());



	BST<int,string> bst256(Node<int, string> (14, "RootVal"));
	bst256.emplace(Node<int, string>(8, "value"));
	bst256.emplace(Node<int, string>(10, "value"));
	bst256.emplace(Node<int, string>(11, "value"));
	bst256.emplace(Node<int, string>(15, "value"));
	bst256.emplace(Node<int, string>(7, "value"));
	bst256.emplace(Node<int, string>(20, "value"));
	bst256.emplace(Node<int, string>(16, "value"));
	bst256.emplace(Node<int, string>(4, "value"));
	bst256.emplace(Node<int, string>(19, "value"));
	bst256.emplace(Node<int, string>(3, "value"));
	bst256.emplace(Node<int, string>(12, "value"));
	bst256.emplace(Node<int, string>(13, "value"));

	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(15)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(8)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(14)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(13)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(4)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(16)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(20)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(7)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(19)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(10)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(12)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(3)->getKey());
	bst256.ascend_printout(bst256.getRoot());
	bst256.deleteNode(bst256.at(11)->getKey());



	BST<int,string> bst257(Node<int, string> (3, "RootVal"));
	bst257.emplace(Node<int, string>(11, "value"));
	bst257.emplace(Node<int, string>(2, "value"));
	bst257.emplace(Node<int, string>(4, "value"));
	bst257.emplace(Node<int, string>(10, "value"));
	bst257.emplace(Node<int, string>(16, "value"));
	bst257.emplace(Node<int, string>(15, "value"));
	bst257.emplace(Node<int, string>(18, "value"));
	bst257.emplace(Node<int, string>(14, "value"));
	bst257.emplace(Node<int, string>(1, "value"));
	bst257.emplace(Node<int, string>(13, "value"));
	bst257.emplace(Node<int, string>(5, "value"));
	bst257.emplace(Node<int, string>(17, "value"));

	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(16)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(2)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(10)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(5)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(13)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(15)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(17)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(11)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(14)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(4)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(3)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(1)->getKey());
	bst257.ascend_printout(bst257.getRoot());
	bst257.deleteNode(bst257.at(18)->getKey());



	BST<int,string> bst258(Node<int, string> (2, "RootVal"));
	bst258.emplace(Node<int, string>(8, "value"));
	bst258.emplace(Node<int, string>(16, "value"));
	bst258.emplace(Node<int, string>(9, "value"));
	bst258.emplace(Node<int, string>(12, "value"));
	bst258.emplace(Node<int, string>(7, "value"));
	bst258.emplace(Node<int, string>(17, "value"));
	bst258.emplace(Node<int, string>(5, "value"));
	bst258.emplace(Node<int, string>(20, "value"));
	bst258.emplace(Node<int, string>(1, "value"));
	bst258.emplace(Node<int, string>(11, "value"));
	bst258.emplace(Node<int, string>(6, "value"));
	bst258.emplace(Node<int, string>(10, "value"));
	bst258.emplace(Node<int, string>(19, "value"));

	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(10)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(2)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(20)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(6)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(8)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(5)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(1)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(16)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(19)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(12)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(7)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(17)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(11)->getKey());
	bst258.ascend_printout(bst258.getRoot());
	bst258.deleteNode(bst258.at(9)->getKey());



	BST<int,string> bst259(Node<int, string> (1, "RootVal"));
	bst259.emplace(Node<int, string>(5, "value"));
	bst259.emplace(Node<int, string>(3, "value"));
	bst259.emplace(Node<int, string>(14, "value"));
	bst259.emplace(Node<int, string>(2, "value"));
	bst259.emplace(Node<int, string>(13, "value"));
	bst259.emplace(Node<int, string>(15, "value"));
	bst259.emplace(Node<int, string>(4, "value"));
	bst259.emplace(Node<int, string>(9, "value"));
	bst259.emplace(Node<int, string>(11, "value"));
	bst259.emplace(Node<int, string>(12, "value"));
	bst259.emplace(Node<int, string>(7, "value"));
	bst259.emplace(Node<int, string>(16, "value"));

	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(1)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(7)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(16)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(4)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(11)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(14)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(5)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(9)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(15)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(13)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(3)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(2)->getKey());
	bst259.ascend_printout(bst259.getRoot());
	bst259.deleteNode(bst259.at(12)->getKey());



	BST<int,string> bst260(Node<int, string> (17, "RootVal"));
	bst260.emplace(Node<int, string>(10, "value"));
	bst260.emplace(Node<int, string>(7, "value"));
	bst260.emplace(Node<int, string>(12, "value"));
	bst260.emplace(Node<int, string>(14, "value"));
	bst260.emplace(Node<int, string>(5, "value"));
	bst260.emplace(Node<int, string>(15, "value"));
	bst260.emplace(Node<int, string>(19, "value"));
	bst260.emplace(Node<int, string>(18, "value"));
	bst260.emplace(Node<int, string>(16, "value"));
	bst260.emplace(Node<int, string>(11, "value"));
	bst260.emplace(Node<int, string>(3, "value"));
	bst260.emplace(Node<int, string>(8, "value"));
	bst260.emplace(Node<int, string>(2, "value"));
	bst260.emplace(Node<int, string>(13, "value"));

	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(5)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(17)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(11)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(18)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(8)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(2)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(15)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(19)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(3)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(14)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(12)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(7)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(16)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(13)->getKey());
	bst260.ascend_printout(bst260.getRoot());
	bst260.deleteNode(bst260.at(10)->getKey());



	BST<int,string> bst261(Node<int, string> (18, "RootVal"));
	bst261.emplace(Node<int, string>(12, "value"));
	bst261.emplace(Node<int, string>(10, "value"));
	bst261.emplace(Node<int, string>(2, "value"));
	bst261.emplace(Node<int, string>(9, "value"));
	bst261.emplace(Node<int, string>(3, "value"));
	bst261.emplace(Node<int, string>(4, "value"));
	bst261.emplace(Node<int, string>(7, "value"));
	bst261.emplace(Node<int, string>(6, "value"));
	bst261.emplace(Node<int, string>(11, "value"));
	bst261.emplace(Node<int, string>(16, "value"));
	bst261.emplace(Node<int, string>(13, "value"));

	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(10)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(2)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(11)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(9)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(18)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(16)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(13)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(3)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(7)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(12)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(4)->getKey());
	bst261.ascend_printout(bst261.getRoot());
	bst261.deleteNode(bst261.at(6)->getKey());



	BST<int,string> bst262(Node<int, string> (19, "RootVal"));
	bst262.emplace(Node<int, string>(12, "value"));
	bst262.emplace(Node<int, string>(10, "value"));
	bst262.emplace(Node<int, string>(20, "value"));
	bst262.emplace(Node<int, string>(7, "value"));
	bst262.emplace(Node<int, string>(6, "value"));
	bst262.emplace(Node<int, string>(8, "value"));
	bst262.emplace(Node<int, string>(4, "value"));
	bst262.emplace(Node<int, string>(15, "value"));
	bst262.emplace(Node<int, string>(1, "value"));
	bst262.emplace(Node<int, string>(18, "value"));
	bst262.emplace(Node<int, string>(5, "value"));
	bst262.emplace(Node<int, string>(9, "value"));

	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(9)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(12)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(19)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(8)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(6)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(5)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(20)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(10)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(18)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(15)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(7)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(1)->getKey());
	bst262.ascend_printout(bst262.getRoot());
	bst262.deleteNode(bst262.at(4)->getKey());



	BST<int,string> bst263(Node<int, string> (17, "RootVal"));
	bst263.emplace(Node<int, string>(1, "value"));
	bst263.emplace(Node<int, string>(4, "value"));
	bst263.emplace(Node<int, string>(10, "value"));
	bst263.emplace(Node<int, string>(11, "value"));
	bst263.emplace(Node<int, string>(8, "value"));
	bst263.emplace(Node<int, string>(12, "value"));
	bst263.emplace(Node<int, string>(16, "value"));
	bst263.emplace(Node<int, string>(13, "value"));
	bst263.emplace(Node<int, string>(14, "value"));
	bst263.emplace(Node<int, string>(15, "value"));
	bst263.emplace(Node<int, string>(5, "value"));

	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(15)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(14)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(1)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(12)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(16)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(8)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(4)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(17)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(13)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(11)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(10)->getKey());
	bst263.ascend_printout(bst263.getRoot());
	bst263.deleteNode(bst263.at(5)->getKey());



	BST<int,string> bst264(Node<int, string> (19, "RootVal"));
	bst264.emplace(Node<int, string>(7, "value"));
	bst264.emplace(Node<int, string>(9, "value"));
	bst264.emplace(Node<int, string>(20, "value"));
	bst264.emplace(Node<int, string>(5, "value"));
	bst264.emplace(Node<int, string>(13, "value"));
	bst264.emplace(Node<int, string>(3, "value"));
	bst264.emplace(Node<int, string>(18, "value"));
	bst264.emplace(Node<int, string>(8, "value"));
	bst264.emplace(Node<int, string>(15, "value"));
	bst264.emplace(Node<int, string>(2, "value"));
	bst264.emplace(Node<int, string>(6, "value"));
	bst264.emplace(Node<int, string>(10, "value"));

	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(2)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(10)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(6)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(15)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(19)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(5)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(9)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(7)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(8)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(18)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(13)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(3)->getKey());
	bst264.ascend_printout(bst264.getRoot());
	bst264.deleteNode(bst264.at(20)->getKey());



	BST<int,string> bst265(Node<int, string> (13, "RootVal"));
	bst265.emplace(Node<int, string>(4, "value"));
	bst265.emplace(Node<int, string>(12, "value"));
	bst265.emplace(Node<int, string>(8, "value"));
	bst265.emplace(Node<int, string>(20, "value"));
	bst265.emplace(Node<int, string>(11, "value"));
	bst265.emplace(Node<int, string>(19, "value"));
	bst265.emplace(Node<int, string>(18, "value"));
	bst265.emplace(Node<int, string>(1, "value"));
	bst265.emplace(Node<int, string>(7, "value"));
	bst265.emplace(Node<int, string>(14, "value"));
	bst265.emplace(Node<int, string>(17, "value"));
	bst265.emplace(Node<int, string>(16, "value"));

	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(19)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(4)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(11)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(12)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(17)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(7)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(16)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(8)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(13)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(14)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(20)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(18)->getKey());
	bst265.ascend_printout(bst265.getRoot());
	bst265.deleteNode(bst265.at(1)->getKey());



	BST<int,string> bst266(Node<int, string> (6, "RootVal"));
	bst266.emplace(Node<int, string>(11, "value"));
	bst266.emplace(Node<int, string>(15, "value"));
	bst266.emplace(Node<int, string>(1, "value"));
	bst266.emplace(Node<int, string>(19, "value"));
	bst266.emplace(Node<int, string>(18, "value"));
	bst266.emplace(Node<int, string>(12, "value"));
	bst266.emplace(Node<int, string>(4, "value"));
	bst266.emplace(Node<int, string>(3, "value"));
	bst266.emplace(Node<int, string>(14, "value"));
	bst266.emplace(Node<int, string>(13, "value"));
	bst266.emplace(Node<int, string>(5, "value"));
	bst266.emplace(Node<int, string>(2, "value"));

	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(5)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(6)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(1)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(2)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(4)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(3)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(12)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(18)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(15)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(19)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(13)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(14)->getKey());
	bst266.ascend_printout(bst266.getRoot());
	bst266.deleteNode(bst266.at(11)->getKey());



	BST<int,string> bst267(Node<int, string> (13, "RootVal"));
	bst267.emplace(Node<int, string>(16, "value"));
	bst267.emplace(Node<int, string>(2, "value"));
	bst267.emplace(Node<int, string>(11, "value"));
	bst267.emplace(Node<int, string>(4, "value"));
	bst267.emplace(Node<int, string>(17, "value"));
	bst267.emplace(Node<int, string>(5, "value"));
	bst267.emplace(Node<int, string>(14, "value"));
	bst267.emplace(Node<int, string>(9, "value"));
	bst267.emplace(Node<int, string>(18, "value"));
	bst267.emplace(Node<int, string>(10, "value"));

	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(2)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(13)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(9)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(17)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(11)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(14)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(10)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(4)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(16)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(5)->getKey());
	bst267.ascend_printout(bst267.getRoot());
	bst267.deleteNode(bst267.at(18)->getKey());



	BST<int,string> bst268(Node<int, string> (10, "RootVal"));
	bst268.emplace(Node<int, string>(15, "value"));
	bst268.emplace(Node<int, string>(14, "value"));
	bst268.emplace(Node<int, string>(1, "value"));
	bst268.emplace(Node<int, string>(16, "value"));
	bst268.emplace(Node<int, string>(3, "value"));
	bst268.emplace(Node<int, string>(5, "value"));
	bst268.emplace(Node<int, string>(18, "value"));
	bst268.emplace(Node<int, string>(20, "value"));
	bst268.emplace(Node<int, string>(13, "value"));
	bst268.emplace(Node<int, string>(7, "value"));

	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(14)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(18)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(15)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(7)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(10)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(20)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(1)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(16)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(3)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(5)->getKey());
	bst268.ascend_printout(bst268.getRoot());
	bst268.deleteNode(bst268.at(13)->getKey());



	BST<int,string> bst269(Node<int, string> (13, "RootVal"));
	bst269.emplace(Node<int, string>(2, "value"));
	bst269.emplace(Node<int, string>(4, "value"));
	bst269.emplace(Node<int, string>(5, "value"));
	bst269.emplace(Node<int, string>(3, "value"));
	bst269.emplace(Node<int, string>(6, "value"));
	bst269.emplace(Node<int, string>(16, "value"));
	bst269.emplace(Node<int, string>(14, "value"));
	bst269.emplace(Node<int, string>(10, "value"));
	bst269.emplace(Node<int, string>(15, "value"));
	bst269.emplace(Node<int, string>(19, "value"));
	bst269.emplace(Node<int, string>(18, "value"));
	bst269.emplace(Node<int, string>(11, "value"));

	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(10)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(3)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(11)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(16)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(14)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(18)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(19)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(5)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(6)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(13)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(4)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(15)->getKey());
	bst269.ascend_printout(bst269.getRoot());
	bst269.deleteNode(bst269.at(2)->getKey());



	BST<int,string> bst270(Node<int, string> (8, "RootVal"));
	bst270.emplace(Node<int, string>(4, "value"));
	bst270.emplace(Node<int, string>(17, "value"));
	bst270.emplace(Node<int, string>(7, "value"));
	bst270.emplace(Node<int, string>(20, "value"));
	bst270.emplace(Node<int, string>(18, "value"));
	bst270.emplace(Node<int, string>(3, "value"));
	bst270.emplace(Node<int, string>(10, "value"));
	bst270.emplace(Node<int, string>(5, "value"));
	bst270.emplace(Node<int, string>(6, "value"));
	bst270.emplace(Node<int, string>(19, "value"));
	bst270.emplace(Node<int, string>(2, "value"));
	bst270.emplace(Node<int, string>(1, "value"));
	bst270.emplace(Node<int, string>(15, "value"));
	bst270.emplace(Node<int, string>(16, "value"));

	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(10)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(8)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(17)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(15)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(18)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(20)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(6)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(4)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(3)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(19)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(16)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(1)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(7)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(5)->getKey());
	bst270.ascend_printout(bst270.getRoot());
	bst270.deleteNode(bst270.at(2)->getKey());



	BST<int,string> bst271(Node<int, string> (16, "RootVal"));
	bst271.emplace(Node<int, string>(20, "value"));
	bst271.emplace(Node<int, string>(6, "value"));
	bst271.emplace(Node<int, string>(17, "value"));
	bst271.emplace(Node<int, string>(3, "value"));
	bst271.emplace(Node<int, string>(5, "value"));
	bst271.emplace(Node<int, string>(9, "value"));
	bst271.emplace(Node<int, string>(4, "value"));
	bst271.emplace(Node<int, string>(14, "value"));
	bst271.emplace(Node<int, string>(11, "value"));
	bst271.emplace(Node<int, string>(19, "value"));
	bst271.emplace(Node<int, string>(1, "value"));
	bst271.emplace(Node<int, string>(10, "value"));
	bst271.emplace(Node<int, string>(13, "value"));

	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(6)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(4)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(17)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(10)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(14)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(3)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(9)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(13)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(5)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(19)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(1)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(16)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(11)->getKey());
	bst271.ascend_printout(bst271.getRoot());
	bst271.deleteNode(bst271.at(20)->getKey());



	BST<int,string> bst272(Node<int, string> (16, "RootVal"));
	bst272.emplace(Node<int, string>(17, "value"));
	bst272.emplace(Node<int, string>(2, "value"));
	bst272.emplace(Node<int, string>(12, "value"));
	bst272.emplace(Node<int, string>(5, "value"));
	bst272.emplace(Node<int, string>(18, "value"));
	bst272.emplace(Node<int, string>(19, "value"));
	bst272.emplace(Node<int, string>(20, "value"));
	bst272.emplace(Node<int, string>(9, "value"));
	bst272.emplace(Node<int, string>(14, "value"));
	bst272.emplace(Node<int, string>(15, "value"));
	bst272.emplace(Node<int, string>(1, "value"));
	bst272.emplace(Node<int, string>(7, "value"));

	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(12)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(20)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(19)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(17)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(18)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(15)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(1)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(5)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(16)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(9)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(7)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(14)->getKey());
	bst272.ascend_printout(bst272.getRoot());
	bst272.deleteNode(bst272.at(2)->getKey());



	BST<int,string> bst273(Node<int, string> (11, "RootVal"));
	bst273.emplace(Node<int, string>(19, "value"));
	bst273.emplace(Node<int, string>(5, "value"));
	bst273.emplace(Node<int, string>(1, "value"));
	bst273.emplace(Node<int, string>(2, "value"));
	bst273.emplace(Node<int, string>(10, "value"));
	bst273.emplace(Node<int, string>(18, "value"));
	bst273.emplace(Node<int, string>(14, "value"));
	bst273.emplace(Node<int, string>(7, "value"));
	bst273.emplace(Node<int, string>(13, "value"));
	bst273.emplace(Node<int, string>(3, "value"));
	bst273.emplace(Node<int, string>(15, "value"));

	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(15)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(1)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(13)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(5)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(7)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(19)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(2)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(10)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(14)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(18)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(11)->getKey());
	bst273.ascend_printout(bst273.getRoot());
	bst273.deleteNode(bst273.at(3)->getKey());



	BST<int,string> bst274(Node<int, string> (12, "RootVal"));
	bst274.emplace(Node<int, string>(5, "value"));
	bst274.emplace(Node<int, string>(19, "value"));
	bst274.emplace(Node<int, string>(1, "value"));
	bst274.emplace(Node<int, string>(4, "value"));
	bst274.emplace(Node<int, string>(8, "value"));
	bst274.emplace(Node<int, string>(2, "value"));
	bst274.emplace(Node<int, string>(15, "value"));
	bst274.emplace(Node<int, string>(7, "value"));
	bst274.emplace(Node<int, string>(17, "value"));
	bst274.emplace(Node<int, string>(11, "value"));
	bst274.emplace(Node<int, string>(9, "value"));

	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(9)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(11)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(1)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(4)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(15)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(5)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(12)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(2)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(17)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(7)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(8)->getKey());
	bst274.ascend_printout(bst274.getRoot());
	bst274.deleteNode(bst274.at(19)->getKey());



	BST<int,string> bst275(Node<int, string> (15, "RootVal"));
	bst275.emplace(Node<int, string>(5, "value"));
	bst275.emplace(Node<int, string>(1, "value"));
	bst275.emplace(Node<int, string>(14, "value"));
	bst275.emplace(Node<int, string>(11, "value"));
	bst275.emplace(Node<int, string>(16, "value"));
	bst275.emplace(Node<int, string>(3, "value"));
	bst275.emplace(Node<int, string>(9, "value"));
	bst275.emplace(Node<int, string>(12, "value"));
	bst275.emplace(Node<int, string>(17, "value"));
	bst275.emplace(Node<int, string>(4, "value"));

	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(5)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(4)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(11)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(1)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(9)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(16)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(14)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(15)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(3)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(17)->getKey());
	bst275.ascend_printout(bst275.getRoot());
	bst275.deleteNode(bst275.at(12)->getKey());



	BST<int,string> bst276(Node<int, string> (16, "RootVal"));
	bst276.emplace(Node<int, string>(17, "value"));
	bst276.emplace(Node<int, string>(4, "value"));
	bst276.emplace(Node<int, string>(5, "value"));
	bst276.emplace(Node<int, string>(8, "value"));
	bst276.emplace(Node<int, string>(3, "value"));
	bst276.emplace(Node<int, string>(14, "value"));
	bst276.emplace(Node<int, string>(10, "value"));
	bst276.emplace(Node<int, string>(6, "value"));
	bst276.emplace(Node<int, string>(7, "value"));
	bst276.emplace(Node<int, string>(19, "value"));
	bst276.emplace(Node<int, string>(13, "value"));
	bst276.emplace(Node<int, string>(1, "value"));
	bst276.emplace(Node<int, string>(9, "value"));

	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(7)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(10)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(13)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(9)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(3)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(5)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(16)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(17)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(1)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(6)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(8)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(4)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(19)->getKey());
	bst276.ascend_printout(bst276.getRoot());
	bst276.deleteNode(bst276.at(14)->getKey());



	BST<int,string> bst277(Node<int, string> (11, "RootVal"));
	bst277.emplace(Node<int, string>(20, "value"));
	bst277.emplace(Node<int, string>(10, "value"));
	bst277.emplace(Node<int, string>(2, "value"));
	bst277.emplace(Node<int, string>(13, "value"));
	bst277.emplace(Node<int, string>(12, "value"));
	bst277.emplace(Node<int, string>(1, "value"));
	bst277.emplace(Node<int, string>(19, "value"));
	bst277.emplace(Node<int, string>(3, "value"));
	bst277.emplace(Node<int, string>(8, "value"));
	bst277.emplace(Node<int, string>(16, "value"));
	bst277.emplace(Node<int, string>(6, "value"));
	bst277.emplace(Node<int, string>(4, "value"));

	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(10)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(2)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(12)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(1)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(4)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(20)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(16)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(3)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(11)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(13)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(19)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(8)->getKey());
	bst277.ascend_printout(bst277.getRoot());
	bst277.deleteNode(bst277.at(6)->getKey());



	BST<int,string> bst278(Node<int, string> (16, "RootVal"));
	bst278.emplace(Node<int, string>(20, "value"));
	bst278.emplace(Node<int, string>(17, "value"));
	bst278.emplace(Node<int, string>(3, "value"));
	bst278.emplace(Node<int, string>(15, "value"));
	bst278.emplace(Node<int, string>(11, "value"));
	bst278.emplace(Node<int, string>(10, "value"));
	bst278.emplace(Node<int, string>(4, "value"));
	bst278.emplace(Node<int, string>(18, "value"));
	bst278.emplace(Node<int, string>(13, "value"));
	bst278.emplace(Node<int, string>(1, "value"));
	bst278.emplace(Node<int, string>(7, "value"));
	bst278.emplace(Node<int, string>(2, "value"));
	bst278.emplace(Node<int, string>(19, "value"));

	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(3)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(11)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(17)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(20)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(4)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(13)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(15)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(16)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(18)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(1)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(19)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(7)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(10)->getKey());
	bst278.ascend_printout(bst278.getRoot());
	bst278.deleteNode(bst278.at(2)->getKey());



	BST<int,string> bst279(Node<int, string> (18, "RootVal"));
	bst279.emplace(Node<int, string>(4, "value"));
	bst279.emplace(Node<int, string>(8, "value"));
	bst279.emplace(Node<int, string>(1, "value"));
	bst279.emplace(Node<int, string>(6, "value"));
	bst279.emplace(Node<int, string>(5, "value"));
	bst279.emplace(Node<int, string>(3, "value"));
	bst279.emplace(Node<int, string>(20, "value"));
	bst279.emplace(Node<int, string>(15, "value"));
	bst279.emplace(Node<int, string>(19, "value"));
	bst279.emplace(Node<int, string>(7, "value"));
	bst279.emplace(Node<int, string>(2, "value"));
	bst279.emplace(Node<int, string>(16, "value"));

	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(3)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(16)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(18)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(6)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(19)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(1)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(2)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(5)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(8)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(20)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(7)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(15)->getKey());
	bst279.ascend_printout(bst279.getRoot());
	bst279.deleteNode(bst279.at(4)->getKey());



	BST<int,string> bst280(Node<int, string> (2, "RootVal"));
	bst280.emplace(Node<int, string>(20, "value"));
	bst280.emplace(Node<int, string>(9, "value"));
	bst280.emplace(Node<int, string>(16, "value"));
	bst280.emplace(Node<int, string>(14, "value"));
	bst280.emplace(Node<int, string>(6, "value"));
	bst280.emplace(Node<int, string>(12, "value"));
	bst280.emplace(Node<int, string>(15, "value"));
	bst280.emplace(Node<int, string>(10, "value"));
	bst280.emplace(Node<int, string>(7, "value"));
	bst280.emplace(Node<int, string>(4, "value"));
	bst280.emplace(Node<int, string>(1, "value"));
	bst280.emplace(Node<int, string>(19, "value"));
	bst280.emplace(Node<int, string>(3, "value"));

	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(1)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(10)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(19)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(3)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(16)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(12)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(9)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(7)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(14)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(20)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(4)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(2)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(6)->getKey());
	bst280.ascend_printout(bst280.getRoot());
	bst280.deleteNode(bst280.at(15)->getKey());



	BST<int,string> bst281(Node<int, string> (19, "RootVal"));
	bst281.emplace(Node<int, string>(10, "value"));
	bst281.emplace(Node<int, string>(13, "value"));
	bst281.emplace(Node<int, string>(12, "value"));
	bst281.emplace(Node<int, string>(5, "value"));
	bst281.emplace(Node<int, string>(3, "value"));
	bst281.emplace(Node<int, string>(11, "value"));
	bst281.emplace(Node<int, string>(1, "value"));
	bst281.emplace(Node<int, string>(18, "value"));
	bst281.emplace(Node<int, string>(16, "value"));
	bst281.emplace(Node<int, string>(20, "value"));
	bst281.emplace(Node<int, string>(17, "value"));
	bst281.emplace(Node<int, string>(6, "value"));
	bst281.emplace(Node<int, string>(14, "value"));
	bst281.emplace(Node<int, string>(9, "value"));

	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(12)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(1)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(11)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(5)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(19)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(9)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(16)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(18)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(10)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(17)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(6)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(14)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(3)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(20)->getKey());
	bst281.ascend_printout(bst281.getRoot());
	bst281.deleteNode(bst281.at(13)->getKey());



	BST<int,string> bst282(Node<int, string> (13, "RootVal"));
	bst282.emplace(Node<int, string>(2, "value"));
	bst282.emplace(Node<int, string>(14, "value"));
	bst282.emplace(Node<int, string>(12, "value"));
	bst282.emplace(Node<int, string>(16, "value"));
	bst282.emplace(Node<int, string>(8, "value"));
	bst282.emplace(Node<int, string>(15, "value"));
	bst282.emplace(Node<int, string>(4, "value"));
	bst282.emplace(Node<int, string>(6, "value"));
	bst282.emplace(Node<int, string>(3, "value"));
	bst282.emplace(Node<int, string>(19, "value"));
	bst282.emplace(Node<int, string>(18, "value"));
	bst282.emplace(Node<int, string>(5, "value"));
	bst282.emplace(Node<int, string>(11, "value"));
	bst282.emplace(Node<int, string>(1, "value"));

	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(4)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(13)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(2)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(14)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(11)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(5)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(12)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(3)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(1)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(19)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(15)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(8)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(16)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(6)->getKey());
	bst282.ascend_printout(bst282.getRoot());
	bst282.deleteNode(bst282.at(18)->getKey());



	BST<int,string> bst283(Node<int, string> (1, "RootVal"));
	bst283.emplace(Node<int, string>(15, "value"));
	bst283.emplace(Node<int, string>(10, "value"));
	bst283.emplace(Node<int, string>(12, "value"));
	bst283.emplace(Node<int, string>(9, "value"));
	bst283.emplace(Node<int, string>(18, "value"));
	bst283.emplace(Node<int, string>(20, "value"));
	bst283.emplace(Node<int, string>(4, "value"));
	bst283.emplace(Node<int, string>(17, "value"));
	bst283.emplace(Node<int, string>(3, "value"));
	bst283.emplace(Node<int, string>(16, "value"));
	bst283.emplace(Node<int, string>(7, "value"));

	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(9)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(7)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(4)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(17)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(3)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(18)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(20)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(1)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(10)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(12)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(15)->getKey());
	bst283.ascend_printout(bst283.getRoot());
	bst283.deleteNode(bst283.at(16)->getKey());



	BST<int,string> bst284(Node<int, string> (19, "RootVal"));
	bst284.emplace(Node<int, string>(11, "value"));
	bst284.emplace(Node<int, string>(9, "value"));
	bst284.emplace(Node<int, string>(1, "value"));
	bst284.emplace(Node<int, string>(6, "value"));
	bst284.emplace(Node<int, string>(2, "value"));
	bst284.emplace(Node<int, string>(18, "value"));
	bst284.emplace(Node<int, string>(10, "value"));
	bst284.emplace(Node<int, string>(17, "value"));
	bst284.emplace(Node<int, string>(14, "value"));
	bst284.emplace(Node<int, string>(3, "value"));
	bst284.emplace(Node<int, string>(13, "value"));
	bst284.emplace(Node<int, string>(5, "value"));

	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(10)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(9)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(5)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(17)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(18)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(14)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(6)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(2)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(11)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(13)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(3)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(1)->getKey());
	bst284.ascend_printout(bst284.getRoot());
	bst284.deleteNode(bst284.at(19)->getKey());



	BST<int,string> bst285(Node<int, string> (18, "RootVal"));
	bst285.emplace(Node<int, string>(3, "value"));
	bst285.emplace(Node<int, string>(17, "value"));
	bst285.emplace(Node<int, string>(1, "value"));
	bst285.emplace(Node<int, string>(11, "value"));
	bst285.emplace(Node<int, string>(19, "value"));
	bst285.emplace(Node<int, string>(8, "value"));
	bst285.emplace(Node<int, string>(5, "value"));
	bst285.emplace(Node<int, string>(20, "value"));
	bst285.emplace(Node<int, string>(4, "value"));
	bst285.emplace(Node<int, string>(16, "value"));
	bst285.emplace(Node<int, string>(2, "value"));

	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(1)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(16)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(17)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(3)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(8)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(4)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(20)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(19)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(2)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(11)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(18)->getKey());
	bst285.ascend_printout(bst285.getRoot());
	bst285.deleteNode(bst285.at(5)->getKey());



	BST<int,string> bst286(Node<int, string> (4, "RootVal"));
	bst286.emplace(Node<int, string>(14, "value"));
	bst286.emplace(Node<int, string>(9, "value"));
	bst286.emplace(Node<int, string>(11, "value"));
	bst286.emplace(Node<int, string>(7, "value"));
	bst286.emplace(Node<int, string>(19, "value"));
	bst286.emplace(Node<int, string>(10, "value"));
	bst286.emplace(Node<int, string>(2, "value"));
	bst286.emplace(Node<int, string>(8, "value"));
	bst286.emplace(Node<int, string>(17, "value"));
	bst286.emplace(Node<int, string>(6, "value"));
	bst286.emplace(Node<int, string>(1, "value"));
	bst286.emplace(Node<int, string>(5, "value"));
	bst286.emplace(Node<int, string>(12, "value"));

	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(6)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(10)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(11)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(7)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(9)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(17)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(14)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(4)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(8)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(5)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(19)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(1)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(12)->getKey());
	bst286.ascend_printout(bst286.getRoot());
	bst286.deleteNode(bst286.at(2)->getKey());



	BST<int,string> bst287(Node<int, string> (2, "RootVal"));
	bst287.emplace(Node<int, string>(18, "value"));
	bst287.emplace(Node<int, string>(8, "value"));
	bst287.emplace(Node<int, string>(6, "value"));
	bst287.emplace(Node<int, string>(11, "value"));
	bst287.emplace(Node<int, string>(13, "value"));
	bst287.emplace(Node<int, string>(3, "value"));
	bst287.emplace(Node<int, string>(19, "value"));
	bst287.emplace(Node<int, string>(20, "value"));
	bst287.emplace(Node<int, string>(14, "value"));

	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(11)->getKey());
	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(3)->getKey());
	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(18)->getKey());
	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(6)->getKey());
	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(19)->getKey());
	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(20)->getKey());
	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(14)->getKey());
	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(2)->getKey());
	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(13)->getKey());
	bst287.ascend_printout(bst287.getRoot());
	bst287.deleteNode(bst287.at(8)->getKey());



	BST<int,string> bst288(Node<int, string> (3, "RootVal"));
	bst288.emplace(Node<int, string>(11, "value"));
	bst288.emplace(Node<int, string>(7, "value"));
	bst288.emplace(Node<int, string>(9, "value"));
	bst288.emplace(Node<int, string>(13, "value"));
	bst288.emplace(Node<int, string>(18, "value"));
	bst288.emplace(Node<int, string>(19, "value"));
	bst288.emplace(Node<int, string>(16, "value"));
	bst288.emplace(Node<int, string>(10, "value"));
	bst288.emplace(Node<int, string>(1, "value"));

	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(10)->getKey());
	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(3)->getKey());
	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(1)->getKey());
	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(19)->getKey());
	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(16)->getKey());
	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(18)->getKey());
	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(11)->getKey());
	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(7)->getKey());
	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(9)->getKey());
	bst288.ascend_printout(bst288.getRoot());
	bst288.deleteNode(bst288.at(13)->getKey());



	BST<int,string> bst289(Node<int, string> (18, "RootVal"));
	bst289.emplace(Node<int, string>(12, "value"));
	bst289.emplace(Node<int, string>(8, "value"));
	bst289.emplace(Node<int, string>(3, "value"));
	bst289.emplace(Node<int, string>(2, "value"));
	bst289.emplace(Node<int, string>(19, "value"));
	bst289.emplace(Node<int, string>(16, "value"));
	bst289.emplace(Node<int, string>(1, "value"));
	bst289.emplace(Node<int, string>(9, "value"));
	bst289.emplace(Node<int, string>(7, "value"));
	bst289.emplace(Node<int, string>(5, "value"));
	bst289.emplace(Node<int, string>(6, "value"));

	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(9)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(18)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(3)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(2)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(16)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(5)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(7)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(8)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(12)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(19)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(6)->getKey());
	bst289.ascend_printout(bst289.getRoot());
	bst289.deleteNode(bst289.at(1)->getKey());



	BST<int,string> bst290(Node<int, string> (12, "RootVal"));
	bst290.emplace(Node<int, string>(20, "value"));
	bst290.emplace(Node<int, string>(18, "value"));
	bst290.emplace(Node<int, string>(6, "value"));
	bst290.emplace(Node<int, string>(17, "value"));
	bst290.emplace(Node<int, string>(8, "value"));
	bst290.emplace(Node<int, string>(4, "value"));
	bst290.emplace(Node<int, string>(14, "value"));
	bst290.emplace(Node<int, string>(13, "value"));
	bst290.emplace(Node<int, string>(10, "value"));
	bst290.emplace(Node<int, string>(5, "value"));
	bst290.emplace(Node<int, string>(9, "value"));
	bst290.emplace(Node<int, string>(19, "value"));

	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(8)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(9)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(4)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(17)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(5)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(12)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(19)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(20)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(10)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(6)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(14)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(13)->getKey());
	bst290.ascend_printout(bst290.getRoot());
	bst290.deleteNode(bst290.at(18)->getKey());



	BST<int,string> bst291(Node<int, string> (8, "RootVal"));
	bst291.emplace(Node<int, string>(4, "value"));
	bst291.emplace(Node<int, string>(16, "value"));
	bst291.emplace(Node<int, string>(1, "value"));
	bst291.emplace(Node<int, string>(5, "value"));
	bst291.emplace(Node<int, string>(12, "value"));
	bst291.emplace(Node<int, string>(17, "value"));
	bst291.emplace(Node<int, string>(2, "value"));
	bst291.emplace(Node<int, string>(14, "value"));
	bst291.emplace(Node<int, string>(13, "value"));
	bst291.emplace(Node<int, string>(10, "value"));

	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(12)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(16)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(17)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(4)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(13)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(14)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(10)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(5)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(8)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(2)->getKey());
	bst291.ascend_printout(bst291.getRoot());
	bst291.deleteNode(bst291.at(1)->getKey());



	BST<int,string> bst292(Node<int, string> (6, "RootVal"));
	bst292.emplace(Node<int, string>(2, "value"));
	bst292.emplace(Node<int, string>(12, "value"));
	bst292.emplace(Node<int, string>(3, "value"));
	bst292.emplace(Node<int, string>(9, "value"));
	bst292.emplace(Node<int, string>(4, "value"));
	bst292.emplace(Node<int, string>(14, "value"));
	bst292.emplace(Node<int, string>(5, "value"));
	bst292.emplace(Node<int, string>(8, "value"));
	bst292.emplace(Node<int, string>(15, "value"));
	bst292.emplace(Node<int, string>(19, "value"));
	bst292.emplace(Node<int, string>(10, "value"));
	bst292.emplace(Node<int, string>(18, "value"));
	bst292.emplace(Node<int, string>(16, "value"));

	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(2)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(4)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(6)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(9)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(3)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(8)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(14)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(10)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(18)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(16)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(5)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(15)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(19)->getKey());
	bst292.ascend_printout(bst292.getRoot());
	bst292.deleteNode(bst292.at(12)->getKey());



	BST<int,string> bst293(Node<int, string> (19, "RootVal"));
	bst293.emplace(Node<int, string>(4, "value"));
	bst293.emplace(Node<int, string>(13, "value"));
	bst293.emplace(Node<int, string>(17, "value"));
	bst293.emplace(Node<int, string>(2, "value"));
	bst293.emplace(Node<int, string>(11, "value"));
	bst293.emplace(Node<int, string>(15, "value"));
	bst293.emplace(Node<int, string>(20, "value"));
	bst293.emplace(Node<int, string>(7, "value"));
	bst293.emplace(Node<int, string>(1, "value"));
	bst293.emplace(Node<int, string>(16, "value"));
	bst293.emplace(Node<int, string>(9, "value"));
	bst293.emplace(Node<int, string>(8, "value"));
	bst293.emplace(Node<int, string>(6, "value"));
	bst293.emplace(Node<int, string>(14, "value"));

	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(13)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(2)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(15)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(6)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(8)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(4)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(16)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(7)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(9)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(11)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(1)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(20)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(19)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(17)->getKey());
	bst293.ascend_printout(bst293.getRoot());
	bst293.deleteNode(bst293.at(14)->getKey());



	BST<int,string> bst294(Node<int, string> (17, "RootVal"));
	bst294.emplace(Node<int, string>(9, "value"));
	bst294.emplace(Node<int, string>(5, "value"));
	bst294.emplace(Node<int, string>(6, "value"));
	bst294.emplace(Node<int, string>(2, "value"));
	bst294.emplace(Node<int, string>(12, "value"));
	bst294.emplace(Node<int, string>(20, "value"));
	bst294.emplace(Node<int, string>(4, "value"));
	bst294.emplace(Node<int, string>(13, "value"));
	bst294.emplace(Node<int, string>(8, "value"));
	bst294.emplace(Node<int, string>(7, "value"));
	bst294.emplace(Node<int, string>(14, "value"));
	bst294.emplace(Node<int, string>(19, "value"));
	bst294.emplace(Node<int, string>(10, "value"));

	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(6)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(5)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(19)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(10)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(13)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(20)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(8)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(2)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(7)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(9)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(14)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(4)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(17)->getKey());
	bst294.ascend_printout(bst294.getRoot());
	bst294.deleteNode(bst294.at(12)->getKey());



	BST<int,string> bst295(Node<int, string> (14, "RootVal"));
	bst295.emplace(Node<int, string>(18, "value"));
	bst295.emplace(Node<int, string>(9, "value"));
	bst295.emplace(Node<int, string>(20, "value"));
	bst295.emplace(Node<int, string>(13, "value"));
	bst295.emplace(Node<int, string>(16, "value"));
	bst295.emplace(Node<int, string>(1, "value"));
	bst295.emplace(Node<int, string>(10, "value"));
	bst295.emplace(Node<int, string>(11, "value"));
	bst295.emplace(Node<int, string>(7, "value"));
	bst295.emplace(Node<int, string>(6, "value"));
	bst295.emplace(Node<int, string>(8, "value"));

	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(8)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(7)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(1)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(13)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(10)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(16)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(14)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(6)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(9)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(18)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(20)->getKey());
	bst295.ascend_printout(bst295.getRoot());
	bst295.deleteNode(bst295.at(11)->getKey());



	BST<int,string> bst296(Node<int, string> (13, "RootVal"));
	bst296.emplace(Node<int, string>(6, "value"));
	bst296.emplace(Node<int, string>(15, "value"));
	bst296.emplace(Node<int, string>(5, "value"));
	bst296.emplace(Node<int, string>(14, "value"));
	bst296.emplace(Node<int, string>(11, "value"));
	bst296.emplace(Node<int, string>(10, "value"));
	bst296.emplace(Node<int, string>(7, "value"));
	bst296.emplace(Node<int, string>(2, "value"));
	bst296.emplace(Node<int, string>(20, "value"));
	bst296.emplace(Node<int, string>(16, "value"));
	bst296.emplace(Node<int, string>(17, "value"));
	bst296.emplace(Node<int, string>(4, "value"));
	bst296.emplace(Node<int, string>(1, "value"));
	bst296.emplace(Node<int, string>(18, "value"));

	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(20)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(6)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(14)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(11)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(7)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(2)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(18)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(10)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(4)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(16)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(1)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(17)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(15)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(13)->getKey());
	bst296.ascend_printout(bst296.getRoot());
	bst296.deleteNode(bst296.at(5)->getKey());



	BST<int,string> bst297(Node<int, string> (2, "RootVal"));
	bst297.emplace(Node<int, string>(15, "value"));
	bst297.emplace(Node<int, string>(7, "value"));
	bst297.emplace(Node<int, string>(5, "value"));
	bst297.emplace(Node<int, string>(11, "value"));
	bst297.emplace(Node<int, string>(18, "value"));
	bst297.emplace(Node<int, string>(4, "value"));
	bst297.emplace(Node<int, string>(17, "value"));
	bst297.emplace(Node<int, string>(19, "value"));
	bst297.emplace(Node<int, string>(10, "value"));
	bst297.emplace(Node<int, string>(1, "value"));
	bst297.emplace(Node<int, string>(12, "value"));
	bst297.emplace(Node<int, string>(8, "value"));

	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(12)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(2)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(1)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(17)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(11)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(10)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(19)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(5)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(18)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(7)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(15)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(8)->getKey());
	bst297.ascend_printout(bst297.getRoot());
	bst297.deleteNode(bst297.at(4)->getKey());



	BST<int,string> bst298(Node<int, string> (17, "RootVal"));
	bst298.emplace(Node<int, string>(11, "value"));
	bst298.emplace(Node<int, string>(14, "value"));
	bst298.emplace(Node<int, string>(16, "value"));
	bst298.emplace(Node<int, string>(13, "value"));
	bst298.emplace(Node<int, string>(19, "value"));
	bst298.emplace(Node<int, string>(15, "value"));
	bst298.emplace(Node<int, string>(2, "value"));
	bst298.emplace(Node<int, string>(10, "value"));
	bst298.emplace(Node<int, string>(20, "value"));
	bst298.emplace(Node<int, string>(5, "value"));
	bst298.emplace(Node<int, string>(3, "value"));
	bst298.emplace(Node<int, string>(18, "value"));
	bst298.emplace(Node<int, string>(6, "value"));
	bst298.emplace(Node<int, string>(12, "value"));

	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(6)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(16)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(2)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(17)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(13)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(14)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(11)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(10)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(15)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(12)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(5)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(20)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(18)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(3)->getKey());
	bst298.ascend_printout(bst298.getRoot());
	bst298.deleteNode(bst298.at(19)->getKey());



	BST<int,string> bst299(Node<int, string> (2, "RootVal"));
	bst299.emplace(Node<int, string>(5, "value"));
	bst299.emplace(Node<int, string>(13, "value"));
	bst299.emplace(Node<int, string>(17, "value"));
	bst299.emplace(Node<int, string>(16, "value"));
	bst299.emplace(Node<int, string>(1, "value"));
	bst299.emplace(Node<int, string>(9, "value"));
	bst299.emplace(Node<int, string>(3, "value"));
	bst299.emplace(Node<int, string>(11, "value"));
	bst299.emplace(Node<int, string>(15, "value"));
	bst299.emplace(Node<int, string>(7, "value"));
	bst299.emplace(Node<int, string>(18, "value"));
	bst299.emplace(Node<int, string>(20, "value"));

	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(18)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(13)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(7)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(2)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(3)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(9)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(11)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(20)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(16)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(17)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(5)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(1)->getKey());
	bst299.ascend_printout(bst299.getRoot());
	bst299.deleteNode(bst299.at(15)->getKey());



	BST<int,string> bst300(Node<int, string> (16, "RootVal"));
	bst300.emplace(Node<int, string>(17, "value"));
	bst300.emplace(Node<int, string>(8, "value"));
	bst300.emplace(Node<int, string>(18, "value"));
	bst300.emplace(Node<int, string>(9, "value"));
	bst300.emplace(Node<int, string>(6, "value"));
	bst300.emplace(Node<int, string>(2, "value"));
	bst300.emplace(Node<int, string>(4, "value"));
	bst300.emplace(Node<int, string>(14, "value"));
	bst300.emplace(Node<int, string>(12, "value"));
	bst300.emplace(Node<int, string>(19, "value"));
	bst300.emplace(Node<int, string>(20, "value"));
	bst300.emplace(Node<int, string>(7, "value"));
	bst300.emplace(Node<int, string>(10, "value"));

	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(2)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(17)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(18)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(19)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(7)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(16)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(10)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(14)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(12)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(9)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(6)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(4)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(8)->getKey());
	bst300.ascend_printout(bst300.getRoot());
	bst300.deleteNode(bst300.at(20)->getKey());



	BST<int,string> bst301(Node<int, string> (13, "RootVal"));
	bst301.emplace(Node<int, string>(6, "value"));
	bst301.emplace(Node<int, string>(3, "value"));
	bst301.emplace(Node<int, string>(11, "value"));
	bst301.emplace(Node<int, string>(19, "value"));
	bst301.emplace(Node<int, string>(15, "value"));
	bst301.emplace(Node<int, string>(5, "value"));
	bst301.emplace(Node<int, string>(2, "value"));
	bst301.emplace(Node<int, string>(7, "value"));
	bst301.emplace(Node<int, string>(18, "value"));
	bst301.emplace(Node<int, string>(10, "value"));
	bst301.emplace(Node<int, string>(9, "value"));
	bst301.emplace(Node<int, string>(12, "value"));
	bst301.emplace(Node<int, string>(20, "value"));

	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(18)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(7)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(15)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(12)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(19)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(2)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(20)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(13)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(9)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(11)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(6)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(5)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(3)->getKey());
	bst301.ascend_printout(bst301.getRoot());
	bst301.deleteNode(bst301.at(10)->getKey());



	BST<int,string> bst302(Node<int, string> (16, "RootVal"));
	bst302.emplace(Node<int, string>(11, "value"));
	bst302.emplace(Node<int, string>(18, "value"));
	bst302.emplace(Node<int, string>(3, "value"));
	bst302.emplace(Node<int, string>(13, "value"));
	bst302.emplace(Node<int, string>(9, "value"));
	bst302.emplace(Node<int, string>(14, "value"));
	bst302.emplace(Node<int, string>(10, "value"));
	bst302.emplace(Node<int, string>(7, "value"));
	bst302.emplace(Node<int, string>(17, "value"));
	bst302.emplace(Node<int, string>(15, "value"));

	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(10)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(9)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(16)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(7)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(17)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(3)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(13)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(14)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(15)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(11)->getKey());
	bst302.ascend_printout(bst302.getRoot());
	bst302.deleteNode(bst302.at(18)->getKey());



	BST<int,string> bst303(Node<int, string> (10, "RootVal"));
	bst303.emplace(Node<int, string>(19, "value"));
	bst303.emplace(Node<int, string>(13, "value"));
	bst303.emplace(Node<int, string>(1, "value"));
	bst303.emplace(Node<int, string>(14, "value"));
	bst303.emplace(Node<int, string>(5, "value"));
	bst303.emplace(Node<int, string>(2, "value"));
	bst303.emplace(Node<int, string>(6, "value"));
	bst303.emplace(Node<int, string>(16, "value"));
	bst303.emplace(Node<int, string>(20, "value"));
	bst303.emplace(Node<int, string>(17, "value"));
	bst303.emplace(Node<int, string>(7, "value"));

	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(19)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(6)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(7)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(1)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(20)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(2)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(13)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(14)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(17)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(16)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(5)->getKey());
	bst303.ascend_printout(bst303.getRoot());
	bst303.deleteNode(bst303.at(10)->getKey());



	BST<int,string> bst304(Node<int, string> (9, "RootVal"));
	bst304.emplace(Node<int, string>(19, "value"));
	bst304.emplace(Node<int, string>(2, "value"));
	bst304.emplace(Node<int, string>(12, "value"));
	bst304.emplace(Node<int, string>(3, "value"));
	bst304.emplace(Node<int, string>(13, "value"));
	bst304.emplace(Node<int, string>(6, "value"));
	bst304.emplace(Node<int, string>(18, "value"));
	bst304.emplace(Node<int, string>(1, "value"));
	bst304.emplace(Node<int, string>(14, "value"));
	bst304.emplace(Node<int, string>(8, "value"));
	bst304.emplace(Node<int, string>(20, "value"));
	bst304.emplace(Node<int, string>(15, "value"));
	bst304.emplace(Node<int, string>(10, "value"));

	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(9)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(8)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(6)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(1)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(20)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(15)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(10)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(2)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(14)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(12)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(18)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(19)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(3)->getKey());
	bst304.ascend_printout(bst304.getRoot());
	bst304.deleteNode(bst304.at(13)->getKey());



	BST<int,string> bst305(Node<int, string> (18, "RootVal"));
	bst305.emplace(Node<int, string>(2, "value"));
	bst305.emplace(Node<int, string>(12, "value"));
	bst305.emplace(Node<int, string>(15, "value"));
	bst305.emplace(Node<int, string>(17, "value"));
	bst305.emplace(Node<int, string>(20, "value"));
	bst305.emplace(Node<int, string>(11, "value"));
	bst305.emplace(Node<int, string>(9, "value"));
	bst305.emplace(Node<int, string>(4, "value"));
	bst305.emplace(Node<int, string>(1, "value"));
	bst305.emplace(Node<int, string>(5, "value"));
	bst305.emplace(Node<int, string>(8, "value"));
	bst305.emplace(Node<int, string>(7, "value"));
	bst305.emplace(Node<int, string>(14, "value"));
	bst305.emplace(Node<int, string>(19, "value"));

	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(7)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(17)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(8)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(15)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(4)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(9)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(20)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(18)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(19)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(11)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(14)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(12)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(5)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(1)->getKey());
	bst305.ascend_printout(bst305.getRoot());
	bst305.deleteNode(bst305.at(2)->getKey());



	BST<int,string> bst306(Node<int, string> (6, "RootVal"));
	bst306.emplace(Node<int, string>(7, "value"));
	bst306.emplace(Node<int, string>(8, "value"));
	bst306.emplace(Node<int, string>(13, "value"));
	bst306.emplace(Node<int, string>(16, "value"));
	bst306.emplace(Node<int, string>(20, "value"));
	bst306.emplace(Node<int, string>(1, "value"));
	bst306.emplace(Node<int, string>(15, "value"));
	bst306.emplace(Node<int, string>(18, "value"));
	bst306.emplace(Node<int, string>(3, "value"));
	bst306.emplace(Node<int, string>(14, "value"));

	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(15)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(14)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(6)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(8)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(7)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(3)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(1)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(16)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(20)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(13)->getKey());
	bst306.ascend_printout(bst306.getRoot());
	bst306.deleteNode(bst306.at(18)->getKey());



	BST<int,string> bst307(Node<int, string> (5, "RootVal"));
	bst307.emplace(Node<int, string>(10, "value"));
	bst307.emplace(Node<int, string>(8, "value"));
	bst307.emplace(Node<int, string>(17, "value"));
	bst307.emplace(Node<int, string>(19, "value"));
	bst307.emplace(Node<int, string>(12, "value"));
	bst307.emplace(Node<int, string>(9, "value"));
	bst307.emplace(Node<int, string>(15, "value"));
	bst307.emplace(Node<int, string>(11, "value"));
	bst307.emplace(Node<int, string>(6, "value"));
	bst307.emplace(Node<int, string>(16, "value"));
	bst307.emplace(Node<int, string>(13, "value"));
	bst307.emplace(Node<int, string>(1, "value"));

	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(1)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(5)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(11)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(19)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(13)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(6)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(12)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(9)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(17)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(8)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(15)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(10)->getKey());
	bst307.ascend_printout(bst307.getRoot());
	bst307.deleteNode(bst307.at(16)->getKey());



	BST<int,string> bst308(Node<int, string> (4, "RootVal"));
	bst308.emplace(Node<int, string>(2, "value"));
	bst308.emplace(Node<int, string>(20, "value"));
	bst308.emplace(Node<int, string>(16, "value"));
	bst308.emplace(Node<int, string>(15, "value"));
	bst308.emplace(Node<int, string>(5, "value"));
	bst308.emplace(Node<int, string>(19, "value"));
	bst308.emplace(Node<int, string>(10, "value"));
	bst308.emplace(Node<int, string>(12, "value"));
	bst308.emplace(Node<int, string>(9, "value"));
	bst308.emplace(Node<int, string>(3, "value"));
	bst308.emplace(Node<int, string>(11, "value"));
	bst308.emplace(Node<int, string>(1, "value"));

	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(10)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(15)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(3)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(12)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(19)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(4)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(16)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(9)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(5)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(20)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(11)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(2)->getKey());
	bst308.ascend_printout(bst308.getRoot());
	bst308.deleteNode(bst308.at(1)->getKey());



	BST<int,string> bst309(Node<int, string> (6, "RootVal"));
	bst309.emplace(Node<int, string>(10, "value"));
	bst309.emplace(Node<int, string>(14, "value"));
	bst309.emplace(Node<int, string>(11, "value"));
	bst309.emplace(Node<int, string>(7, "value"));
	bst309.emplace(Node<int, string>(3, "value"));
	bst309.emplace(Node<int, string>(8, "value"));
	bst309.emplace(Node<int, string>(5, "value"));
	bst309.emplace(Node<int, string>(9, "value"));
	bst309.emplace(Node<int, string>(13, "value"));
	bst309.emplace(Node<int, string>(19, "value"));
	bst309.emplace(Node<int, string>(12, "value"));

	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(12)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(9)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(19)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(8)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(10)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(6)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(3)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(5)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(13)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(7)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(14)->getKey());
	bst309.ascend_printout(bst309.getRoot());
	bst309.deleteNode(bst309.at(11)->getKey());



	BST<int,string> bst310(Node<int, string> (8, "RootVal"));
	bst310.emplace(Node<int, string>(7, "value"));
	bst310.emplace(Node<int, string>(16, "value"));
	bst310.emplace(Node<int, string>(3, "value"));
	bst310.emplace(Node<int, string>(13, "value"));
	bst310.emplace(Node<int, string>(14, "value"));
	bst310.emplace(Node<int, string>(1, "value"));
	bst310.emplace(Node<int, string>(2, "value"));
	bst310.emplace(Node<int, string>(12, "value"));
	bst310.emplace(Node<int, string>(11, "value"));
	bst310.emplace(Node<int, string>(18, "value"));
	bst310.emplace(Node<int, string>(15, "value"));

	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(8)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(15)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(1)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(14)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(11)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(7)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(18)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(16)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(2)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(3)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(13)->getKey());
	bst310.ascend_printout(bst310.getRoot());
	bst310.deleteNode(bst310.at(12)->getKey());



	BST<int,string> bst311(Node<int, string> (20, "RootVal"));
	bst311.emplace(Node<int, string>(8, "value"));
	bst311.emplace(Node<int, string>(16, "value"));
	bst311.emplace(Node<int, string>(7, "value"));
	bst311.emplace(Node<int, string>(1, "value"));
	bst311.emplace(Node<int, string>(3, "value"));
	bst311.emplace(Node<int, string>(19, "value"));
	bst311.emplace(Node<int, string>(15, "value"));
	bst311.emplace(Node<int, string>(18, "value"));
	bst311.emplace(Node<int, string>(11, "value"));
	bst311.emplace(Node<int, string>(9, "value"));
	bst311.emplace(Node<int, string>(6, "value"));
	bst311.emplace(Node<int, string>(10, "value"));

	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(18)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(9)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(7)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(11)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(8)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(19)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(1)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(20)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(6)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(3)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(10)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(15)->getKey());
	bst311.ascend_printout(bst311.getRoot());
	bst311.deleteNode(bst311.at(16)->getKey());



	BST<int,string> bst312(Node<int, string> (2, "RootVal"));
	bst312.emplace(Node<int, string>(9, "value"));
	bst312.emplace(Node<int, string>(20, "value"));
	bst312.emplace(Node<int, string>(10, "value"));
	bst312.emplace(Node<int, string>(16, "value"));
	bst312.emplace(Node<int, string>(5, "value"));
	bst312.emplace(Node<int, string>(1, "value"));
	bst312.emplace(Node<int, string>(19, "value"));
	bst312.emplace(Node<int, string>(14, "value"));
	bst312.emplace(Node<int, string>(6, "value"));
	bst312.emplace(Node<int, string>(17, "value"));

	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(19)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(16)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(20)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(1)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(6)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(9)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(17)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(14)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(10)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(2)->getKey());
	bst312.ascend_printout(bst312.getRoot());
	bst312.deleteNode(bst312.at(5)->getKey());



	BST<int,string> bst313(Node<int, string> (18, "RootVal"));
	bst313.emplace(Node<int, string>(7, "value"));
	bst313.emplace(Node<int, string>(14, "value"));
	bst313.emplace(Node<int, string>(5, "value"));
	bst313.emplace(Node<int, string>(3, "value"));
	bst313.emplace(Node<int, string>(20, "value"));
	bst313.emplace(Node<int, string>(13, "value"));
	bst313.emplace(Node<int, string>(10, "value"));
	bst313.emplace(Node<int, string>(12, "value"));
	bst313.emplace(Node<int, string>(16, "value"));
	bst313.emplace(Node<int, string>(2, "value"));
	bst313.emplace(Node<int, string>(8, "value"));
	bst313.emplace(Node<int, string>(6, "value"));
	bst313.emplace(Node<int, string>(1, "value"));
	bst313.emplace(Node<int, string>(15, "value"));

	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(10)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(8)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(7)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(18)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(5)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(12)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(1)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(16)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(20)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(3)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(6)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(15)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(14)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(13)->getKey());
	bst313.ascend_printout(bst313.getRoot());
	bst313.deleteNode(bst313.at(2)->getKey());



	BST<int,string> bst314(Node<int, string> (2, "RootVal"));
	bst314.emplace(Node<int, string>(6, "value"));
	bst314.emplace(Node<int, string>(18, "value"));
	bst314.emplace(Node<int, string>(13, "value"));
	bst314.emplace(Node<int, string>(12, "value"));
	bst314.emplace(Node<int, string>(14, "value"));
	bst314.emplace(Node<int, string>(16, "value"));
	bst314.emplace(Node<int, string>(4, "value"));
	bst314.emplace(Node<int, string>(17, "value"));
	bst314.emplace(Node<int, string>(1, "value"));
	bst314.emplace(Node<int, string>(20, "value"));
	bst314.emplace(Node<int, string>(8, "value"));
	bst314.emplace(Node<int, string>(5, "value"));
	bst314.emplace(Node<int, string>(7, "value"));
	bst314.emplace(Node<int, string>(10, "value"));

	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(14)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(12)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(1)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(18)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(20)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(5)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(17)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(16)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(10)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(7)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(2)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(6)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(8)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(13)->getKey());
	bst314.ascend_printout(bst314.getRoot());
	bst314.deleteNode(bst314.at(4)->getKey());



	BST<int,string> bst315(Node<int, string> (18, "RootVal"));
	bst315.emplace(Node<int, string>(14, "value"));
	bst315.emplace(Node<int, string>(9, "value"));
	bst315.emplace(Node<int, string>(13, "value"));
	bst315.emplace(Node<int, string>(20, "value"));
	bst315.emplace(Node<int, string>(1, "value"));
	bst315.emplace(Node<int, string>(12, "value"));
	bst315.emplace(Node<int, string>(17, "value"));
	bst315.emplace(Node<int, string>(16, "value"));
	bst315.emplace(Node<int, string>(15, "value"));
	bst315.emplace(Node<int, string>(2, "value"));
	bst315.emplace(Node<int, string>(5, "value"));

	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(5)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(18)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(20)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(13)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(1)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(9)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(17)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(12)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(2)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(16)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(15)->getKey());
	bst315.ascend_printout(bst315.getRoot());
	bst315.deleteNode(bst315.at(14)->getKey());



	BST<int,string> bst316(Node<int, string> (20, "RootVal"));
	bst316.emplace(Node<int, string>(8, "value"));
	bst316.emplace(Node<int, string>(13, "value"));
	bst316.emplace(Node<int, string>(6, "value"));
	bst316.emplace(Node<int, string>(16, "value"));
	bst316.emplace(Node<int, string>(1, "value"));
	bst316.emplace(Node<int, string>(11, "value"));
	bst316.emplace(Node<int, string>(17, "value"));
	bst316.emplace(Node<int, string>(5, "value"));
	bst316.emplace(Node<int, string>(14, "value"));
	bst316.emplace(Node<int, string>(18, "value"));
	bst316.emplace(Node<int, string>(12, "value"));
	bst316.emplace(Node<int, string>(19, "value"));

	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(17)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(19)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(12)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(14)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(20)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(5)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(1)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(16)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(18)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(13)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(8)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(6)->getKey());
	bst316.ascend_printout(bst316.getRoot());
	bst316.deleteNode(bst316.at(11)->getKey());



	BST<int,string> bst317(Node<int, string> (18, "RootVal"));
	bst317.emplace(Node<int, string>(1, "value"));
	bst317.emplace(Node<int, string>(16, "value"));
	bst317.emplace(Node<int, string>(7, "value"));
	bst317.emplace(Node<int, string>(15, "value"));
	bst317.emplace(Node<int, string>(9, "value"));
	bst317.emplace(Node<int, string>(20, "value"));
	bst317.emplace(Node<int, string>(13, "value"));
	bst317.emplace(Node<int, string>(14, "value"));
	bst317.emplace(Node<int, string>(12, "value"));

	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(18)->getKey());
	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(15)->getKey());
	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(12)->getKey());
	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(7)->getKey());
	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(1)->getKey());
	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(13)->getKey());
	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(16)->getKey());
	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(9)->getKey());
	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(14)->getKey());
	bst317.ascend_printout(bst317.getRoot());
	bst317.deleteNode(bst317.at(20)->getKey());



	BST<int,string> bst318(Node<int, string> (2, "RootVal"));
	bst318.emplace(Node<int, string>(4, "value"));
	bst318.emplace(Node<int, string>(5, "value"));
	bst318.emplace(Node<int, string>(14, "value"));
	bst318.emplace(Node<int, string>(15, "value"));
	bst318.emplace(Node<int, string>(13, "value"));
	bst318.emplace(Node<int, string>(11, "value"));
	bst318.emplace(Node<int, string>(12, "value"));
	bst318.emplace(Node<int, string>(9, "value"));
	bst318.emplace(Node<int, string>(19, "value"));
	bst318.emplace(Node<int, string>(16, "value"));

	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(12)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(5)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(14)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(19)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(9)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(15)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(4)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(2)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(11)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(13)->getKey());
	bst318.ascend_printout(bst318.getRoot());
	bst318.deleteNode(bst318.at(16)->getKey());



	BST<int,string> bst319(Node<int, string> (13, "RootVal"));
	bst319.emplace(Node<int, string>(18, "value"));
	bst319.emplace(Node<int, string>(1, "value"));
	bst319.emplace(Node<int, string>(16, "value"));
	bst319.emplace(Node<int, string>(6, "value"));
	bst319.emplace(Node<int, string>(19, "value"));
	bst319.emplace(Node<int, string>(8, "value"));
	bst319.emplace(Node<int, string>(5, "value"));
	bst319.emplace(Node<int, string>(3, "value"));
	bst319.emplace(Node<int, string>(11, "value"));
	bst319.emplace(Node<int, string>(7, "value"));
	bst319.emplace(Node<int, string>(15, "value"));

	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(11)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(18)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(15)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(1)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(3)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(13)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(19)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(16)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(6)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(8)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(5)->getKey());
	bst319.ascend_printout(bst319.getRoot());
	bst319.deleteNode(bst319.at(7)->getKey());



	BST<int,string> bst320(Node<int, string> (12, "RootVal"));
	bst320.emplace(Node<int, string>(17, "value"));
	bst320.emplace(Node<int, string>(15, "value"));
	bst320.emplace(Node<int, string>(7, "value"));
	bst320.emplace(Node<int, string>(19, "value"));
	bst320.emplace(Node<int, string>(6, "value"));
	bst320.emplace(Node<int, string>(4, "value"));
	bst320.emplace(Node<int, string>(11, "value"));
	bst320.emplace(Node<int, string>(20, "value"));
	bst320.emplace(Node<int, string>(14, "value"));
	bst320.emplace(Node<int, string>(16, "value"));
	bst320.emplace(Node<int, string>(9, "value"));
	bst320.emplace(Node<int, string>(1, "value"));
	bst320.emplace(Node<int, string>(13, "value"));

	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(16)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(11)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(4)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(6)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(20)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(7)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(12)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(13)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(14)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(17)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(19)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(9)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(1)->getKey());
	bst320.ascend_printout(bst320.getRoot());
	bst320.deleteNode(bst320.at(15)->getKey());



	BST<int,string> bst321(Node<int, string> (8, "RootVal"));
	bst321.emplace(Node<int, string>(7, "value"));
	bst321.emplace(Node<int, string>(15, "value"));
	bst321.emplace(Node<int, string>(10, "value"));
	bst321.emplace(Node<int, string>(13, "value"));
	bst321.emplace(Node<int, string>(16, "value"));
	bst321.emplace(Node<int, string>(5, "value"));
	bst321.emplace(Node<int, string>(3, "value"));
	bst321.emplace(Node<int, string>(9, "value"));
	bst321.emplace(Node<int, string>(1, "value"));
	bst321.emplace(Node<int, string>(12, "value"));
	bst321.emplace(Node<int, string>(18, "value"));
	bst321.emplace(Node<int, string>(6, "value"));

	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(9)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(18)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(5)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(10)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(16)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(12)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(15)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(8)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(6)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(7)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(13)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(1)->getKey());
	bst321.ascend_printout(bst321.getRoot());
	bst321.deleteNode(bst321.at(3)->getKey());



	BST<int,string> bst322(Node<int, string> (20, "RootVal"));
	bst322.emplace(Node<int, string>(17, "value"));
	bst322.emplace(Node<int, string>(13, "value"));
	bst322.emplace(Node<int, string>(19, "value"));
	bst322.emplace(Node<int, string>(5, "value"));
	bst322.emplace(Node<int, string>(10, "value"));
	bst322.emplace(Node<int, string>(14, "value"));
	bst322.emplace(Node<int, string>(8, "value"));
	bst322.emplace(Node<int, string>(2, "value"));
	bst322.emplace(Node<int, string>(1, "value"));
	bst322.emplace(Node<int, string>(7, "value"));
	bst322.emplace(Node<int, string>(18, "value"));
	bst322.emplace(Node<int, string>(9, "value"));
	bst322.emplace(Node<int, string>(12, "value"));

	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(7)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(10)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(12)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(20)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(9)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(17)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(1)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(13)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(5)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(18)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(8)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(14)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(2)->getKey());
	bst322.ascend_printout(bst322.getRoot());
	bst322.deleteNode(bst322.at(19)->getKey());



	BST<int,string> bst323(Node<int, string> (6, "RootVal"));
	bst323.emplace(Node<int, string>(11, "value"));
	bst323.emplace(Node<int, string>(16, "value"));
	bst323.emplace(Node<int, string>(7, "value"));
	bst323.emplace(Node<int, string>(3, "value"));
	bst323.emplace(Node<int, string>(15, "value"));
	bst323.emplace(Node<int, string>(13, "value"));
	bst323.emplace(Node<int, string>(4, "value"));
	bst323.emplace(Node<int, string>(5, "value"));
	bst323.emplace(Node<int, string>(18, "value"));
	bst323.emplace(Node<int, string>(1, "value"));
	bst323.emplace(Node<int, string>(17, "value"));

	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(3)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(11)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(7)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(5)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(1)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(17)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(16)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(4)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(15)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(13)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(18)->getKey());
	bst323.ascend_printout(bst323.getRoot());
	bst323.deleteNode(bst323.at(6)->getKey());



	BST<int,string> bst324(Node<int, string> (3, "RootVal"));
	bst324.emplace(Node<int, string>(10, "value"));
	bst324.emplace(Node<int, string>(9, "value"));
	bst324.emplace(Node<int, string>(2, "value"));
	bst324.emplace(Node<int, string>(4, "value"));
	bst324.emplace(Node<int, string>(20, "value"));
	bst324.emplace(Node<int, string>(15, "value"));
	bst324.emplace(Node<int, string>(19, "value"));
	bst324.emplace(Node<int, string>(16, "value"));
	bst324.emplace(Node<int, string>(18, "value"));
	bst324.emplace(Node<int, string>(14, "value"));
	bst324.emplace(Node<int, string>(12, "value"));
	bst324.emplace(Node<int, string>(5, "value"));

	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(19)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(9)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(18)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(16)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(14)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(15)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(10)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(12)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(20)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(4)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(3)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(2)->getKey());
	bst324.ascend_printout(bst324.getRoot());
	bst324.deleteNode(bst324.at(5)->getKey());



	BST<int,string> bst325(Node<int, string> (4, "RootVal"));
	bst325.emplace(Node<int, string>(12, "value"));
	bst325.emplace(Node<int, string>(11, "value"));
	bst325.emplace(Node<int, string>(7, "value"));
	bst325.emplace(Node<int, string>(6, "value"));
	bst325.emplace(Node<int, string>(5, "value"));
	bst325.emplace(Node<int, string>(15, "value"));
	bst325.emplace(Node<int, string>(20, "value"));
	bst325.emplace(Node<int, string>(19, "value"));
	bst325.emplace(Node<int, string>(3, "value"));
	bst325.emplace(Node<int, string>(16, "value"));
	bst325.emplace(Node<int, string>(13, "value"));
	bst325.emplace(Node<int, string>(8, "value"));
	bst325.emplace(Node<int, string>(2, "value"));
	bst325.emplace(Node<int, string>(1, "value"));

	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(6)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(19)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(3)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(5)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(2)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(12)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(7)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(15)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(4)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(20)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(13)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(16)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(8)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(11)->getKey());
	bst325.ascend_printout(bst325.getRoot());
	bst325.deleteNode(bst325.at(1)->getKey());



	BST<int,string> bst326(Node<int, string> (2, "RootVal"));
	bst326.emplace(Node<int, string>(9, "value"));
	bst326.emplace(Node<int, string>(17, "value"));
	bst326.emplace(Node<int, string>(5, "value"));
	bst326.emplace(Node<int, string>(18, "value"));
	bst326.emplace(Node<int, string>(10, "value"));
	bst326.emplace(Node<int, string>(11, "value"));
	bst326.emplace(Node<int, string>(6, "value"));
	bst326.emplace(Node<int, string>(4, "value"));
	bst326.emplace(Node<int, string>(1, "value"));
	bst326.emplace(Node<int, string>(15, "value"));
	bst326.emplace(Node<int, string>(13, "value"));
	bst326.emplace(Node<int, string>(14, "value"));

	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(18)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(10)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(1)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(9)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(14)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(17)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(6)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(5)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(2)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(15)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(11)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(4)->getKey());
	bst326.ascend_printout(bst326.getRoot());
	bst326.deleteNode(bst326.at(13)->getKey());



	BST<int,string> bst327(Node<int, string> (9, "RootVal"));
	bst327.emplace(Node<int, string>(1, "value"));
	bst327.emplace(Node<int, string>(4, "value"));
	bst327.emplace(Node<int, string>(5, "value"));
	bst327.emplace(Node<int, string>(14, "value"));
	bst327.emplace(Node<int, string>(16, "value"));
	bst327.emplace(Node<int, string>(10, "value"));
	bst327.emplace(Node<int, string>(3, "value"));
	bst327.emplace(Node<int, string>(20, "value"));
	bst327.emplace(Node<int, string>(8, "value"));
	bst327.emplace(Node<int, string>(15, "value"));

	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(3)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(10)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(20)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(1)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(8)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(15)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(4)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(14)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(9)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(5)->getKey());
	bst327.ascend_printout(bst327.getRoot());
	bst327.deleteNode(bst327.at(16)->getKey());



	BST<int,string> bst328(Node<int, string> (13, "RootVal"));
	bst328.emplace(Node<int, string>(11, "value"));
	bst328.emplace(Node<int, string>(7, "value"));
	bst328.emplace(Node<int, string>(6, "value"));
	bst328.emplace(Node<int, string>(12, "value"));
	bst328.emplace(Node<int, string>(18, "value"));
	bst328.emplace(Node<int, string>(10, "value"));
	bst328.emplace(Node<int, string>(4, "value"));
	bst328.emplace(Node<int, string>(3, "value"));
	bst328.emplace(Node<int, string>(1, "value"));
	bst328.emplace(Node<int, string>(14, "value"));

	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(13)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(4)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(11)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(3)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(1)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(14)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(10)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(12)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(18)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(6)->getKey());
	bst328.ascend_printout(bst328.getRoot());
	bst328.deleteNode(bst328.at(7)->getKey());



	BST<int,string> bst329(Node<int, string> (18, "RootVal"));
	bst329.emplace(Node<int, string>(19, "value"));
	bst329.emplace(Node<int, string>(13, "value"));
	bst329.emplace(Node<int, string>(11, "value"));
	bst329.emplace(Node<int, string>(16, "value"));
	bst329.emplace(Node<int, string>(14, "value"));
	bst329.emplace(Node<int, string>(5, "value"));
	bst329.emplace(Node<int, string>(3, "value"));
	bst329.emplace(Node<int, string>(6, "value"));
	bst329.emplace(Node<int, string>(1, "value"));
	bst329.emplace(Node<int, string>(9, "value"));
	bst329.emplace(Node<int, string>(7, "value"));
	bst329.emplace(Node<int, string>(12, "value"));
	bst329.emplace(Node<int, string>(4, "value"));

	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(16)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(7)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(13)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(5)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(4)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(12)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(11)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(14)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(9)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(6)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(3)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(19)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(1)->getKey());
	bst329.ascend_printout(bst329.getRoot());
	bst329.deleteNode(bst329.at(18)->getKey());



	BST<int,string> bst330(Node<int, string> (12, "RootVal"));
	bst330.emplace(Node<int, string>(3, "value"));
	bst330.emplace(Node<int, string>(13, "value"));
	bst330.emplace(Node<int, string>(4, "value"));
	bst330.emplace(Node<int, string>(9, "value"));
	bst330.emplace(Node<int, string>(19, "value"));
	bst330.emplace(Node<int, string>(18, "value"));
	bst330.emplace(Node<int, string>(2, "value"));
	bst330.emplace(Node<int, string>(7, "value"));
	bst330.emplace(Node<int, string>(8, "value"));
	bst330.emplace(Node<int, string>(6, "value"));
	bst330.emplace(Node<int, string>(10, "value"));
	bst330.emplace(Node<int, string>(5, "value"));
	bst330.emplace(Node<int, string>(16, "value"));
	bst330.emplace(Node<int, string>(20, "value"));

	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(10)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(8)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(18)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(2)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(6)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(5)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(19)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(16)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(13)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(20)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(3)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(12)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(9)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(4)->getKey());
	bst330.ascend_printout(bst330.getRoot());
	bst330.deleteNode(bst330.at(7)->getKey());



	BST<int,string> bst331(Node<int, string> (4, "RootVal"));
	bst331.emplace(Node<int, string>(18, "value"));
	bst331.emplace(Node<int, string>(17, "value"));
	bst331.emplace(Node<int, string>(9, "value"));
	bst331.emplace(Node<int, string>(5, "value"));
	bst331.emplace(Node<int, string>(8, "value"));
	bst331.emplace(Node<int, string>(20, "value"));
	bst331.emplace(Node<int, string>(2, "value"));
	bst331.emplace(Node<int, string>(19, "value"));
	bst331.emplace(Node<int, string>(11, "value"));
	bst331.emplace(Node<int, string>(15, "value"));

	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(20)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(5)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(18)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(9)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(17)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(2)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(11)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(19)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(15)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(4)->getKey());
	bst331.ascend_printout(bst331.getRoot());
	bst331.deleteNode(bst331.at(8)->getKey());



	BST<int,string> bst332(Node<int, string> (2, "RootVal"));
	bst332.emplace(Node<int, string>(5, "value"));
	bst332.emplace(Node<int, string>(18, "value"));
	bst332.emplace(Node<int, string>(1, "value"));
	bst332.emplace(Node<int, string>(13, "value"));
	bst332.emplace(Node<int, string>(10, "value"));
	bst332.emplace(Node<int, string>(9, "value"));
	bst332.emplace(Node<int, string>(16, "value"));
	bst332.emplace(Node<int, string>(14, "value"));
	bst332.emplace(Node<int, string>(15, "value"));
	bst332.emplace(Node<int, string>(17, "value"));
	bst332.emplace(Node<int, string>(8, "value"));
	bst332.emplace(Node<int, string>(11, "value"));
	bst332.emplace(Node<int, string>(4, "value"));
	bst332.emplace(Node<int, string>(19, "value"));
	bst332.emplace(Node<int, string>(7, "value"));

	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(8)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(13)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(4)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(2)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(10)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(1)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(18)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(19)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(15)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(9)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(7)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(11)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(14)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(16)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(17)->getKey());
	bst332.ascend_printout(bst332.getRoot());
	bst332.deleteNode(bst332.at(5)->getKey());



	BST<int,string> bst333(Node<int, string> (8, "RootVal"));
	bst333.emplace(Node<int, string>(15, "value"));
	bst333.emplace(Node<int, string>(20, "value"));
	bst333.emplace(Node<int, string>(2, "value"));
	bst333.emplace(Node<int, string>(7, "value"));
	bst333.emplace(Node<int, string>(5, "value"));
	bst333.emplace(Node<int, string>(10, "value"));
	bst333.emplace(Node<int, string>(14, "value"));
	bst333.emplace(Node<int, string>(3, "value"));
	bst333.emplace(Node<int, string>(13, "value"));
	bst333.emplace(Node<int, string>(17, "value"));
	bst333.emplace(Node<int, string>(18, "value"));
	bst333.emplace(Node<int, string>(16, "value"));
	bst333.emplace(Node<int, string>(6, "value"));

	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(10)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(8)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(20)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(3)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(2)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(17)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(18)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(16)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(13)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(7)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(14)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(5)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(15)->getKey());
	bst333.ascend_printout(bst333.getRoot());
	bst333.deleteNode(bst333.at(6)->getKey());



	BST<int,string> bst334(Node<int, string> (11, "RootVal"));
	bst334.emplace(Node<int, string>(1, "value"));
	bst334.emplace(Node<int, string>(8, "value"));
	bst334.emplace(Node<int, string>(7, "value"));
	bst334.emplace(Node<int, string>(12, "value"));
	bst334.emplace(Node<int, string>(18, "value"));
	bst334.emplace(Node<int, string>(2, "value"));
	bst334.emplace(Node<int, string>(20, "value"));
	bst334.emplace(Node<int, string>(9, "value"));
	bst334.emplace(Node<int, string>(4, "value"));
	bst334.emplace(Node<int, string>(14, "value"));
	bst334.emplace(Node<int, string>(15, "value"));

	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(2)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(9)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(20)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(14)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(18)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(12)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(1)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(4)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(15)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(11)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(8)->getKey());
	bst334.ascend_printout(bst334.getRoot());
	bst334.deleteNode(bst334.at(7)->getKey());



	BST<int,string> bst335(Node<int, string> (4, "RootVal"));
	bst335.emplace(Node<int, string>(1, "value"));
	bst335.emplace(Node<int, string>(17, "value"));
	bst335.emplace(Node<int, string>(13, "value"));
	bst335.emplace(Node<int, string>(14, "value"));
	bst335.emplace(Node<int, string>(6, "value"));
	bst335.emplace(Node<int, string>(19, "value"));
	bst335.emplace(Node<int, string>(9, "value"));
	bst335.emplace(Node<int, string>(20, "value"));
	bst335.emplace(Node<int, string>(8, "value"));
	bst335.emplace(Node<int, string>(5, "value"));
	bst335.emplace(Node<int, string>(15, "value"));

	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(14)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(6)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(5)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(19)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(20)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(4)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(13)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(15)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(17)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(8)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(9)->getKey());
	bst335.ascend_printout(bst335.getRoot());
	bst335.deleteNode(bst335.at(1)->getKey());



	BST<int,string> bst336(Node<int, string> (4, "RootVal"));
	bst336.emplace(Node<int, string>(3, "value"));
	bst336.emplace(Node<int, string>(5, "value"));
	bst336.emplace(Node<int, string>(2, "value"));
	bst336.emplace(Node<int, string>(20, "value"));
	bst336.emplace(Node<int, string>(7, "value"));
	bst336.emplace(Node<int, string>(10, "value"));
	bst336.emplace(Node<int, string>(13, "value"));
	bst336.emplace(Node<int, string>(11, "value"));
	bst336.emplace(Node<int, string>(9, "value"));
	bst336.emplace(Node<int, string>(17, "value"));
	bst336.emplace(Node<int, string>(1, "value"));

	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(9)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(20)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(5)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(1)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(2)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(7)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(11)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(4)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(13)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(3)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(10)->getKey());
	bst336.ascend_printout(bst336.getRoot());
	bst336.deleteNode(bst336.at(17)->getKey());



	BST<int,string> bst337(Node<int, string> (9, "RootVal"));
	bst337.emplace(Node<int, string>(18, "value"));
	bst337.emplace(Node<int, string>(14, "value"));
	bst337.emplace(Node<int, string>(13, "value"));
	bst337.emplace(Node<int, string>(20, "value"));
	bst337.emplace(Node<int, string>(10, "value"));
	bst337.emplace(Node<int, string>(19, "value"));
	bst337.emplace(Node<int, string>(2, "value"));
	bst337.emplace(Node<int, string>(17, "value"));
	bst337.emplace(Node<int, string>(4, "value"));
	bst337.emplace(Node<int, string>(15, "value"));
	bst337.emplace(Node<int, string>(11, "value"));
	bst337.emplace(Node<int, string>(7, "value"));

	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(13)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(15)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(20)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(2)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(11)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(4)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(17)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(18)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(7)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(14)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(9)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(10)->getKey());
	bst337.ascend_printout(bst337.getRoot());
	bst337.deleteNode(bst337.at(19)->getKey());



	BST<int,string> bst338(Node<int, string> (17, "RootVal"));
	bst338.emplace(Node<int, string>(15, "value"));
	bst338.emplace(Node<int, string>(18, "value"));
	bst338.emplace(Node<int, string>(19, "value"));
	bst338.emplace(Node<int, string>(5, "value"));
	bst338.emplace(Node<int, string>(6, "value"));
	bst338.emplace(Node<int, string>(7, "value"));
	bst338.emplace(Node<int, string>(2, "value"));
	bst338.emplace(Node<int, string>(12, "value"));
	bst338.emplace(Node<int, string>(4, "value"));
	bst338.emplace(Node<int, string>(16, "value"));
	bst338.emplace(Node<int, string>(9, "value"));
	bst338.emplace(Node<int, string>(20, "value"));
	bst338.emplace(Node<int, string>(13, "value"));

	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(7)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(6)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(12)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(19)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(5)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(9)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(2)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(15)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(13)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(16)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(20)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(4)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(18)->getKey());
	bst338.ascend_printout(bst338.getRoot());
	bst338.deleteNode(bst338.at(17)->getKey());



	BST<int,string> bst339(Node<int, string> (7, "RootVal"));
	bst339.emplace(Node<int, string>(14, "value"));
	bst339.emplace(Node<int, string>(5, "value"));
	bst339.emplace(Node<int, string>(17, "value"));
	bst339.emplace(Node<int, string>(11, "value"));
	bst339.emplace(Node<int, string>(10, "value"));
	bst339.emplace(Node<int, string>(15, "value"));
	bst339.emplace(Node<int, string>(16, "value"));
	bst339.emplace(Node<int, string>(20, "value"));
	bst339.emplace(Node<int, string>(18, "value"));
	bst339.emplace(Node<int, string>(13, "value"));

	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(16)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(14)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(18)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(13)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(5)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(17)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(15)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(10)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(11)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(20)->getKey());
	bst339.ascend_printout(bst339.getRoot());
	bst339.deleteNode(bst339.at(7)->getKey());



	BST<int,string> bst340(Node<int, string> (7, "RootVal"));
	bst340.emplace(Node<int, string>(15, "value"));
	bst340.emplace(Node<int, string>(9, "value"));
	bst340.emplace(Node<int, string>(10, "value"));
	bst340.emplace(Node<int, string>(12, "value"));
	bst340.emplace(Node<int, string>(3, "value"));
	bst340.emplace(Node<int, string>(8, "value"));
	bst340.emplace(Node<int, string>(14, "value"));
	bst340.emplace(Node<int, string>(1, "value"));
	bst340.emplace(Node<int, string>(19, "value"));
	bst340.emplace(Node<int, string>(6, "value"));
	bst340.emplace(Node<int, string>(4, "value"));
	bst340.emplace(Node<int, string>(5, "value"));

	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(9)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(4)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(10)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(14)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(1)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(15)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(3)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(6)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(5)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(7)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(19)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(8)->getKey());
	bst340.ascend_printout(bst340.getRoot());
	bst340.deleteNode(bst340.at(12)->getKey());



	BST<int,string> bst341(Node<int, string> (8, "RootVal"));
	bst341.emplace(Node<int, string>(4, "value"));
	bst341.emplace(Node<int, string>(2, "value"));
	bst341.emplace(Node<int, string>(9, "value"));
	bst341.emplace(Node<int, string>(14, "value"));
	bst341.emplace(Node<int, string>(17, "value"));
	bst341.emplace(Node<int, string>(10, "value"));
	bst341.emplace(Node<int, string>(3, "value"));
	bst341.emplace(Node<int, string>(1, "value"));
	bst341.emplace(Node<int, string>(18, "value"));
	bst341.emplace(Node<int, string>(11, "value"));
	bst341.emplace(Node<int, string>(13, "value"));

	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(14)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(18)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(10)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(9)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(3)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(4)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(13)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(11)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(17)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(2)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(1)->getKey());
	bst341.ascend_printout(bst341.getRoot());
	bst341.deleteNode(bst341.at(8)->getKey());



	BST<int,string> bst342(Node<int, string> (11, "RootVal"));
	bst342.emplace(Node<int, string>(10, "value"));
	bst342.emplace(Node<int, string>(1, "value"));
	bst342.emplace(Node<int, string>(12, "value"));
	bst342.emplace(Node<int, string>(20, "value"));
	bst342.emplace(Node<int, string>(8, "value"));
	bst342.emplace(Node<int, string>(16, "value"));
	bst342.emplace(Node<int, string>(13, "value"));
	bst342.emplace(Node<int, string>(7, "value"));
	bst342.emplace(Node<int, string>(17, "value"));
	bst342.emplace(Node<int, string>(19, "value"));
	bst342.emplace(Node<int, string>(18, "value"));
	bst342.emplace(Node<int, string>(14, "value"));

	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(7)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(17)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(10)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(16)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(11)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(12)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(1)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(19)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(18)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(14)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(8)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(20)->getKey());
	bst342.ascend_printout(bst342.getRoot());
	bst342.deleteNode(bst342.at(13)->getKey());



	BST<int,string> bst343(Node<int, string> (5, "RootVal"));
	bst343.emplace(Node<int, string>(16, "value"));
	bst343.emplace(Node<int, string>(20, "value"));
	bst343.emplace(Node<int, string>(11, "value"));
	bst343.emplace(Node<int, string>(9, "value"));
	bst343.emplace(Node<int, string>(2, "value"));
	bst343.emplace(Node<int, string>(6, "value"));
	bst343.emplace(Node<int, string>(14, "value"));
	bst343.emplace(Node<int, string>(1, "value"));
	bst343.emplace(Node<int, string>(13, "value"));
	bst343.emplace(Node<int, string>(8, "value"));
	bst343.emplace(Node<int, string>(19, "value"));
	bst343.emplace(Node<int, string>(17, "value"));

	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(16)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(9)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(6)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(11)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(5)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(13)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(2)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(17)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(8)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(1)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(14)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(20)->getKey());
	bst343.ascend_printout(bst343.getRoot());
	bst343.deleteNode(bst343.at(19)->getKey());



	BST<int,string> bst344(Node<int, string> (20, "RootVal"));
	bst344.emplace(Node<int, string>(10, "value"));
	bst344.emplace(Node<int, string>(1, "value"));
	bst344.emplace(Node<int, string>(11, "value"));
	bst344.emplace(Node<int, string>(16, "value"));
	bst344.emplace(Node<int, string>(2, "value"));
	bst344.emplace(Node<int, string>(6, "value"));
	bst344.emplace(Node<int, string>(19, "value"));
	bst344.emplace(Node<int, string>(14, "value"));
	bst344.emplace(Node<int, string>(18, "value"));
	bst344.emplace(Node<int, string>(5, "value"));
	bst344.emplace(Node<int, string>(4, "value"));
	bst344.emplace(Node<int, string>(15, "value"));

	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(15)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(1)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(20)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(16)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(6)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(18)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(5)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(10)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(14)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(2)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(11)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(4)->getKey());
	bst344.ascend_printout(bst344.getRoot());
	bst344.deleteNode(bst344.at(19)->getKey());



	BST<int,string> bst345(Node<int, string> (11, "RootVal"));
	bst345.emplace(Node<int, string>(16, "value"));
	bst345.emplace(Node<int, string>(1, "value"));
	bst345.emplace(Node<int, string>(20, "value"));
	bst345.emplace(Node<int, string>(19, "value"));
	bst345.emplace(Node<int, string>(8, "value"));
	bst345.emplace(Node<int, string>(12, "value"));
	bst345.emplace(Node<int, string>(15, "value"));
	bst345.emplace(Node<int, string>(4, "value"));
	bst345.emplace(Node<int, string>(5, "value"));
	bst345.emplace(Node<int, string>(6, "value"));
	bst345.emplace(Node<int, string>(10, "value"));

	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(8)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(4)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(16)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(6)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(12)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(5)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(11)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(20)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(10)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(15)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(1)->getKey());
	bst345.ascend_printout(bst345.getRoot());
	bst345.deleteNode(bst345.at(19)->getKey());



	BST<int,string> bst346(Node<int, string> (13, "RootVal"));
	bst346.emplace(Node<int, string>(4, "value"));
	bst346.emplace(Node<int, string>(2, "value"));
	bst346.emplace(Node<int, string>(19, "value"));
	bst346.emplace(Node<int, string>(9, "value"));
	bst346.emplace(Node<int, string>(7, "value"));
	bst346.emplace(Node<int, string>(8, "value"));
	bst346.emplace(Node<int, string>(10, "value"));
	bst346.emplace(Node<int, string>(1, "value"));
	bst346.emplace(Node<int, string>(20, "value"));
	bst346.emplace(Node<int, string>(5, "value"));
	bst346.emplace(Node<int, string>(12, "value"));
	bst346.emplace(Node<int, string>(16, "value"));
	bst346.emplace(Node<int, string>(6, "value"));

	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(4)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(9)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(10)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(20)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(2)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(19)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(6)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(12)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(5)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(1)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(7)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(8)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(13)->getKey());
	bst346.ascend_printout(bst346.getRoot());
	bst346.deleteNode(bst346.at(16)->getKey());



	BST<int,string> bst347(Node<int, string> (4, "RootVal"));
	bst347.emplace(Node<int, string>(18, "value"));
	bst347.emplace(Node<int, string>(10, "value"));
	bst347.emplace(Node<int, string>(11, "value"));
	bst347.emplace(Node<int, string>(7, "value"));
	bst347.emplace(Node<int, string>(14, "value"));
	bst347.emplace(Node<int, string>(5, "value"));
	bst347.emplace(Node<int, string>(15, "value"));
	bst347.emplace(Node<int, string>(12, "value"));
	bst347.emplace(Node<int, string>(3, "value"));
	bst347.emplace(Node<int, string>(8, "value"));

	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(4)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(18)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(8)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(14)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(3)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(7)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(12)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(11)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(10)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(15)->getKey());
	bst347.ascend_printout(bst347.getRoot());
	bst347.deleteNode(bst347.at(5)->getKey());



	BST<int,string> bst348(Node<int, string> (10, "RootVal"));
	bst348.emplace(Node<int, string>(15, "value"));
	bst348.emplace(Node<int, string>(3, "value"));
	bst348.emplace(Node<int, string>(4, "value"));
	bst348.emplace(Node<int, string>(20, "value"));
	bst348.emplace(Node<int, string>(17, "value"));
	bst348.emplace(Node<int, string>(8, "value"));
	bst348.emplace(Node<int, string>(1, "value"));
	bst348.emplace(Node<int, string>(14, "value"));
	bst348.emplace(Node<int, string>(7, "value"));
	bst348.emplace(Node<int, string>(2, "value"));
	bst348.emplace(Node<int, string>(16, "value"));
	bst348.emplace(Node<int, string>(5, "value"));

	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(10)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(4)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(3)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(8)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(14)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(1)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(5)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(20)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(2)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(7)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(17)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(15)->getKey());
	bst348.ascend_printout(bst348.getRoot());
	bst348.deleteNode(bst348.at(16)->getKey());



	BST<int,string> bst349(Node<int, string> (18, "RootVal"));
	bst349.emplace(Node<int, string>(13, "value"));
	bst349.emplace(Node<int, string>(5, "value"));
	bst349.emplace(Node<int, string>(16, "value"));
	bst349.emplace(Node<int, string>(9, "value"));
	bst349.emplace(Node<int, string>(11, "value"));
	bst349.emplace(Node<int, string>(19, "value"));
	bst349.emplace(Node<int, string>(15, "value"));
	bst349.emplace(Node<int, string>(3, "value"));
	bst349.emplace(Node<int, string>(8, "value"));
	bst349.emplace(Node<int, string>(1, "value"));
	bst349.emplace(Node<int, string>(10, "value"));

	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(19)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(18)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(1)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(13)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(8)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(3)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(11)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(16)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(9)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(5)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(15)->getKey());
	bst349.ascend_printout(bst349.getRoot());
	bst349.deleteNode(bst349.at(10)->getKey());



	BST<int,string> bst350(Node<int, string> (2, "RootVal"));
	bst350.emplace(Node<int, string>(18, "value"));
	bst350.emplace(Node<int, string>(14, "value"));
	bst350.emplace(Node<int, string>(3, "value"));
	bst350.emplace(Node<int, string>(10, "value"));
	bst350.emplace(Node<int, string>(8, "value"));
	bst350.emplace(Node<int, string>(12, "value"));
	bst350.emplace(Node<int, string>(16, "value"));
	bst350.emplace(Node<int, string>(15, "value"));
	bst350.emplace(Node<int, string>(11, "value"));
	bst350.emplace(Node<int, string>(4, "value"));

	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(12)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(8)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(2)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(11)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(15)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(3)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(14)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(18)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(4)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(10)->getKey());
	bst350.ascend_printout(bst350.getRoot());
	bst350.deleteNode(bst350.at(16)->getKey());



	BST<int,string> bst351(Node<int, string> (5, "RootVal"));
	bst351.emplace(Node<int, string>(17, "value"));
	bst351.emplace(Node<int, string>(9, "value"));
	bst351.emplace(Node<int, string>(11, "value"));
	bst351.emplace(Node<int, string>(10, "value"));
	bst351.emplace(Node<int, string>(3, "value"));
	bst351.emplace(Node<int, string>(14, "value"));
	bst351.emplace(Node<int, string>(2, "value"));
	bst351.emplace(Node<int, string>(13, "value"));
	bst351.emplace(Node<int, string>(7, "value"));
	bst351.emplace(Node<int, string>(1, "value"));
	bst351.emplace(Node<int, string>(8, "value"));
	bst351.emplace(Node<int, string>(6, "value"));
	bst351.emplace(Node<int, string>(12, "value"));
	bst351.emplace(Node<int, string>(18, "value"));

	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(9)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(18)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(12)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(11)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(2)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(14)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(6)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(17)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(5)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(13)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(10)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(3)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(1)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(7)->getKey());
	bst351.ascend_printout(bst351.getRoot());
	bst351.deleteNode(bst351.at(8)->getKey());



	BST<int,string> bst352(Node<int, string> (20, "RootVal"));
	bst352.emplace(Node<int, string>(14, "value"));
	bst352.emplace(Node<int, string>(17, "value"));
	bst352.emplace(Node<int, string>(10, "value"));
	bst352.emplace(Node<int, string>(1, "value"));
	bst352.emplace(Node<int, string>(19, "value"));
	bst352.emplace(Node<int, string>(7, "value"));
	bst352.emplace(Node<int, string>(12, "value"));
	bst352.emplace(Node<int, string>(6, "value"));
	bst352.emplace(Node<int, string>(9, "value"));
	bst352.emplace(Node<int, string>(2, "value"));
	bst352.emplace(Node<int, string>(13, "value"));
	bst352.emplace(Node<int, string>(5, "value"));

	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(17)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(6)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(13)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(2)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(10)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(7)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(9)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(5)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(12)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(1)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(19)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(14)->getKey());
	bst352.ascend_printout(bst352.getRoot());
	bst352.deleteNode(bst352.at(20)->getKey());



	BST<int,string> bst353(Node<int, string> (17, "RootVal"));
	bst353.emplace(Node<int, string>(6, "value"));
	bst353.emplace(Node<int, string>(14, "value"));
	bst353.emplace(Node<int, string>(19, "value"));
	bst353.emplace(Node<int, string>(10, "value"));
	bst353.emplace(Node<int, string>(12, "value"));
	bst353.emplace(Node<int, string>(15, "value"));
	bst353.emplace(Node<int, string>(7, "value"));
	bst353.emplace(Node<int, string>(11, "value"));
	bst353.emplace(Node<int, string>(3, "value"));
	bst353.emplace(Node<int, string>(18, "value"));

	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(12)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(15)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(10)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(7)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(14)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(17)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(18)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(19)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(3)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(11)->getKey());
	bst353.ascend_printout(bst353.getRoot());
	bst353.deleteNode(bst353.at(6)->getKey());



	BST<int,string> bst354(Node<int, string> (9, "RootVal"));
	bst354.emplace(Node<int, string>(15, "value"));
	bst354.emplace(Node<int, string>(8, "value"));
	bst354.emplace(Node<int, string>(11, "value"));
	bst354.emplace(Node<int, string>(7, "value"));
	bst354.emplace(Node<int, string>(10, "value"));
	bst354.emplace(Node<int, string>(2, "value"));
	bst354.emplace(Node<int, string>(17, "value"));
	bst354.emplace(Node<int, string>(6, "value"));
	bst354.emplace(Node<int, string>(4, "value"));
	bst354.emplace(Node<int, string>(5, "value"));
	bst354.emplace(Node<int, string>(14, "value"));
	bst354.emplace(Node<int, string>(3, "value"));
	bst354.emplace(Node<int, string>(20, "value"));
	bst354.emplace(Node<int, string>(12, "value"));

	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(9)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(10)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(15)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(3)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(12)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(2)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(14)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(20)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(5)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(11)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(7)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(6)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(17)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(4)->getKey());
	bst354.ascend_printout(bst354.getRoot());
	bst354.deleteNode(bst354.at(8)->getKey());



	BST<int,string> bst355(Node<int, string> (8, "RootVal"));
	bst355.emplace(Node<int, string>(6, "value"));
	bst355.emplace(Node<int, string>(11, "value"));
	bst355.emplace(Node<int, string>(10, "value"));
	bst355.emplace(Node<int, string>(19, "value"));
	bst355.emplace(Node<int, string>(7, "value"));
	bst355.emplace(Node<int, string>(9, "value"));
	bst355.emplace(Node<int, string>(20, "value"));
	bst355.emplace(Node<int, string>(1, "value"));
	bst355.emplace(Node<int, string>(4, "value"));
	bst355.emplace(Node<int, string>(18, "value"));
	bst355.emplace(Node<int, string>(16, "value"));
	bst355.emplace(Node<int, string>(14, "value"));

	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(19)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(18)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(20)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(1)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(11)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(9)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(14)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(10)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(6)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(7)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(4)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(16)->getKey());
	bst355.ascend_printout(bst355.getRoot());
	bst355.deleteNode(bst355.at(8)->getKey());



	BST<int,string> bst356(Node<int, string> (6, "RootVal"));
	bst356.emplace(Node<int, string>(9, "value"));
	bst356.emplace(Node<int, string>(10, "value"));
	bst356.emplace(Node<int, string>(19, "value"));
	bst356.emplace(Node<int, string>(7, "value"));
	bst356.emplace(Node<int, string>(8, "value"));
	bst356.emplace(Node<int, string>(20, "value"));
	bst356.emplace(Node<int, string>(16, "value"));
	bst356.emplace(Node<int, string>(18, "value"));
	bst356.emplace(Node<int, string>(12, "value"));
	bst356.emplace(Node<int, string>(13, "value"));
	bst356.emplace(Node<int, string>(2, "value"));

	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(18)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(9)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(10)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(2)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(19)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(20)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(8)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(12)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(6)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(16)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(13)->getKey());
	bst356.ascend_printout(bst356.getRoot());
	bst356.deleteNode(bst356.at(7)->getKey());



	BST<int,string> bst357(Node<int, string> (8, "RootVal"));
	bst357.emplace(Node<int, string>(7, "value"));
	bst357.emplace(Node<int, string>(4, "value"));
	bst357.emplace(Node<int, string>(6, "value"));
	bst357.emplace(Node<int, string>(17, "value"));
	bst357.emplace(Node<int, string>(14, "value"));
	bst357.emplace(Node<int, string>(2, "value"));
	bst357.emplace(Node<int, string>(5, "value"));
	bst357.emplace(Node<int, string>(9, "value"));
	bst357.emplace(Node<int, string>(18, "value"));
	bst357.emplace(Node<int, string>(10, "value"));

	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(7)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(6)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(14)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(5)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(8)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(2)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(18)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(4)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(10)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(17)->getKey());
	bst357.ascend_printout(bst357.getRoot());
	bst357.deleteNode(bst357.at(9)->getKey());



	BST<int,string> bst358(Node<int, string> (2, "RootVal"));
	bst358.emplace(Node<int, string>(1, "value"));
	bst358.emplace(Node<int, string>(13, "value"));
	bst358.emplace(Node<int, string>(18, "value"));
	bst358.emplace(Node<int, string>(11, "value"));
	bst358.emplace(Node<int, string>(4, "value"));
	bst358.emplace(Node<int, string>(19, "value"));
	bst358.emplace(Node<int, string>(3, "value"));
	bst358.emplace(Node<int, string>(20, "value"));
	bst358.emplace(Node<int, string>(17, "value"));
	bst358.emplace(Node<int, string>(9, "value"));
	bst358.emplace(Node<int, string>(12, "value"));

	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(12)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(11)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(13)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(9)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(4)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(1)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(18)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(19)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(17)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(2)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(20)->getKey());
	bst358.ascend_printout(bst358.getRoot());
	bst358.deleteNode(bst358.at(3)->getKey());



	BST<int,string> bst359(Node<int, string> (2, "RootVal"));
	bst359.emplace(Node<int, string>(13, "value"));
	bst359.emplace(Node<int, string>(6, "value"));
	bst359.emplace(Node<int, string>(5, "value"));
	bst359.emplace(Node<int, string>(9, "value"));
	bst359.emplace(Node<int, string>(8, "value"));
	bst359.emplace(Node<int, string>(19, "value"));
	bst359.emplace(Node<int, string>(7, "value"));
	bst359.emplace(Node<int, string>(17, "value"));
	bst359.emplace(Node<int, string>(20, "value"));
	bst359.emplace(Node<int, string>(16, "value"));

	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(6)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(17)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(13)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(20)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(16)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(5)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(8)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(19)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(9)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(7)->getKey());
	bst359.ascend_printout(bst359.getRoot());
	bst359.deleteNode(bst359.at(2)->getKey());



	BST<int,string> bst360(Node<int, string> (1, "RootVal"));
	bst360.emplace(Node<int, string>(2, "value"));
	bst360.emplace(Node<int, string>(4, "value"));
	bst360.emplace(Node<int, string>(10, "value"));
	bst360.emplace(Node<int, string>(19, "value"));
	bst360.emplace(Node<int, string>(7, "value"));
	bst360.emplace(Node<int, string>(15, "value"));
	bst360.emplace(Node<int, string>(6, "value"));
	bst360.emplace(Node<int, string>(12, "value"));
	bst360.emplace(Node<int, string>(20, "value"));
	bst360.emplace(Node<int, string>(13, "value"));
	bst360.emplace(Node<int, string>(17, "value"));
	bst360.emplace(Node<int, string>(8, "value"));

	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(7)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(15)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(4)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(1)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(12)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(6)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(17)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(13)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(19)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(20)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(2)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(10)->getKey());
	bst360.ascend_printout(bst360.getRoot());
	bst360.deleteNode(bst360.at(8)->getKey());



	BST<int,string> bst361(Node<int, string> (6, "RootVal"));
	bst361.emplace(Node<int, string>(1, "value"));
	bst361.emplace(Node<int, string>(18, "value"));
	bst361.emplace(Node<int, string>(17, "value"));
	bst361.emplace(Node<int, string>(12, "value"));
	bst361.emplace(Node<int, string>(19, "value"));
	bst361.emplace(Node<int, string>(11, "value"));
	bst361.emplace(Node<int, string>(16, "value"));
	bst361.emplace(Node<int, string>(7, "value"));
	bst361.emplace(Node<int, string>(3, "value"));
	bst361.emplace(Node<int, string>(9, "value"));
	bst361.emplace(Node<int, string>(10, "value"));
	bst361.emplace(Node<int, string>(2, "value"));

	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(3)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(12)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(10)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(19)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(17)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(11)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(2)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(7)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(6)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(16)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(9)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(18)->getKey());
	bst361.ascend_printout(bst361.getRoot());
	bst361.deleteNode(bst361.at(1)->getKey());



	BST<int,string> bst362(Node<int, string> (14, "RootVal"));
	bst362.emplace(Node<int, string>(2, "value"));
	bst362.emplace(Node<int, string>(12, "value"));
	bst362.emplace(Node<int, string>(18, "value"));
	bst362.emplace(Node<int, string>(9, "value"));
	bst362.emplace(Node<int, string>(17, "value"));
	bst362.emplace(Node<int, string>(16, "value"));
	bst362.emplace(Node<int, string>(4, "value"));
	bst362.emplace(Node<int, string>(13, "value"));
	bst362.emplace(Node<int, string>(6, "value"));
	bst362.emplace(Node<int, string>(10, "value"));
	bst362.emplace(Node<int, string>(1, "value"));

	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(13)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(4)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(14)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(9)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(1)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(2)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(17)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(12)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(18)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(10)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(6)->getKey());
	bst362.ascend_printout(bst362.getRoot());
	bst362.deleteNode(bst362.at(16)->getKey());



	BST<int,string> bst363(Node<int, string> (19, "RootVal"));
	bst363.emplace(Node<int, string>(14, "value"));
	bst363.emplace(Node<int, string>(4, "value"));
	bst363.emplace(Node<int, string>(10, "value"));
	bst363.emplace(Node<int, string>(3, "value"));
	bst363.emplace(Node<int, string>(5, "value"));
	bst363.emplace(Node<int, string>(8, "value"));
	bst363.emplace(Node<int, string>(20, "value"));
	bst363.emplace(Node<int, string>(15, "value"));
	bst363.emplace(Node<int, string>(7, "value"));

	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(20)->getKey());
	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(8)->getKey());
	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(19)->getKey());
	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(10)->getKey());
	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(7)->getKey());
	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(5)->getKey());
	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(4)->getKey());
	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(15)->getKey());
	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(3)->getKey());
	bst363.ascend_printout(bst363.getRoot());
	bst363.deleteNode(bst363.at(14)->getKey());



	BST<int,string> bst364(Node<int, string> (5, "RootVal"));
	bst364.emplace(Node<int, string>(17, "value"));
	bst364.emplace(Node<int, string>(4, "value"));
	bst364.emplace(Node<int, string>(16, "value"));
	bst364.emplace(Node<int, string>(8, "value"));
	bst364.emplace(Node<int, string>(9, "value"));
	bst364.emplace(Node<int, string>(14, "value"));
	bst364.emplace(Node<int, string>(6, "value"));
	bst364.emplace(Node<int, string>(1, "value"));
	bst364.emplace(Node<int, string>(15, "value"));
	bst364.emplace(Node<int, string>(12, "value"));
	bst364.emplace(Node<int, string>(20, "value"));
	bst364.emplace(Node<int, string>(11, "value"));
	bst364.emplace(Node<int, string>(2, "value"));
	bst364.emplace(Node<int, string>(18, "value"));
	bst364.emplace(Node<int, string>(19, "value"));

	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(15)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(8)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(18)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(4)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(14)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(9)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(1)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(2)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(19)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(20)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(17)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(11)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(12)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(16)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(6)->getKey());
	bst364.ascend_printout(bst364.getRoot());
	bst364.deleteNode(bst364.at(5)->getKey());



	BST<int,string> bst365(Node<int, string> (11, "RootVal"));
	bst365.emplace(Node<int, string>(3, "value"));
	bst365.emplace(Node<int, string>(18, "value"));
	bst365.emplace(Node<int, string>(9, "value"));
	bst365.emplace(Node<int, string>(5, "value"));
	bst365.emplace(Node<int, string>(17, "value"));
	bst365.emplace(Node<int, string>(10, "value"));
	bst365.emplace(Node<int, string>(2, "value"));
	bst365.emplace(Node<int, string>(1, "value"));
	bst365.emplace(Node<int, string>(4, "value"));
	bst365.emplace(Node<int, string>(6, "value"));
	bst365.emplace(Node<int, string>(14, "value"));
	bst365.emplace(Node<int, string>(12, "value"));

	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(5)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(4)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(12)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(3)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(2)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(6)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(17)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(9)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(11)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(10)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(14)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(1)->getKey());
	bst365.ascend_printout(bst365.getRoot());
	bst365.deleteNode(bst365.at(18)->getKey());



	BST<int,string> bst366(Node<int, string> (14, "RootVal"));
	bst366.emplace(Node<int, string>(5, "value"));
	bst366.emplace(Node<int, string>(9, "value"));
	bst366.emplace(Node<int, string>(8, "value"));
	bst366.emplace(Node<int, string>(17, "value"));
	bst366.emplace(Node<int, string>(20, "value"));
	bst366.emplace(Node<int, string>(2, "value"));
	bst366.emplace(Node<int, string>(11, "value"));
	bst366.emplace(Node<int, string>(16, "value"));
	bst366.emplace(Node<int, string>(4, "value"));
	bst366.emplace(Node<int, string>(6, "value"));
	bst366.emplace(Node<int, string>(19, "value"));

	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(4)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(16)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(8)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(19)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(6)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(5)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(2)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(20)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(9)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(14)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(17)->getKey());
	bst366.ascend_printout(bst366.getRoot());
	bst366.deleteNode(bst366.at(11)->getKey());



	BST<int,string> bst367(Node<int, string> (1, "RootVal"));
	bst367.emplace(Node<int, string>(13, "value"));
	bst367.emplace(Node<int, string>(2, "value"));
	bst367.emplace(Node<int, string>(4, "value"));
	bst367.emplace(Node<int, string>(18, "value"));
	bst367.emplace(Node<int, string>(15, "value"));
	bst367.emplace(Node<int, string>(3, "value"));
	bst367.emplace(Node<int, string>(19, "value"));
	bst367.emplace(Node<int, string>(8, "value"));
	bst367.emplace(Node<int, string>(11, "value"));
	bst367.emplace(Node<int, string>(10, "value"));
	bst367.emplace(Node<int, string>(20, "value"));
	bst367.emplace(Node<int, string>(5, "value"));

	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(3)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(19)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(5)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(13)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(15)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(2)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(18)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(10)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(1)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(4)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(11)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(8)->getKey());
	bst367.ascend_printout(bst367.getRoot());
	bst367.deleteNode(bst367.at(20)->getKey());



	BST<int,string> bst368(Node<int, string> (18, "RootVal"));
	bst368.emplace(Node<int, string>(19, "value"));
	bst368.emplace(Node<int, string>(6, "value"));
	bst368.emplace(Node<int, string>(15, "value"));
	bst368.emplace(Node<int, string>(8, "value"));
	bst368.emplace(Node<int, string>(7, "value"));
	bst368.emplace(Node<int, string>(12, "value"));
	bst368.emplace(Node<int, string>(20, "value"));
	bst368.emplace(Node<int, string>(1, "value"));
	bst368.emplace(Node<int, string>(17, "value"));
	bst368.emplace(Node<int, string>(13, "value"));
	bst368.emplace(Node<int, string>(16, "value"));
	bst368.emplace(Node<int, string>(5, "value"));
	bst368.emplace(Node<int, string>(2, "value"));

	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(15)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(8)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(2)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(1)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(18)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(13)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(16)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(20)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(7)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(12)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(6)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(19)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(5)->getKey());
	bst368.ascend_printout(bst368.getRoot());
	bst368.deleteNode(bst368.at(17)->getKey());



	BST<int,string> bst369(Node<int, string> (2, "RootVal"));
	bst369.emplace(Node<int, string>(10, "value"));
	bst369.emplace(Node<int, string>(17, "value"));
	bst369.emplace(Node<int, string>(19, "value"));
	bst369.emplace(Node<int, string>(7, "value"));
	bst369.emplace(Node<int, string>(6, "value"));
	bst369.emplace(Node<int, string>(4, "value"));
	bst369.emplace(Node<int, string>(16, "value"));
	bst369.emplace(Node<int, string>(8, "value"));
	bst369.emplace(Node<int, string>(15, "value"));
	bst369.emplace(Node<int, string>(3, "value"));
	bst369.emplace(Node<int, string>(13, "value"));
	bst369.emplace(Node<int, string>(18, "value"));

	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(19)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(6)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(8)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(4)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(16)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(3)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(17)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(7)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(2)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(15)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(13)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(18)->getKey());
	bst369.ascend_printout(bst369.getRoot());
	bst369.deleteNode(bst369.at(10)->getKey());



	BST<int,string> bst370(Node<int, string> (14, "RootVal"));
	bst370.emplace(Node<int, string>(5, "value"));
	bst370.emplace(Node<int, string>(4, "value"));
	bst370.emplace(Node<int, string>(6, "value"));
	bst370.emplace(Node<int, string>(13, "value"));
	bst370.emplace(Node<int, string>(18, "value"));
	bst370.emplace(Node<int, string>(7, "value"));
	bst370.emplace(Node<int, string>(15, "value"));
	bst370.emplace(Node<int, string>(16, "value"));
	bst370.emplace(Node<int, string>(3, "value"));
	bst370.emplace(Node<int, string>(20, "value"));
	bst370.emplace(Node<int, string>(8, "value"));

	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(7)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(18)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(5)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(8)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(14)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(4)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(13)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(15)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(6)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(3)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(16)->getKey());
	bst370.ascend_printout(bst370.getRoot());
	bst370.deleteNode(bst370.at(20)->getKey());



	BST<int,string> bst371(Node<int, string> (9, "RootVal"));
	bst371.emplace(Node<int, string>(14, "value"));
	bst371.emplace(Node<int, string>(2, "value"));
	bst371.emplace(Node<int, string>(11, "value"));
	bst371.emplace(Node<int, string>(20, "value"));
	bst371.emplace(Node<int, string>(19, "value"));
	bst371.emplace(Node<int, string>(13, "value"));
	bst371.emplace(Node<int, string>(18, "value"));
	bst371.emplace(Node<int, string>(6, "value"));
	bst371.emplace(Node<int, string>(7, "value"));
	bst371.emplace(Node<int, string>(8, "value"));
	bst371.emplace(Node<int, string>(16, "value"));
	bst371.emplace(Node<int, string>(17, "value"));

	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(16)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(7)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(8)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(20)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(18)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(9)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(13)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(6)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(2)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(19)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(11)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(17)->getKey());
	bst371.ascend_printout(bst371.getRoot());
	bst371.deleteNode(bst371.at(14)->getKey());



	BST<int,string> bst372(Node<int, string> (4, "RootVal"));
	bst372.emplace(Node<int, string>(3, "value"));
	bst372.emplace(Node<int, string>(10, "value"));
	bst372.emplace(Node<int, string>(19, "value"));
	bst372.emplace(Node<int, string>(7, "value"));
	bst372.emplace(Node<int, string>(1, "value"));
	bst372.emplace(Node<int, string>(20, "value"));
	bst372.emplace(Node<int, string>(5, "value"));
	bst372.emplace(Node<int, string>(13, "value"));
	bst372.emplace(Node<int, string>(16, "value"));
	bst372.emplace(Node<int, string>(17, "value"));
	bst372.emplace(Node<int, string>(9, "value"));

	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(13)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(10)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(3)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(4)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(1)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(20)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(5)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(9)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(19)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(17)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(16)->getKey());
	bst372.ascend_printout(bst372.getRoot());
	bst372.deleteNode(bst372.at(7)->getKey());



	BST<int,string> bst373(Node<int, string> (5, "RootVal"));
	bst373.emplace(Node<int, string>(11, "value"));
	bst373.emplace(Node<int, string>(19, "value"));
	bst373.emplace(Node<int, string>(18, "value"));
	bst373.emplace(Node<int, string>(10, "value"));
	bst373.emplace(Node<int, string>(20, "value"));
	bst373.emplace(Node<int, string>(17, "value"));
	bst373.emplace(Node<int, string>(15, "value"));
	bst373.emplace(Node<int, string>(12, "value"));
	bst373.emplace(Node<int, string>(3, "value"));
	bst373.emplace(Node<int, string>(9, "value"));
	bst373.emplace(Node<int, string>(1, "value"));
	bst373.emplace(Node<int, string>(13, "value"));
	bst373.emplace(Node<int, string>(7, "value"));

	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(7)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(18)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(17)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(19)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(1)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(3)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(11)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(9)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(12)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(20)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(15)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(5)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(10)->getKey());
	bst373.ascend_printout(bst373.getRoot());
	bst373.deleteNode(bst373.at(13)->getKey());



	BST<int,string> bst374(Node<int, string> (3, "RootVal"));
	bst374.emplace(Node<int, string>(1, "value"));
	bst374.emplace(Node<int, string>(10, "value"));
	bst374.emplace(Node<int, string>(6, "value"));
	bst374.emplace(Node<int, string>(2, "value"));
	bst374.emplace(Node<int, string>(11, "value"));
	bst374.emplace(Node<int, string>(20, "value"));
	bst374.emplace(Node<int, string>(16, "value"));
	bst374.emplace(Node<int, string>(14, "value"));
	bst374.emplace(Node<int, string>(12, "value"));
	bst374.emplace(Node<int, string>(4, "value"));
	bst374.emplace(Node<int, string>(7, "value"));
	bst374.emplace(Node<int, string>(13, "value"));

	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(6)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(13)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(2)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(4)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(7)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(11)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(10)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(1)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(20)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(3)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(12)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(16)->getKey());
	bst374.ascend_printout(bst374.getRoot());
	bst374.deleteNode(bst374.at(14)->getKey());



	BST<int,string> bst375(Node<int, string> (9, "RootVal"));
	bst375.emplace(Node<int, string>(17, "value"));
	bst375.emplace(Node<int, string>(6, "value"));
	bst375.emplace(Node<int, string>(3, "value"));
	bst375.emplace(Node<int, string>(4, "value"));
	bst375.emplace(Node<int, string>(2, "value"));
	bst375.emplace(Node<int, string>(1, "value"));
	bst375.emplace(Node<int, string>(5, "value"));
	bst375.emplace(Node<int, string>(8, "value"));
	bst375.emplace(Node<int, string>(7, "value"));
	bst375.emplace(Node<int, string>(13, "value"));

	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(2)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(4)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(8)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(9)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(17)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(3)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(1)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(5)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(13)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(6)->getKey());
	bst375.ascend_printout(bst375.getRoot());
	bst375.deleteNode(bst375.at(7)->getKey());



	BST<int,string> bst376(Node<int, string> (2, "RootVal"));
	bst376.emplace(Node<int, string>(5, "value"));
	bst376.emplace(Node<int, string>(17, "value"));
	bst376.emplace(Node<int, string>(9, "value"));
	bst376.emplace(Node<int, string>(10, "value"));
	bst376.emplace(Node<int, string>(7, "value"));
	bst376.emplace(Node<int, string>(19, "value"));
	bst376.emplace(Node<int, string>(20, "value"));
	bst376.emplace(Node<int, string>(13, "value"));
	bst376.emplace(Node<int, string>(11, "value"));
	bst376.emplace(Node<int, string>(14, "value"));
	bst376.emplace(Node<int, string>(3, "value"));

	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(5)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(7)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(10)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(3)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(11)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(20)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(9)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(2)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(17)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(14)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(19)->getKey());
	bst376.ascend_printout(bst376.getRoot());
	bst376.deleteNode(bst376.at(13)->getKey());



	BST<int,string> bst377(Node<int, string> (9, "RootVal"));
	bst377.emplace(Node<int, string>(3, "value"));
	bst377.emplace(Node<int, string>(1, "value"));
	bst377.emplace(Node<int, string>(4, "value"));
	bst377.emplace(Node<int, string>(20, "value"));
	bst377.emplace(Node<int, string>(15, "value"));
	bst377.emplace(Node<int, string>(5, "value"));
	bst377.emplace(Node<int, string>(10, "value"));
	bst377.emplace(Node<int, string>(13, "value"));
	bst377.emplace(Node<int, string>(19, "value"));
	bst377.emplace(Node<int, string>(8, "value"));
	bst377.emplace(Node<int, string>(11, "value"));
	bst377.emplace(Node<int, string>(7, "value"));

	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(5)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(13)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(20)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(4)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(15)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(7)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(10)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(8)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(11)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(1)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(9)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(19)->getKey());
	bst377.ascend_printout(bst377.getRoot());
	bst377.deleteNode(bst377.at(3)->getKey());



	BST<int,string> bst378(Node<int, string> (10, "RootVal"));
	bst378.emplace(Node<int, string>(17, "value"));
	bst378.emplace(Node<int, string>(19, "value"));
	bst378.emplace(Node<int, string>(14, "value"));
	bst378.emplace(Node<int, string>(15, "value"));
	bst378.emplace(Node<int, string>(2, "value"));
	bst378.emplace(Node<int, string>(4, "value"));
	bst378.emplace(Node<int, string>(16, "value"));
	bst378.emplace(Node<int, string>(6, "value"));
	bst378.emplace(Node<int, string>(8, "value"));
	bst378.emplace(Node<int, string>(12, "value"));
	bst378.emplace(Node<int, string>(5, "value"));

	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(16)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(14)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(8)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(5)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(6)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(12)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(2)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(10)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(15)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(17)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(19)->getKey());
	bst378.ascend_printout(bst378.getRoot());
	bst378.deleteNode(bst378.at(4)->getKey());



	BST<int,string> bst379(Node<int, string> (7, "RootVal"));
	bst379.emplace(Node<int, string>(11, "value"));
	bst379.emplace(Node<int, string>(19, "value"));
	bst379.emplace(Node<int, string>(14, "value"));
	bst379.emplace(Node<int, string>(13, "value"));
	bst379.emplace(Node<int, string>(5, "value"));
	bst379.emplace(Node<int, string>(6, "value"));
	bst379.emplace(Node<int, string>(9, "value"));
	bst379.emplace(Node<int, string>(8, "value"));
	bst379.emplace(Node<int, string>(15, "value"));

	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(7)->getKey());
	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(19)->getKey());
	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(14)->getKey());
	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(6)->getKey());
	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(15)->getKey());
	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(13)->getKey());
	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(9)->getKey());
	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(11)->getKey());
	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(8)->getKey());
	bst379.ascend_printout(bst379.getRoot());
	bst379.deleteNode(bst379.at(5)->getKey());



	BST<int,string> bst380(Node<int, string> (12, "RootVal"));
	bst380.emplace(Node<int, string>(17, "value"));
	bst380.emplace(Node<int, string>(18, "value"));
	bst380.emplace(Node<int, string>(20, "value"));
	bst380.emplace(Node<int, string>(1, "value"));
	bst380.emplace(Node<int, string>(3, "value"));
	bst380.emplace(Node<int, string>(10, "value"));
	bst380.emplace(Node<int, string>(4, "value"));
	bst380.emplace(Node<int, string>(15, "value"));
	bst380.emplace(Node<int, string>(5, "value"));
	bst380.emplace(Node<int, string>(11, "value"));

	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(12)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(3)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(5)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(1)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(18)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(20)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(17)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(10)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(4)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(11)->getKey());
	bst380.ascend_printout(bst380.getRoot());
	bst380.deleteNode(bst380.at(15)->getKey());



	BST<int,string> bst381(Node<int, string> (12, "RootVal"));
	bst381.emplace(Node<int, string>(7, "value"));
	bst381.emplace(Node<int, string>(14, "value"));
	bst381.emplace(Node<int, string>(2, "value"));
	bst381.emplace(Node<int, string>(10, "value"));
	bst381.emplace(Node<int, string>(9, "value"));
	bst381.emplace(Node<int, string>(17, "value"));
	bst381.emplace(Node<int, string>(8, "value"));
	bst381.emplace(Node<int, string>(4, "value"));
	bst381.emplace(Node<int, string>(1, "value"));
	bst381.emplace(Node<int, string>(6, "value"));
	bst381.emplace(Node<int, string>(11, "value"));
	bst381.emplace(Node<int, string>(5, "value"));
	bst381.emplace(Node<int, string>(3, "value"));

	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(2)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(7)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(3)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(12)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(9)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(5)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(6)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(8)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(17)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(14)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(1)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(10)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(11)->getKey());
	bst381.ascend_printout(bst381.getRoot());
	bst381.deleteNode(bst381.at(4)->getKey());



	BST<int,string> bst382(Node<int, string> (4, "RootVal"));
	bst382.emplace(Node<int, string>(18, "value"));
	bst382.emplace(Node<int, string>(20, "value"));
	bst382.emplace(Node<int, string>(17, "value"));
	bst382.emplace(Node<int, string>(19, "value"));
	bst382.emplace(Node<int, string>(1, "value"));
	bst382.emplace(Node<int, string>(14, "value"));
	bst382.emplace(Node<int, string>(15, "value"));
	bst382.emplace(Node<int, string>(16, "value"));
	bst382.emplace(Node<int, string>(8, "value"));
	bst382.emplace(Node<int, string>(6, "value"));
	bst382.emplace(Node<int, string>(2, "value"));
	bst382.emplace(Node<int, string>(12, "value"));

	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(8)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(17)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(15)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(4)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(2)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(14)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(18)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(1)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(12)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(20)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(19)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(6)->getKey());
	bst382.ascend_printout(bst382.getRoot());
	bst382.deleteNode(bst382.at(16)->getKey());



	BST<int,string> bst383(Node<int, string> (2, "RootVal"));
	bst383.emplace(Node<int, string>(20, "value"));
	bst383.emplace(Node<int, string>(10, "value"));
	bst383.emplace(Node<int, string>(14, "value"));
	bst383.emplace(Node<int, string>(7, "value"));
	bst383.emplace(Node<int, string>(1, "value"));
	bst383.emplace(Node<int, string>(19, "value"));
	bst383.emplace(Node<int, string>(13, "value"));
	bst383.emplace(Node<int, string>(15, "value"));
	bst383.emplace(Node<int, string>(5, "value"));
	bst383.emplace(Node<int, string>(17, "value"));

	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(10)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(15)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(20)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(14)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(2)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(1)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(17)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(7)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(5)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(13)->getKey());
	bst383.ascend_printout(bst383.getRoot());
	bst383.deleteNode(bst383.at(19)->getKey());



	BST<int,string> bst384(Node<int, string> (2, "RootVal"));
	bst384.emplace(Node<int, string>(20, "value"));
	bst384.emplace(Node<int, string>(7, "value"));
	bst384.emplace(Node<int, string>(13, "value"));
	bst384.emplace(Node<int, string>(16, "value"));
	bst384.emplace(Node<int, string>(10, "value"));
	bst384.emplace(Node<int, string>(1, "value"));
	bst384.emplace(Node<int, string>(18, "value"));
	bst384.emplace(Node<int, string>(5, "value"));
	bst384.emplace(Node<int, string>(19, "value"));
	bst384.emplace(Node<int, string>(15, "value"));
	bst384.emplace(Node<int, string>(17, "value"));
	bst384.emplace(Node<int, string>(8, "value"));

	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(15)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(17)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(1)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(18)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(19)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(5)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(20)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(16)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(2)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(7)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(10)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(13)->getKey());
	bst384.ascend_printout(bst384.getRoot());
	bst384.deleteNode(bst384.at(8)->getKey());



	BST<int,string> bst385(Node<int, string> (15, "RootVal"));
	bst385.emplace(Node<int, string>(9, "value"));
	bst385.emplace(Node<int, string>(10, "value"));
	bst385.emplace(Node<int, string>(4, "value"));
	bst385.emplace(Node<int, string>(17, "value"));
	bst385.emplace(Node<int, string>(3, "value"));
	bst385.emplace(Node<int, string>(12, "value"));
	bst385.emplace(Node<int, string>(14, "value"));
	bst385.emplace(Node<int, string>(11, "value"));
	bst385.emplace(Node<int, string>(16, "value"));
	bst385.emplace(Node<int, string>(6, "value"));
	bst385.emplace(Node<int, string>(7, "value"));

	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(12)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(9)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(17)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(4)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(7)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(14)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(6)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(3)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(15)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(10)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(11)->getKey());
	bst385.ascend_printout(bst385.getRoot());
	bst385.deleteNode(bst385.at(16)->getKey());



	BST<int,string> bst386(Node<int, string> (17, "RootVal"));
	bst386.emplace(Node<int, string>(2, "value"));
	bst386.emplace(Node<int, string>(6, "value"));
	bst386.emplace(Node<int, string>(19, "value"));
	bst386.emplace(Node<int, string>(4, "value"));
	bst386.emplace(Node<int, string>(16, "value"));
	bst386.emplace(Node<int, string>(14, "value"));
	bst386.emplace(Node<int, string>(13, "value"));
	bst386.emplace(Node<int, string>(20, "value"));
	bst386.emplace(Node<int, string>(7, "value"));
	bst386.emplace(Node<int, string>(1, "value"));
	bst386.emplace(Node<int, string>(15, "value"));
	bst386.emplace(Node<int, string>(12, "value"));
	bst386.emplace(Node<int, string>(18, "value"));

	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(7)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(17)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(19)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(2)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(4)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(13)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(1)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(6)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(15)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(14)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(20)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(16)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(12)->getKey());
	bst386.ascend_printout(bst386.getRoot());
	bst386.deleteNode(bst386.at(18)->getKey());



	BST<int,string> bst387(Node<int, string> (3, "RootVal"));
	bst387.emplace(Node<int, string>(4, "value"));
	bst387.emplace(Node<int, string>(20, "value"));
	bst387.emplace(Node<int, string>(1, "value"));
	bst387.emplace(Node<int, string>(7, "value"));
	bst387.emplace(Node<int, string>(17, "value"));
	bst387.emplace(Node<int, string>(12, "value"));
	bst387.emplace(Node<int, string>(18, "value"));
	bst387.emplace(Node<int, string>(11, "value"));
	bst387.emplace(Node<int, string>(15, "value"));
	bst387.emplace(Node<int, string>(19, "value"));
	bst387.emplace(Node<int, string>(8, "value"));

	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(18)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(8)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(17)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(15)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(12)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(20)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(1)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(11)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(4)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(7)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(3)->getKey());
	bst387.ascend_printout(bst387.getRoot());
	bst387.deleteNode(bst387.at(19)->getKey());



	BST<int,string> bst388(Node<int, string> (1, "RootVal"));
	bst388.emplace(Node<int, string>(12, "value"));
	bst388.emplace(Node<int, string>(13, "value"));
	bst388.emplace(Node<int, string>(10, "value"));
	bst388.emplace(Node<int, string>(6, "value"));
	bst388.emplace(Node<int, string>(17, "value"));
	bst388.emplace(Node<int, string>(2, "value"));
	bst388.emplace(Node<int, string>(11, "value"));
	bst388.emplace(Node<int, string>(18, "value"));
	bst388.emplace(Node<int, string>(19, "value"));
	bst388.emplace(Node<int, string>(8, "value"));
	bst388.emplace(Node<int, string>(16, "value"));
	bst388.emplace(Node<int, string>(3, "value"));
	bst388.emplace(Node<int, string>(7, "value"));
	bst388.emplace(Node<int, string>(20, "value"));

	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(13)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(7)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(19)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(3)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(2)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(10)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(12)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(16)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(1)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(20)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(8)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(18)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(11)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(17)->getKey());
	bst388.ascend_printout(bst388.getRoot());
	bst388.deleteNode(bst388.at(6)->getKey());



	BST<int,string> bst389(Node<int, string> (17, "RootVal"));
	bst389.emplace(Node<int, string>(4, "value"));
	bst389.emplace(Node<int, string>(7, "value"));
	bst389.emplace(Node<int, string>(3, "value"));
	bst389.emplace(Node<int, string>(5, "value"));
	bst389.emplace(Node<int, string>(1, "value"));
	bst389.emplace(Node<int, string>(20, "value"));
	bst389.emplace(Node<int, string>(19, "value"));
	bst389.emplace(Node<int, string>(14, "value"));
	bst389.emplace(Node<int, string>(13, "value"));
	bst389.emplace(Node<int, string>(9, "value"));
	bst389.emplace(Node<int, string>(11, "value"));

	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(1)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(11)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(9)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(5)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(20)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(3)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(17)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(4)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(13)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(7)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(14)->getKey());
	bst389.ascend_printout(bst389.getRoot());
	bst389.deleteNode(bst389.at(19)->getKey());



	BST<int,string> bst390(Node<int, string> (9, "RootVal"));
	bst390.emplace(Node<int, string>(3, "value"));
	bst390.emplace(Node<int, string>(4, "value"));
	bst390.emplace(Node<int, string>(13, "value"));
	bst390.emplace(Node<int, string>(1, "value"));
	bst390.emplace(Node<int, string>(18, "value"));
	bst390.emplace(Node<int, string>(11, "value"));
	bst390.emplace(Node<int, string>(10, "value"));
	bst390.emplace(Node<int, string>(7, "value"));
	bst390.emplace(Node<int, string>(20, "value"));
	bst390.emplace(Node<int, string>(12, "value"));
	bst390.emplace(Node<int, string>(8, "value"));
	bst390.emplace(Node<int, string>(14, "value"));

	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(9)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(10)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(4)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(7)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(18)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(8)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(3)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(14)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(13)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(11)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(12)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(20)->getKey());
	bst390.ascend_printout(bst390.getRoot());
	bst390.deleteNode(bst390.at(1)->getKey());



	BST<int,string> bst391(Node<int, string> (12, "RootVal"));
	bst391.emplace(Node<int, string>(18, "value"));
	bst391.emplace(Node<int, string>(10, "value"));
	bst391.emplace(Node<int, string>(7, "value"));
	bst391.emplace(Node<int, string>(4, "value"));
	bst391.emplace(Node<int, string>(20, "value"));
	bst391.emplace(Node<int, string>(14, "value"));
	bst391.emplace(Node<int, string>(17, "value"));
	bst391.emplace(Node<int, string>(19, "value"));
	bst391.emplace(Node<int, string>(13, "value"));
	bst391.emplace(Node<int, string>(11, "value"));
	bst391.emplace(Node<int, string>(16, "value"));
	bst391.emplace(Node<int, string>(2, "value"));
	bst391.emplace(Node<int, string>(8, "value"));

	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(13)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(12)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(19)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(2)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(14)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(18)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(16)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(4)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(17)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(20)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(8)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(7)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(11)->getKey());
	bst391.ascend_printout(bst391.getRoot());
	bst391.deleteNode(bst391.at(10)->getKey());



	BST<int,string> bst392(Node<int, string> (10, "RootVal"));
	bst392.emplace(Node<int, string>(19, "value"));
	bst392.emplace(Node<int, string>(18, "value"));
	bst392.emplace(Node<int, string>(8, "value"));
	bst392.emplace(Node<int, string>(17, "value"));
	bst392.emplace(Node<int, string>(14, "value"));
	bst392.emplace(Node<int, string>(1, "value"));
	bst392.emplace(Node<int, string>(13, "value"));
	bst392.emplace(Node<int, string>(20, "value"));
	bst392.emplace(Node<int, string>(9, "value"));
	bst392.emplace(Node<int, string>(2, "value"));
	bst392.emplace(Node<int, string>(6, "value"));
	bst392.emplace(Node<int, string>(16, "value"));

	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(13)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(1)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(8)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(17)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(18)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(2)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(20)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(19)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(6)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(16)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(10)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(9)->getKey());
	bst392.ascend_printout(bst392.getRoot());
	bst392.deleteNode(bst392.at(14)->getKey());



	BST<int,string> bst393(Node<int, string> (20, "RootVal"));
	bst393.emplace(Node<int, string>(5, "value"));
	bst393.emplace(Node<int, string>(1, "value"));
	bst393.emplace(Node<int, string>(16, "value"));
	bst393.emplace(Node<int, string>(8, "value"));
	bst393.emplace(Node<int, string>(10, "value"));
	bst393.emplace(Node<int, string>(11, "value"));
	bst393.emplace(Node<int, string>(4, "value"));
	bst393.emplace(Node<int, string>(3, "value"));
	bst393.emplace(Node<int, string>(19, "value"));
	bst393.emplace(Node<int, string>(2, "value"));

	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(19)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(1)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(8)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(4)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(3)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(11)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(10)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(2)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(5)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(16)->getKey());
	bst393.ascend_printout(bst393.getRoot());
	bst393.deleteNode(bst393.at(20)->getKey());



	BST<int,string> bst394(Node<int, string> (2, "RootVal"));
	bst394.emplace(Node<int, string>(8, "value"));
	bst394.emplace(Node<int, string>(18, "value"));
	bst394.emplace(Node<int, string>(10, "value"));
	bst394.emplace(Node<int, string>(13, "value"));
	bst394.emplace(Node<int, string>(20, "value"));
	bst394.emplace(Node<int, string>(19, "value"));
	bst394.emplace(Node<int, string>(9, "value"));
	bst394.emplace(Node<int, string>(12, "value"));
	bst394.emplace(Node<int, string>(14, "value"));
	bst394.emplace(Node<int, string>(3, "value"));
	bst394.emplace(Node<int, string>(11, "value"));

	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(9)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(12)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(19)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(3)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(14)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(10)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(2)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(20)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(18)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(8)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(13)->getKey());
	bst394.ascend_printout(bst394.getRoot());
	bst394.deleteNode(bst394.at(11)->getKey());



	BST<int,string> bst395(Node<int, string> (14, "RootVal"));
	bst395.emplace(Node<int, string>(3, "value"));
	bst395.emplace(Node<int, string>(19, "value"));
	bst395.emplace(Node<int, string>(15, "value"));
	bst395.emplace(Node<int, string>(9, "value"));
	bst395.emplace(Node<int, string>(10, "value"));
	bst395.emplace(Node<int, string>(11, "value"));
	bst395.emplace(Node<int, string>(16, "value"));
	bst395.emplace(Node<int, string>(20, "value"));
	bst395.emplace(Node<int, string>(1, "value"));
	bst395.emplace(Node<int, string>(6, "value"));
	bst395.emplace(Node<int, string>(18, "value"));

	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(15)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(3)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(9)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(18)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(6)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(20)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(10)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(11)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(19)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(16)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(1)->getKey());
	bst395.ascend_printout(bst395.getRoot());
	bst395.deleteNode(bst395.at(14)->getKey());



	BST<int,string> bst396(Node<int, string> (5, "RootVal"));
	bst396.emplace(Node<int, string>(7, "value"));
	bst396.emplace(Node<int, string>(15, "value"));
	bst396.emplace(Node<int, string>(17, "value"));
	bst396.emplace(Node<int, string>(4, "value"));
	bst396.emplace(Node<int, string>(18, "value"));
	bst396.emplace(Node<int, string>(16, "value"));
	bst396.emplace(Node<int, string>(20, "value"));
	bst396.emplace(Node<int, string>(12, "value"));
	bst396.emplace(Node<int, string>(2, "value"));
	bst396.emplace(Node<int, string>(13, "value"));

	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(18)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(12)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(13)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(4)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(16)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(5)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(20)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(17)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(2)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(15)->getKey());
	bst396.ascend_printout(bst396.getRoot());
	bst396.deleteNode(bst396.at(7)->getKey());



	BST<int,string> bst397(Node<int, string> (16, "RootVal"));
	bst397.emplace(Node<int, string>(18, "value"));
	bst397.emplace(Node<int, string>(9, "value"));
	bst397.emplace(Node<int, string>(8, "value"));
	bst397.emplace(Node<int, string>(5, "value"));
	bst397.emplace(Node<int, string>(3, "value"));
	bst397.emplace(Node<int, string>(2, "value"));
	bst397.emplace(Node<int, string>(11, "value"));
	bst397.emplace(Node<int, string>(4, "value"));
	bst397.emplace(Node<int, string>(6, "value"));
	bst397.emplace(Node<int, string>(13, "value"));
	bst397.emplace(Node<int, string>(14, "value"));
	bst397.emplace(Node<int, string>(17, "value"));
	bst397.emplace(Node<int, string>(1, "value"));

	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(2)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(11)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(14)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(13)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(5)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(4)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(3)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(1)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(6)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(17)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(9)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(18)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(8)->getKey());
	bst397.ascend_printout(bst397.getRoot());
	bst397.deleteNode(bst397.at(16)->getKey());



	BST<int,string> bst398(Node<int, string> (17, "RootVal"));
	bst398.emplace(Node<int, string>(16, "value"));
	bst398.emplace(Node<int, string>(2, "value"));
	bst398.emplace(Node<int, string>(6, "value"));
	bst398.emplace(Node<int, string>(13, "value"));
	bst398.emplace(Node<int, string>(3, "value"));
	bst398.emplace(Node<int, string>(12, "value"));
	bst398.emplace(Node<int, string>(10, "value"));
	bst398.emplace(Node<int, string>(20, "value"));
	bst398.emplace(Node<int, string>(11, "value"));
	bst398.emplace(Node<int, string>(1, "value"));
	bst398.emplace(Node<int, string>(4, "value"));
	bst398.emplace(Node<int, string>(7, "value"));

	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(6)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(17)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(16)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(7)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(4)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(13)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(3)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(2)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(12)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(10)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(1)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(11)->getKey());
	bst398.ascend_printout(bst398.getRoot());
	bst398.deleteNode(bst398.at(20)->getKey());



	BST<int,string> bst399(Node<int, string> (1, "RootVal"));
	bst399.emplace(Node<int, string>(13, "value"));
	bst399.emplace(Node<int, string>(3, "value"));
	bst399.emplace(Node<int, string>(6, "value"));
	bst399.emplace(Node<int, string>(8, "value"));
	bst399.emplace(Node<int, string>(19, "value"));
	bst399.emplace(Node<int, string>(16, "value"));
	bst399.emplace(Node<int, string>(2, "value"));
	bst399.emplace(Node<int, string>(11, "value"));
	bst399.emplace(Node<int, string>(20, "value"));

	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(19)->getKey());
	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(16)->getKey());
	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(6)->getKey());
	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(8)->getKey());
	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(11)->getKey());
	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(20)->getKey());
	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(3)->getKey());
	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(13)->getKey());
	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(1)->getKey());
	bst399.ascend_printout(bst399.getRoot());
	bst399.deleteNode(bst399.at(2)->getKey());



	BST<int,string> bst400(Node<int, string> (8, "RootVal"));
	bst400.emplace(Node<int, string>(7, "value"));
	bst400.emplace(Node<int, string>(6, "value"));
	bst400.emplace(Node<int, string>(18, "value"));
	bst400.emplace(Node<int, string>(20, "value"));
	bst400.emplace(Node<int, string>(14, "value"));
	bst400.emplace(Node<int, string>(3, "value"));
	bst400.emplace(Node<int, string>(17, "value"));
	bst400.emplace(Node<int, string>(11, "value"));
	bst400.emplace(Node<int, string>(10, "value"));
	bst400.emplace(Node<int, string>(4, "value"));

	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(18)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(11)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(3)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(10)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(7)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(4)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(17)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(6)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(8)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(20)->getKey());
	bst400.ascend_printout(bst400.getRoot());
	bst400.deleteNode(bst400.at(14)->getKey());



	BST<int,string> bst401(Node<int, string> (11, "RootVal"));
	bst401.emplace(Node<int, string>(9, "value"));
	bst401.emplace(Node<int, string>(20, "value"));
	bst401.emplace(Node<int, string>(15, "value"));
	bst401.emplace(Node<int, string>(19, "value"));
	bst401.emplace(Node<int, string>(10, "value"));
	bst401.emplace(Node<int, string>(5, "value"));
	bst401.emplace(Node<int, string>(4, "value"));
	bst401.emplace(Node<int, string>(6, "value"));
	bst401.emplace(Node<int, string>(7, "value"));
	bst401.emplace(Node<int, string>(18, "value"));
	bst401.emplace(Node<int, string>(13, "value"));
	bst401.emplace(Node<int, string>(16, "value"));

	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(15)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(11)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(19)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(6)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(13)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(20)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(10)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(5)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(16)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(18)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(7)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(4)->getKey());
	bst401.ascend_printout(bst401.getRoot());
	bst401.deleteNode(bst401.at(9)->getKey());



	BST<int,string> bst402(Node<int, string> (14, "RootVal"));
	bst402.emplace(Node<int, string>(15, "value"));
	bst402.emplace(Node<int, string>(18, "value"));
	bst402.emplace(Node<int, string>(13, "value"));
	bst402.emplace(Node<int, string>(11, "value"));
	bst402.emplace(Node<int, string>(8, "value"));
	bst402.emplace(Node<int, string>(5, "value"));
	bst402.emplace(Node<int, string>(20, "value"));
	bst402.emplace(Node<int, string>(17, "value"));
	bst402.emplace(Node<int, string>(16, "value"));
	bst402.emplace(Node<int, string>(7, "value"));
	bst402.emplace(Node<int, string>(4, "value"));
	bst402.emplace(Node<int, string>(10, "value"));
	bst402.emplace(Node<int, string>(6, "value"));

	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(5)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(7)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(8)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(15)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(16)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(18)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(4)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(14)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(10)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(17)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(11)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(6)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(13)->getKey());
	bst402.ascend_printout(bst402.getRoot());
	bst402.deleteNode(bst402.at(20)->getKey());



	BST<int,string> bst403(Node<int, string> (17, "RootVal"));
	bst403.emplace(Node<int, string>(4, "value"));
	bst403.emplace(Node<int, string>(12, "value"));
	bst403.emplace(Node<int, string>(7, "value"));
	bst403.emplace(Node<int, string>(10, "value"));
	bst403.emplace(Node<int, string>(16, "value"));
	bst403.emplace(Node<int, string>(8, "value"));
	bst403.emplace(Node<int, string>(11, "value"));
	bst403.emplace(Node<int, string>(3, "value"));
	bst403.emplace(Node<int, string>(15, "value"));
	bst403.emplace(Node<int, string>(14, "value"));
	bst403.emplace(Node<int, string>(6, "value"));
	bst403.emplace(Node<int, string>(20, "value"));

	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(10)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(7)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(4)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(3)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(8)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(17)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(12)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(6)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(15)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(20)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(16)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(11)->getKey());
	bst403.ascend_printout(bst403.getRoot());
	bst403.deleteNode(bst403.at(14)->getKey());



	BST<int,string> bst404(Node<int, string> (10, "RootVal"));
	bst404.emplace(Node<int, string>(19, "value"));
	bst404.emplace(Node<int, string>(1, "value"));
	bst404.emplace(Node<int, string>(6, "value"));
	bst404.emplace(Node<int, string>(5, "value"));
	bst404.emplace(Node<int, string>(11, "value"));
	bst404.emplace(Node<int, string>(9, "value"));
	bst404.emplace(Node<int, string>(18, "value"));
	bst404.emplace(Node<int, string>(20, "value"));
	bst404.emplace(Node<int, string>(13, "value"));
	bst404.emplace(Node<int, string>(7, "value"));
	bst404.emplace(Node<int, string>(14, "value"));
	bst404.emplace(Node<int, string>(4, "value"));
	bst404.emplace(Node<int, string>(16, "value"));

	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(11)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(20)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(4)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(14)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(16)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(1)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(18)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(19)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(7)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(6)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(5)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(13)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(9)->getKey());
	bst404.ascend_printout(bst404.getRoot());
	bst404.deleteNode(bst404.at(10)->getKey());



	BST<int,string> bst405(Node<int, string> (16, "RootVal"));
	bst405.emplace(Node<int, string>(17, "value"));
	bst405.emplace(Node<int, string>(8, "value"));
	bst405.emplace(Node<int, string>(12, "value"));
	bst405.emplace(Node<int, string>(10, "value"));
	bst405.emplace(Node<int, string>(14, "value"));
	bst405.emplace(Node<int, string>(18, "value"));
	bst405.emplace(Node<int, string>(19, "value"));
	bst405.emplace(Node<int, string>(5, "value"));
	bst405.emplace(Node<int, string>(4, "value"));
	bst405.emplace(Node<int, string>(9, "value"));

	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(19)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(17)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(5)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(14)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(16)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(18)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(4)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(12)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(8)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(9)->getKey());
	bst405.ascend_printout(bst405.getRoot());
	bst405.deleteNode(bst405.at(10)->getKey());



	BST<int,string> bst406(Node<int, string> (19, "RootVal"));
	bst406.emplace(Node<int, string>(1, "value"));
	bst406.emplace(Node<int, string>(9, "value"));
	bst406.emplace(Node<int, string>(18, "value"));
	bst406.emplace(Node<int, string>(6, "value"));
	bst406.emplace(Node<int, string>(10, "value"));
	bst406.emplace(Node<int, string>(20, "value"));
	bst406.emplace(Node<int, string>(3, "value"));
	bst406.emplace(Node<int, string>(17, "value"));
	bst406.emplace(Node<int, string>(4, "value"));
	bst406.emplace(Node<int, string>(14, "value"));

	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(18)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(6)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(1)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(3)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(4)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(9)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(14)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(17)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(19)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(20)->getKey());
	bst406.ascend_printout(bst406.getRoot());
	bst406.deleteNode(bst406.at(10)->getKey());



	BST<int,string> bst407(Node<int, string> (10, "RootVal"));
	bst407.emplace(Node<int, string>(13, "value"));
	bst407.emplace(Node<int, string>(20, "value"));
	bst407.emplace(Node<int, string>(19, "value"));
	bst407.emplace(Node<int, string>(16, "value"));
	bst407.emplace(Node<int, string>(8, "value"));
	bst407.emplace(Node<int, string>(15, "value"));
	bst407.emplace(Node<int, string>(11, "value"));
	bst407.emplace(Node<int, string>(12, "value"));
	bst407.emplace(Node<int, string>(3, "value"));
	bst407.emplace(Node<int, string>(2, "value"));

	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(13)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(20)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(3)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(15)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(16)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(11)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(19)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(10)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(12)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(2)->getKey());
	bst407.ascend_printout(bst407.getRoot());
	bst407.deleteNode(bst407.at(8)->getKey());



	BST<int,string> bst408(Node<int, string> (15, "RootVal"));
	bst408.emplace(Node<int, string>(4, "value"));
	bst408.emplace(Node<int, string>(12, "value"));
	bst408.emplace(Node<int, string>(13, "value"));
	bst408.emplace(Node<int, string>(17, "value"));
	bst408.emplace(Node<int, string>(2, "value"));
	bst408.emplace(Node<int, string>(11, "value"));
	bst408.emplace(Node<int, string>(3, "value"));
	bst408.emplace(Node<int, string>(18, "value"));
	bst408.emplace(Node<int, string>(20, "value"));

	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(4)->getKey());
	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(18)->getKey());
	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(13)->getKey());
	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(3)->getKey());
	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(12)->getKey());
	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(20)->getKey());
	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(15)->getKey());
	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(11)->getKey());
	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(17)->getKey());
	bst408.ascend_printout(bst408.getRoot());
	bst408.deleteNode(bst408.at(2)->getKey());



	BST<int,string> bst409(Node<int, string> (1, "RootVal"));
	bst409.emplace(Node<int, string>(19, "value"));
	bst409.emplace(Node<int, string>(12, "value"));
	bst409.emplace(Node<int, string>(15, "value"));
	bst409.emplace(Node<int, string>(16, "value"));
	bst409.emplace(Node<int, string>(14, "value"));
	bst409.emplace(Node<int, string>(2, "value"));
	bst409.emplace(Node<int, string>(10, "value"));
	bst409.emplace(Node<int, string>(18, "value"));
	bst409.emplace(Node<int, string>(7, "value"));
	bst409.emplace(Node<int, string>(8, "value"));

	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(7)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(1)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(16)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(10)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(14)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(12)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(19)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(8)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(18)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(15)->getKey());
	bst409.ascend_printout(bst409.getRoot());
	bst409.deleteNode(bst409.at(2)->getKey());



	BST<int,string> bst410(Node<int, string> (6, "RootVal"));
	bst410.emplace(Node<int, string>(17, "value"));
	bst410.emplace(Node<int, string>(11, "value"));
	bst410.emplace(Node<int, string>(14, "value"));
	bst410.emplace(Node<int, string>(13, "value"));
	bst410.emplace(Node<int, string>(1, "value"));
	bst410.emplace(Node<int, string>(10, "value"));
	bst410.emplace(Node<int, string>(8, "value"));
	bst410.emplace(Node<int, string>(2, "value"));
	bst410.emplace(Node<int, string>(20, "value"));
	bst410.emplace(Node<int, string>(4, "value"));
	bst410.emplace(Node<int, string>(15, "value"));
	bst410.emplace(Node<int, string>(7, "value"));

	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(7)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(17)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(1)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(6)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(8)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(4)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(15)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(20)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(10)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(11)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(2)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(14)->getKey());
	bst410.ascend_printout(bst410.getRoot());
	bst410.deleteNode(bst410.at(13)->getKey());



	BST<int,string> bst411(Node<int, string> (14, "RootVal"));
	bst411.emplace(Node<int, string>(8, "value"));
	bst411.emplace(Node<int, string>(17, "value"));
	bst411.emplace(Node<int, string>(11, "value"));
	bst411.emplace(Node<int, string>(7, "value"));
	bst411.emplace(Node<int, string>(15, "value"));
	bst411.emplace(Node<int, string>(4, "value"));
	bst411.emplace(Node<int, string>(20, "value"));
	bst411.emplace(Node<int, string>(18, "value"));
	bst411.emplace(Node<int, string>(16, "value"));
	bst411.emplace(Node<int, string>(13, "value"));
	bst411.emplace(Node<int, string>(6, "value"));
	bst411.emplace(Node<int, string>(3, "value"));
	bst411.emplace(Node<int, string>(10, "value"));

	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(4)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(11)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(7)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(16)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(15)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(20)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(13)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(17)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(3)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(8)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(14)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(10)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(6)->getKey());
	bst411.ascend_printout(bst411.getRoot());
	bst411.deleteNode(bst411.at(18)->getKey());



	BST<int,string> bst412(Node<int, string> (9, "RootVal"));
	bst412.emplace(Node<int, string>(3, "value"));
	bst412.emplace(Node<int, string>(2, "value"));
	bst412.emplace(Node<int, string>(12, "value"));
	bst412.emplace(Node<int, string>(8, "value"));
	bst412.emplace(Node<int, string>(14, "value"));
	bst412.emplace(Node<int, string>(15, "value"));
	bst412.emplace(Node<int, string>(10, "value"));
	bst412.emplace(Node<int, string>(17, "value"));
	bst412.emplace(Node<int, string>(16, "value"));
	bst412.emplace(Node<int, string>(6, "value"));
	bst412.emplace(Node<int, string>(7, "value"));
	bst412.emplace(Node<int, string>(19, "value"));
	bst412.emplace(Node<int, string>(13, "value"));
	bst412.emplace(Node<int, string>(20, "value"));
	bst412.emplace(Node<int, string>(18, "value"));

	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(15)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(14)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(16)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(12)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(18)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(6)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(2)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(3)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(17)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(8)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(20)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(10)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(19)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(9)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(7)->getKey());
	bst412.ascend_printout(bst412.getRoot());
	bst412.deleteNode(bst412.at(13)->getKey());



	BST<int,string> bst413(Node<int, string> (7, "RootVal"));
	bst413.emplace(Node<int, string>(18, "value"));
	bst413.emplace(Node<int, string>(14, "value"));
	bst413.emplace(Node<int, string>(12, "value"));
	bst413.emplace(Node<int, string>(2, "value"));
	bst413.emplace(Node<int, string>(11, "value"));
	bst413.emplace(Node<int, string>(8, "value"));
	bst413.emplace(Node<int, string>(20, "value"));
	bst413.emplace(Node<int, string>(19, "value"));
	bst413.emplace(Node<int, string>(9, "value"));
	bst413.emplace(Node<int, string>(17, "value"));
	bst413.emplace(Node<int, string>(16, "value"));
	bst413.emplace(Node<int, string>(6, "value"));
	bst413.emplace(Node<int, string>(10, "value"));

	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(11)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(20)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(6)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(10)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(19)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(9)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(16)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(7)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(12)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(17)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(14)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(2)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(8)->getKey());
	bst413.ascend_printout(bst413.getRoot());
	bst413.deleteNode(bst413.at(18)->getKey());



	BST<int,string> bst414(Node<int, string> (9, "RootVal"));
	bst414.emplace(Node<int, string>(13, "value"));
	bst414.emplace(Node<int, string>(8, "value"));
	bst414.emplace(Node<int, string>(10, "value"));
	bst414.emplace(Node<int, string>(14, "value"));
	bst414.emplace(Node<int, string>(18, "value"));
	bst414.emplace(Node<int, string>(19, "value"));
	bst414.emplace(Node<int, string>(17, "value"));
	bst414.emplace(Node<int, string>(3, "value"));
	bst414.emplace(Node<int, string>(20, "value"));
	bst414.emplace(Node<int, string>(4, "value"));

	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(3)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(8)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(13)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(20)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(9)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(4)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(14)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(10)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(19)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(18)->getKey());
	bst414.ascend_printout(bst414.getRoot());
	bst414.deleteNode(bst414.at(17)->getKey());



	BST<int,string> bst415(Node<int, string> (8, "RootVal"));
	bst415.emplace(Node<int, string>(12, "value"));
	bst415.emplace(Node<int, string>(1, "value"));
	bst415.emplace(Node<int, string>(13, "value"));
	bst415.emplace(Node<int, string>(17, "value"));
	bst415.emplace(Node<int, string>(7, "value"));
	bst415.emplace(Node<int, string>(19, "value"));
	bst415.emplace(Node<int, string>(5, "value"));
	bst415.emplace(Node<int, string>(18, "value"));
	bst415.emplace(Node<int, string>(16, "value"));
	bst415.emplace(Node<int, string>(10, "value"));
	bst415.emplace(Node<int, string>(20, "value"));
	bst415.emplace(Node<int, string>(6, "value"));

	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(10)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(8)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(18)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(6)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(13)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(7)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(20)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(5)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(16)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(12)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(19)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(17)->getKey());
	bst415.ascend_printout(bst415.getRoot());
	bst415.deleteNode(bst415.at(1)->getKey());



	BST<int,string> bst416(Node<int, string> (9, "RootVal"));
	bst416.emplace(Node<int, string>(14, "value"));
	bst416.emplace(Node<int, string>(4, "value"));
	bst416.emplace(Node<int, string>(3, "value"));
	bst416.emplace(Node<int, string>(13, "value"));
	bst416.emplace(Node<int, string>(1, "value"));
	bst416.emplace(Node<int, string>(8, "value"));
	bst416.emplace(Node<int, string>(11, "value"));
	bst416.emplace(Node<int, string>(20, "value"));
	bst416.emplace(Node<int, string>(12, "value"));
	bst416.emplace(Node<int, string>(16, "value"));
	bst416.emplace(Node<int, string>(17, "value"));
	bst416.emplace(Node<int, string>(19, "value"));
	bst416.emplace(Node<int, string>(5, "value"));

	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(9)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(14)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(20)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(13)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(3)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(8)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(12)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(1)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(16)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(4)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(11)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(19)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(5)->getKey());
	bst416.ascend_printout(bst416.getRoot());
	bst416.deleteNode(bst416.at(17)->getKey());



	BST<int,string> bst417(Node<int, string> (10, "RootVal"));
	bst417.emplace(Node<int, string>(2, "value"));
	bst417.emplace(Node<int, string>(13, "value"));
	bst417.emplace(Node<int, string>(1, "value"));
	bst417.emplace(Node<int, string>(16, "value"));
	bst417.emplace(Node<int, string>(12, "value"));
	bst417.emplace(Node<int, string>(6, "value"));
	bst417.emplace(Node<int, string>(17, "value"));
	bst417.emplace(Node<int, string>(20, "value"));
	bst417.emplace(Node<int, string>(18, "value"));
	bst417.emplace(Node<int, string>(5, "value"));
	bst417.emplace(Node<int, string>(15, "value"));

	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(17)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(10)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(13)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(16)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(18)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(6)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(15)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(2)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(5)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(1)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(12)->getKey());
	bst417.ascend_printout(bst417.getRoot());
	bst417.deleteNode(bst417.at(20)->getKey());



	BST<int,string> bst418(Node<int, string> (5, "RootVal"));
	bst418.emplace(Node<int, string>(8, "value"));
	bst418.emplace(Node<int, string>(7, "value"));
	bst418.emplace(Node<int, string>(3, "value"));
	bst418.emplace(Node<int, string>(1, "value"));
	bst418.emplace(Node<int, string>(2, "value"));
	bst418.emplace(Node<int, string>(14, "value"));
	bst418.emplace(Node<int, string>(10, "value"));
	bst418.emplace(Node<int, string>(20, "value"));
	bst418.emplace(Node<int, string>(18, "value"));

	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(7)->getKey());
	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(20)->getKey());
	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(5)->getKey());
	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(10)->getKey());
	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(18)->getKey());
	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(8)->getKey());
	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(2)->getKey());
	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(14)->getKey());
	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(1)->getKey());
	bst418.ascend_printout(bst418.getRoot());
	bst418.deleteNode(bst418.at(3)->getKey());



	BST<int,string> bst419(Node<int, string> (15, "RootVal"));
	bst419.emplace(Node<int, string>(20, "value"));
	bst419.emplace(Node<int, string>(11, "value"));
	bst419.emplace(Node<int, string>(9, "value"));
	bst419.emplace(Node<int, string>(19, "value"));
	bst419.emplace(Node<int, string>(18, "value"));
	bst419.emplace(Node<int, string>(4, "value"));
	bst419.emplace(Node<int, string>(5, "value"));
	bst419.emplace(Node<int, string>(12, "value"));
	bst419.emplace(Node<int, string>(14, "value"));
	bst419.emplace(Node<int, string>(13, "value"));
	bst419.emplace(Node<int, string>(10, "value"));
	bst419.emplace(Node<int, string>(2, "value"));
	bst419.emplace(Node<int, string>(3, "value"));

	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(5)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(14)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(18)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(3)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(19)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(15)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(13)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(2)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(10)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(4)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(20)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(11)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(9)->getKey());
	bst419.ascend_printout(bst419.getRoot());
	bst419.deleteNode(bst419.at(12)->getKey());



	BST<int,string> bst420(Node<int, string> (1, "RootVal"));
	bst420.emplace(Node<int, string>(2, "value"));
	bst420.emplace(Node<int, string>(11, "value"));
	bst420.emplace(Node<int, string>(19, "value"));
	bst420.emplace(Node<int, string>(8, "value"));
	bst420.emplace(Node<int, string>(13, "value"));
	bst420.emplace(Node<int, string>(15, "value"));
	bst420.emplace(Node<int, string>(9, "value"));
	bst420.emplace(Node<int, string>(10, "value"));
	bst420.emplace(Node<int, string>(20, "value"));
	bst420.emplace(Node<int, string>(5, "value"));
	bst420.emplace(Node<int, string>(7, "value"));

	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(11)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(1)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(10)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(13)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(20)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(2)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(5)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(7)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(15)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(8)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(19)->getKey());
	bst420.ascend_printout(bst420.getRoot());
	bst420.deleteNode(bst420.at(9)->getKey());



	BST<int,string> bst421(Node<int, string> (13, "RootVal"));
	bst421.emplace(Node<int, string>(15, "value"));
	bst421.emplace(Node<int, string>(6, "value"));
	bst421.emplace(Node<int, string>(12, "value"));
	bst421.emplace(Node<int, string>(3, "value"));
	bst421.emplace(Node<int, string>(17, "value"));
	bst421.emplace(Node<int, string>(20, "value"));
	bst421.emplace(Node<int, string>(1, "value"));
	bst421.emplace(Node<int, string>(4, "value"));
	bst421.emplace(Node<int, string>(9, "value"));
	bst421.emplace(Node<int, string>(16, "value"));

	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(9)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(4)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(16)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(15)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(3)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(20)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(1)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(17)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(13)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(6)->getKey());
	bst421.ascend_printout(bst421.getRoot());
	bst421.deleteNode(bst421.at(12)->getKey());



	BST<int,string> bst422(Node<int, string> (1, "RootVal"));
	bst422.emplace(Node<int, string>(8, "value"));
	bst422.emplace(Node<int, string>(19, "value"));
	bst422.emplace(Node<int, string>(15, "value"));
	bst422.emplace(Node<int, string>(4, "value"));
	bst422.emplace(Node<int, string>(16, "value"));
	bst422.emplace(Node<int, string>(10, "value"));
	bst422.emplace(Node<int, string>(9, "value"));
	bst422.emplace(Node<int, string>(14, "value"));
	bst422.emplace(Node<int, string>(3, "value"));
	bst422.emplace(Node<int, string>(2, "value"));
	bst422.emplace(Node<int, string>(7, "value"));

	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(2)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(19)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(16)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(4)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(1)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(14)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(9)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(15)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(7)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(3)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(10)->getKey());
	bst422.ascend_printout(bst422.getRoot());
	bst422.deleteNode(bst422.at(8)->getKey());



	BST<int,string> bst423(Node<int, string> (16, "RootVal"));
	bst423.emplace(Node<int, string>(20, "value"));
	bst423.emplace(Node<int, string>(17, "value"));
	bst423.emplace(Node<int, string>(7, "value"));
	bst423.emplace(Node<int, string>(14, "value"));
	bst423.emplace(Node<int, string>(6, "value"));
	bst423.emplace(Node<int, string>(18, "value"));
	bst423.emplace(Node<int, string>(5, "value"));
	bst423.emplace(Node<int, string>(11, "value"));
	bst423.emplace(Node<int, string>(12, "value"));
	bst423.emplace(Node<int, string>(3, "value"));

	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(14)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(16)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(18)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(6)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(3)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(17)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(5)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(11)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(7)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(20)->getKey());
	bst423.ascend_printout(bst423.getRoot());
	bst423.deleteNode(bst423.at(12)->getKey());



	BST<int,string> bst424(Node<int, string> (14, "RootVal"));
	bst424.emplace(Node<int, string>(6, "value"));
	bst424.emplace(Node<int, string>(15, "value"));
	bst424.emplace(Node<int, string>(5, "value"));
	bst424.emplace(Node<int, string>(4, "value"));
	bst424.emplace(Node<int, string>(2, "value"));
	bst424.emplace(Node<int, string>(20, "value"));
	bst424.emplace(Node<int, string>(18, "value"));
	bst424.emplace(Node<int, string>(10, "value"));
	bst424.emplace(Node<int, string>(7, "value"));
	bst424.emplace(Node<int, string>(17, "value"));
	bst424.emplace(Node<int, string>(12, "value"));
	bst424.emplace(Node<int, string>(9, "value"));

	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(14)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(2)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(9)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(15)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(17)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(5)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(7)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(20)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(18)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(4)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(6)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(12)->getKey());
	bst424.ascend_printout(bst424.getRoot());
	bst424.deleteNode(bst424.at(10)->getKey());



	BST<int,string> bst425(Node<int, string> (7, "RootVal"));
	bst425.emplace(Node<int, string>(12, "value"));
	bst425.emplace(Node<int, string>(16, "value"));
	bst425.emplace(Node<int, string>(17, "value"));
	bst425.emplace(Node<int, string>(5, "value"));
	bst425.emplace(Node<int, string>(18, "value"));
	bst425.emplace(Node<int, string>(9, "value"));
	bst425.emplace(Node<int, string>(11, "value"));
	bst425.emplace(Node<int, string>(3, "value"));
	bst425.emplace(Node<int, string>(8, "value"));
	bst425.emplace(Node<int, string>(13, "value"));
	bst425.emplace(Node<int, string>(20, "value"));
	bst425.emplace(Node<int, string>(15, "value"));
	bst425.emplace(Node<int, string>(6, "value"));

	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(16)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(5)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(12)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(6)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(9)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(3)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(15)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(13)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(17)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(7)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(18)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(8)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(20)->getKey());
	bst425.ascend_printout(bst425.getRoot());
	bst425.deleteNode(bst425.at(11)->getKey());



	BST<int,string> bst426(Node<int, string> (9, "RootVal"));
	bst426.emplace(Node<int, string>(15, "value"));
	bst426.emplace(Node<int, string>(16, "value"));
	bst426.emplace(Node<int, string>(11, "value"));
	bst426.emplace(Node<int, string>(13, "value"));
	bst426.emplace(Node<int, string>(6, "value"));
	bst426.emplace(Node<int, string>(12, "value"));
	bst426.emplace(Node<int, string>(4, "value"));
	bst426.emplace(Node<int, string>(14, "value"));
	bst426.emplace(Node<int, string>(3, "value"));
	bst426.emplace(Node<int, string>(10, "value"));
	bst426.emplace(Node<int, string>(8, "value"));
	bst426.emplace(Node<int, string>(18, "value"));

	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(9)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(12)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(11)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(4)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(6)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(14)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(8)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(3)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(10)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(16)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(13)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(18)->getKey());
	bst426.ascend_printout(bst426.getRoot());
	bst426.deleteNode(bst426.at(15)->getKey());



	BST<int,string> bst427(Node<int, string> (19, "RootVal"));
	bst427.emplace(Node<int, string>(1, "value"));
	bst427.emplace(Node<int, string>(18, "value"));
	bst427.emplace(Node<int, string>(8, "value"));
	bst427.emplace(Node<int, string>(2, "value"));
	bst427.emplace(Node<int, string>(4, "value"));
	bst427.emplace(Node<int, string>(9, "value"));
	bst427.emplace(Node<int, string>(15, "value"));
	bst427.emplace(Node<int, string>(16, "value"));
	bst427.emplace(Node<int, string>(6, "value"));
	bst427.emplace(Node<int, string>(13, "value"));

	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(15)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(19)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(9)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(6)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(16)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(1)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(8)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(4)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(18)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(2)->getKey());
	bst427.ascend_printout(bst427.getRoot());
	bst427.deleteNode(bst427.at(13)->getKey());



	BST<int,string> bst428(Node<int, string> (17, "RootVal"));
	bst428.emplace(Node<int, string>(13, "value"));
	bst428.emplace(Node<int, string>(16, "value"));
	bst428.emplace(Node<int, string>(3, "value"));
	bst428.emplace(Node<int, string>(14, "value"));
	bst428.emplace(Node<int, string>(7, "value"));
	bst428.emplace(Node<int, string>(8, "value"));
	bst428.emplace(Node<int, string>(15, "value"));
	bst428.emplace(Node<int, string>(10, "value"));
	bst428.emplace(Node<int, string>(1, "value"));
	bst428.emplace(Node<int, string>(18, "value"));
	bst428.emplace(Node<int, string>(12, "value"));
	bst428.emplace(Node<int, string>(19, "value"));

	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(8)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(12)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(1)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(3)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(13)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(19)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(15)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(10)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(14)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(17)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(16)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(7)->getKey());
	bst428.ascend_printout(bst428.getRoot());
	bst428.deleteNode(bst428.at(18)->getKey());



	BST<int,string> bst429(Node<int, string> (16, "RootVal"));
	bst429.emplace(Node<int, string>(3, "value"));
	bst429.emplace(Node<int, string>(20, "value"));
	bst429.emplace(Node<int, string>(17, "value"));
	bst429.emplace(Node<int, string>(1, "value"));
	bst429.emplace(Node<int, string>(18, "value"));
	bst429.emplace(Node<int, string>(11, "value"));
	bst429.emplace(Node<int, string>(2, "value"));
	bst429.emplace(Node<int, string>(8, "value"));
	bst429.emplace(Node<int, string>(5, "value"));
	bst429.emplace(Node<int, string>(19, "value"));
	bst429.emplace(Node<int, string>(15, "value"));
	bst429.emplace(Node<int, string>(9, "value"));

	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(9)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(3)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(15)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(18)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(2)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(1)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(19)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(11)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(20)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(5)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(16)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(8)->getKey());
	bst429.ascend_printout(bst429.getRoot());
	bst429.deleteNode(bst429.at(17)->getKey());



	BST<int,string> bst430(Node<int, string> (13, "RootVal"));
	bst430.emplace(Node<int, string>(2, "value"));
	bst430.emplace(Node<int, string>(18, "value"));
	bst430.emplace(Node<int, string>(15, "value"));
	bst430.emplace(Node<int, string>(6, "value"));
	bst430.emplace(Node<int, string>(1, "value"));
	bst430.emplace(Node<int, string>(20, "value"));
	bst430.emplace(Node<int, string>(5, "value"));
	bst430.emplace(Node<int, string>(19, "value"));
	bst430.emplace(Node<int, string>(17, "value"));
	bst430.emplace(Node<int, string>(12, "value"));
	bst430.emplace(Node<int, string>(16, "value"));
	bst430.emplace(Node<int, string>(8, "value"));
	bst430.emplace(Node<int, string>(4, "value"));

	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(2)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(15)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(20)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(1)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(5)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(19)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(6)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(8)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(16)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(12)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(4)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(13)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(17)->getKey());
	bst430.ascend_printout(bst430.getRoot());
	bst430.deleteNode(bst430.at(18)->getKey());



	BST<int,string> bst431(Node<int, string> (13, "RootVal"));
	bst431.emplace(Node<int, string>(20, "value"));
	bst431.emplace(Node<int, string>(1, "value"));
	bst431.emplace(Node<int, string>(6, "value"));
	bst431.emplace(Node<int, string>(19, "value"));
	bst431.emplace(Node<int, string>(3, "value"));
	bst431.emplace(Node<int, string>(17, "value"));
	bst431.emplace(Node<int, string>(12, "value"));
	bst431.emplace(Node<int, string>(4, "value"));
	bst431.emplace(Node<int, string>(14, "value"));
	bst431.emplace(Node<int, string>(2, "value"));
	bst431.emplace(Node<int, string>(15, "value"));
	bst431.emplace(Node<int, string>(7, "value"));
	bst431.emplace(Node<int, string>(10, "value"));
	bst431.emplace(Node<int, string>(18, "value"));

	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(10)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(2)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(17)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(18)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(14)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(7)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(4)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(1)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(15)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(19)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(3)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(12)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(13)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(20)->getKey());
	bst431.ascend_printout(bst431.getRoot());
	bst431.deleteNode(bst431.at(6)->getKey());



	BST<int,string> bst432(Node<int, string> (8, "RootVal"));
	bst432.emplace(Node<int, string>(5, "value"));
	bst432.emplace(Node<int, string>(20, "value"));
	bst432.emplace(Node<int, string>(14, "value"));
	bst432.emplace(Node<int, string>(10, "value"));
	bst432.emplace(Node<int, string>(9, "value"));
	bst432.emplace(Node<int, string>(19, "value"));
	bst432.emplace(Node<int, string>(3, "value"));
	bst432.emplace(Node<int, string>(12, "value"));
	bst432.emplace(Node<int, string>(18, "value"));
	bst432.emplace(Node<int, string>(2, "value"));
	bst432.emplace(Node<int, string>(4, "value"));
	bst432.emplace(Node<int, string>(16, "value"));

	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(8)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(19)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(16)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(12)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(4)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(18)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(20)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(3)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(2)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(9)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(10)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(5)->getKey());
	bst432.ascend_printout(bst432.getRoot());
	bst432.deleteNode(bst432.at(14)->getKey());



	BST<int,string> bst433(Node<int, string> (2, "RootVal"));
	bst433.emplace(Node<int, string>(16, "value"));
	bst433.emplace(Node<int, string>(5, "value"));
	bst433.emplace(Node<int, string>(15, "value"));
	bst433.emplace(Node<int, string>(10, "value"));
	bst433.emplace(Node<int, string>(14, "value"));
	bst433.emplace(Node<int, string>(19, "value"));
	bst433.emplace(Node<int, string>(4, "value"));
	bst433.emplace(Node<int, string>(13, "value"));
	bst433.emplace(Node<int, string>(1, "value"));
	bst433.emplace(Node<int, string>(9, "value"));

	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(5)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(1)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(14)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(15)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(16)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(2)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(19)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(10)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(13)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(9)->getKey());
	bst433.ascend_printout(bst433.getRoot());
	bst433.deleteNode(bst433.at(4)->getKey());



	BST<int,string> bst434(Node<int, string> (9, "RootVal"));
	bst434.emplace(Node<int, string>(6, "value"));
	bst434.emplace(Node<int, string>(8, "value"));
	bst434.emplace(Node<int, string>(11, "value"));
	bst434.emplace(Node<int, string>(7, "value"));
	bst434.emplace(Node<int, string>(3, "value"));
	bst434.emplace(Node<int, string>(4, "value"));
	bst434.emplace(Node<int, string>(17, "value"));
	bst434.emplace(Node<int, string>(12, "value"));
	bst434.emplace(Node<int, string>(18, "value"));
	bst434.emplace(Node<int, string>(2, "value"));
	bst434.emplace(Node<int, string>(10, "value"));

	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(17)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(18)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(12)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(7)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(3)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(2)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(4)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(10)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(8)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(9)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(11)->getKey());
	bst434.ascend_printout(bst434.getRoot());
	bst434.deleteNode(bst434.at(6)->getKey());



	BST<int,string> bst435(Node<int, string> (18, "RootVal"));
	bst435.emplace(Node<int, string>(15, "value"));
	bst435.emplace(Node<int, string>(1, "value"));
	bst435.emplace(Node<int, string>(6, "value"));
	bst435.emplace(Node<int, string>(19, "value"));
	bst435.emplace(Node<int, string>(8, "value"));
	bst435.emplace(Node<int, string>(17, "value"));
	bst435.emplace(Node<int, string>(20, "value"));
	bst435.emplace(Node<int, string>(12, "value"));
	bst435.emplace(Node<int, string>(9, "value"));
	bst435.emplace(Node<int, string>(5, "value"));
	bst435.emplace(Node<int, string>(10, "value"));
	bst435.emplace(Node<int, string>(16, "value"));
	bst435.emplace(Node<int, string>(14, "value"));

	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(15)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(5)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(14)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(20)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(16)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(12)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(17)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(19)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(8)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(9)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(1)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(10)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(18)->getKey());
	bst435.ascend_printout(bst435.getRoot());
	bst435.deleteNode(bst435.at(6)->getKey());



	BST<int,string> bst436(Node<int, string> (9, "RootVal"));
	bst436.emplace(Node<int, string>(12, "value"));
	bst436.emplace(Node<int, string>(4, "value"));
	bst436.emplace(Node<int, string>(2, "value"));
	bst436.emplace(Node<int, string>(8, "value"));
	bst436.emplace(Node<int, string>(14, "value"));
	bst436.emplace(Node<int, string>(5, "value"));
	bst436.emplace(Node<int, string>(3, "value"));
	bst436.emplace(Node<int, string>(15, "value"));
	bst436.emplace(Node<int, string>(6, "value"));
	bst436.emplace(Node<int, string>(18, "value"));
	bst436.emplace(Node<int, string>(13, "value"));
	bst436.emplace(Node<int, string>(20, "value"));

	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(14)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(18)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(6)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(9)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(12)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(2)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(15)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(20)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(3)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(4)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(5)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(13)->getKey());
	bst436.ascend_printout(bst436.getRoot());
	bst436.deleteNode(bst436.at(8)->getKey());



	BST<int,string> bst437(Node<int, string> (7, "RootVal"));
	bst437.emplace(Node<int, string>(6, "value"));
	bst437.emplace(Node<int, string>(10, "value"));
	bst437.emplace(Node<int, string>(19, "value"));
	bst437.emplace(Node<int, string>(17, "value"));
	bst437.emplace(Node<int, string>(15, "value"));
	bst437.emplace(Node<int, string>(11, "value"));
	bst437.emplace(Node<int, string>(20, "value"));
	bst437.emplace(Node<int, string>(16, "value"));
	bst437.emplace(Node<int, string>(13, "value"));
	bst437.emplace(Node<int, string>(4, "value"));
	bst437.emplace(Node<int, string>(9, "value"));

	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(10)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(15)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(4)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(11)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(16)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(9)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(17)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(6)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(7)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(13)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(20)->getKey());
	bst437.ascend_printout(bst437.getRoot());
	bst437.deleteNode(bst437.at(19)->getKey());



	BST<int,string> bst438(Node<int, string> (3, "RootVal"));
	bst438.emplace(Node<int, string>(17, "value"));
	bst438.emplace(Node<int, string>(14, "value"));
	bst438.emplace(Node<int, string>(4, "value"));
	bst438.emplace(Node<int, string>(7, "value"));
	bst438.emplace(Node<int, string>(20, "value"));
	bst438.emplace(Node<int, string>(9, "value"));
	bst438.emplace(Node<int, string>(8, "value"));
	bst438.emplace(Node<int, string>(2, "value"));
	bst438.emplace(Node<int, string>(13, "value"));
	bst438.emplace(Node<int, string>(18, "value"));
	bst438.emplace(Node<int, string>(6, "value"));
	bst438.emplace(Node<int, string>(16, "value"));

	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(17)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(8)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(18)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(4)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(3)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(6)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(14)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(16)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(7)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(20)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(9)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(2)->getKey());
	bst438.ascend_printout(bst438.getRoot());
	bst438.deleteNode(bst438.at(13)->getKey());



	BST<int,string> bst439(Node<int, string> (14, "RootVal"));
	bst439.emplace(Node<int, string>(18, "value"));
	bst439.emplace(Node<int, string>(15, "value"));
	bst439.emplace(Node<int, string>(8, "value"));
	bst439.emplace(Node<int, string>(5, "value"));
	bst439.emplace(Node<int, string>(13, "value"));
	bst439.emplace(Node<int, string>(17, "value"));
	bst439.emplace(Node<int, string>(9, "value"));
	bst439.emplace(Node<int, string>(2, "value"));
	bst439.emplace(Node<int, string>(19, "value"));
	bst439.emplace(Node<int, string>(11, "value"));
	bst439.emplace(Node<int, string>(4, "value"));
	bst439.emplace(Node<int, string>(3, "value"));

	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(4)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(11)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(17)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(15)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(9)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(2)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(13)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(19)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(3)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(8)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(14)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(18)->getKey());
	bst439.ascend_printout(bst439.getRoot());
	bst439.deleteNode(bst439.at(5)->getKey());



	BST<int,string> bst440(Node<int, string> (7, "RootVal"));
	bst440.emplace(Node<int, string>(5, "value"));
	bst440.emplace(Node<int, string>(10, "value"));
	bst440.emplace(Node<int, string>(1, "value"));
	bst440.emplace(Node<int, string>(17, "value"));
	bst440.emplace(Node<int, string>(18, "value"));
	bst440.emplace(Node<int, string>(2, "value"));
	bst440.emplace(Node<int, string>(4, "value"));
	bst440.emplace(Node<int, string>(9, "value"));
	bst440.emplace(Node<int, string>(8, "value"));
	bst440.emplace(Node<int, string>(16, "value"));
	bst440.emplace(Node<int, string>(6, "value"));

	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(5)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(10)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(17)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(1)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(18)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(7)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(16)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(6)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(2)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(9)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(8)->getKey());
	bst440.ascend_printout(bst440.getRoot());
	bst440.deleteNode(bst440.at(4)->getKey());



	BST<int,string> bst441(Node<int, string> (19, "RootVal"));
	bst441.emplace(Node<int, string>(13, "value"));
	bst441.emplace(Node<int, string>(4, "value"));
	bst441.emplace(Node<int, string>(1, "value"));
	bst441.emplace(Node<int, string>(3, "value"));
	bst441.emplace(Node<int, string>(2, "value"));
	bst441.emplace(Node<int, string>(7, "value"));
	bst441.emplace(Node<int, string>(16, "value"));
	bst441.emplace(Node<int, string>(11, "value"));
	bst441.emplace(Node<int, string>(20, "value"));
	bst441.emplace(Node<int, string>(10, "value"));
	bst441.emplace(Node<int, string>(18, "value"));
	bst441.emplace(Node<int, string>(14, "value"));
	bst441.emplace(Node<int, string>(17, "value"));

	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(1)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(7)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(13)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(10)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(17)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(11)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(19)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(18)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(3)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(16)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(14)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(2)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(20)->getKey());
	bst441.ascend_printout(bst441.getRoot());
	bst441.deleteNode(bst441.at(4)->getKey());



	BST<int,string> bst442(Node<int, string> (1, "RootVal"));
	bst442.emplace(Node<int, string>(15, "value"));
	bst442.emplace(Node<int, string>(3, "value"));
	bst442.emplace(Node<int, string>(8, "value"));
	bst442.emplace(Node<int, string>(5, "value"));
	bst442.emplace(Node<int, string>(9, "value"));
	bst442.emplace(Node<int, string>(10, "value"));
	bst442.emplace(Node<int, string>(14, "value"));
	bst442.emplace(Node<int, string>(17, "value"));
	bst442.emplace(Node<int, string>(16, "value"));
	bst442.emplace(Node<int, string>(13, "value"));
	bst442.emplace(Node<int, string>(2, "value"));
	bst442.emplace(Node<int, string>(7, "value"));

	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(13)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(8)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(16)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(2)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(17)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(3)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(14)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(7)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(9)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(15)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(1)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(10)->getKey());
	bst442.ascend_printout(bst442.getRoot());
	bst442.deleteNode(bst442.at(5)->getKey());



	BST<int,string> bst443(Node<int, string> (8, "RootVal"));
	bst443.emplace(Node<int, string>(15, "value"));
	bst443.emplace(Node<int, string>(17, "value"));
	bst443.emplace(Node<int, string>(3, "value"));
	bst443.emplace(Node<int, string>(14, "value"));
	bst443.emplace(Node<int, string>(11, "value"));
	bst443.emplace(Node<int, string>(5, "value"));
	bst443.emplace(Node<int, string>(6, "value"));
	bst443.emplace(Node<int, string>(19, "value"));
	bst443.emplace(Node<int, string>(16, "value"));
	bst443.emplace(Node<int, string>(7, "value"));
	bst443.emplace(Node<int, string>(13, "value"));
	bst443.emplace(Node<int, string>(4, "value"));

	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(8)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(5)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(13)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(4)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(19)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(3)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(16)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(14)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(11)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(17)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(15)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(7)->getKey());
	bst443.ascend_printout(bst443.getRoot());
	bst443.deleteNode(bst443.at(6)->getKey());



	BST<int,string> bst444(Node<int, string> (13, "RootVal"));
	bst444.emplace(Node<int, string>(7, "value"));
	bst444.emplace(Node<int, string>(3, "value"));
	bst444.emplace(Node<int, string>(14, "value"));
	bst444.emplace(Node<int, string>(10, "value"));
	bst444.emplace(Node<int, string>(16, "value"));
	bst444.emplace(Node<int, string>(6, "value"));
	bst444.emplace(Node<int, string>(4, "value"));
	bst444.emplace(Node<int, string>(9, "value"));
	bst444.emplace(Node<int, string>(20, "value"));
	bst444.emplace(Node<int, string>(12, "value"));
	bst444.emplace(Node<int, string>(19, "value"));
	bst444.emplace(Node<int, string>(8, "value"));
	bst444.emplace(Node<int, string>(15, "value"));

	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(8)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(12)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(3)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(4)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(6)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(15)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(14)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(7)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(9)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(10)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(13)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(20)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(16)->getKey());
	bst444.ascend_printout(bst444.getRoot());
	bst444.deleteNode(bst444.at(19)->getKey());



	BST<int,string> bst445(Node<int, string> (5, "RootVal"));
	bst445.emplace(Node<int, string>(1, "value"));
	bst445.emplace(Node<int, string>(19, "value"));
	bst445.emplace(Node<int, string>(12, "value"));
	bst445.emplace(Node<int, string>(14, "value"));
	bst445.emplace(Node<int, string>(6, "value"));
	bst445.emplace(Node<int, string>(11, "value"));
	bst445.emplace(Node<int, string>(7, "value"));
	bst445.emplace(Node<int, string>(8, "value"));
	bst445.emplace(Node<int, string>(9, "value"));
	bst445.emplace(Node<int, string>(13, "value"));
	bst445.emplace(Node<int, string>(4, "value"));

	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(4)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(12)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(8)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(6)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(7)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(11)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(14)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(13)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(19)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(5)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(9)->getKey());
	bst445.ascend_printout(bst445.getRoot());
	bst445.deleteNode(bst445.at(1)->getKey());



	BST<int,string> bst446(Node<int, string> (11, "RootVal"));
	bst446.emplace(Node<int, string>(3, "value"));
	bst446.emplace(Node<int, string>(19, "value"));
	bst446.emplace(Node<int, string>(5, "value"));
	bst446.emplace(Node<int, string>(13, "value"));
	bst446.emplace(Node<int, string>(2, "value"));
	bst446.emplace(Node<int, string>(15, "value"));
	bst446.emplace(Node<int, string>(4, "value"));
	bst446.emplace(Node<int, string>(20, "value"));
	bst446.emplace(Node<int, string>(7, "value"));
	bst446.emplace(Node<int, string>(14, "value"));
	bst446.emplace(Node<int, string>(10, "value"));

	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(19)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(7)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(13)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(20)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(10)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(11)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(14)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(5)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(3)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(4)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(2)->getKey());
	bst446.ascend_printout(bst446.getRoot());
	bst446.deleteNode(bst446.at(15)->getKey());



	BST<int,string> bst447(Node<int, string> (13, "RootVal"));
	bst447.emplace(Node<int, string>(19, "value"));
	bst447.emplace(Node<int, string>(17, "value"));
	bst447.emplace(Node<int, string>(16, "value"));
	bst447.emplace(Node<int, string>(3, "value"));
	bst447.emplace(Node<int, string>(7, "value"));
	bst447.emplace(Node<int, string>(11, "value"));
	bst447.emplace(Node<int, string>(14, "value"));
	bst447.emplace(Node<int, string>(9, "value"));
	bst447.emplace(Node<int, string>(6, "value"));
	bst447.emplace(Node<int, string>(15, "value"));
	bst447.emplace(Node<int, string>(10, "value"));
	bst447.emplace(Node<int, string>(4, "value"));
	bst447.emplace(Node<int, string>(8, "value"));

	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(16)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(10)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(14)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(8)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(17)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(15)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(3)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(7)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(6)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(13)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(9)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(4)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(11)->getKey());
	bst447.ascend_printout(bst447.getRoot());
	bst447.deleteNode(bst447.at(19)->getKey());



	BST<int,string> bst448(Node<int, string> (14, "RootVal"));
	bst448.emplace(Node<int, string>(13, "value"));
	bst448.emplace(Node<int, string>(12, "value"));
	bst448.emplace(Node<int, string>(1, "value"));
	bst448.emplace(Node<int, string>(7, "value"));
	bst448.emplace(Node<int, string>(17, "value"));
	bst448.emplace(Node<int, string>(4, "value"));
	bst448.emplace(Node<int, string>(15, "value"));
	bst448.emplace(Node<int, string>(19, "value"));
	bst448.emplace(Node<int, string>(6, "value"));
	bst448.emplace(Node<int, string>(5, "value"));

	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(14)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(15)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(12)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(7)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(17)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(13)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(1)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(6)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(4)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(5)->getKey());
	bst448.ascend_printout(bst448.getRoot());
	bst448.deleteNode(bst448.at(19)->getKey());



	BST<int,string> bst449(Node<int, string> (17, "RootVal"));
	bst449.emplace(Node<int, string>(11, "value"));
	bst449.emplace(Node<int, string>(7, "value"));
	bst449.emplace(Node<int, string>(19, "value"));
	bst449.emplace(Node<int, string>(16, "value"));
	bst449.emplace(Node<int, string>(2, "value"));
	bst449.emplace(Node<int, string>(8, "value"));
	bst449.emplace(Node<int, string>(1, "value"));
	bst449.emplace(Node<int, string>(15, "value"));
	bst449.emplace(Node<int, string>(3, "value"));
	bst449.emplace(Node<int, string>(13, "value"));

	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(3)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(7)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(8)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(16)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(17)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(15)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(1)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(2)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(11)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(13)->getKey());
	bst449.ascend_printout(bst449.getRoot());
	bst449.deleteNode(bst449.at(19)->getKey());



	BST<int,string> bst450(Node<int, string> (8, "RootVal"));
	bst450.emplace(Node<int, string>(3, "value"));
	bst450.emplace(Node<int, string>(11, "value"));
	bst450.emplace(Node<int, string>(4, "value"));
	bst450.emplace(Node<int, string>(1, "value"));
	bst450.emplace(Node<int, string>(14, "value"));
	bst450.emplace(Node<int, string>(10, "value"));
	bst450.emplace(Node<int, string>(12, "value"));
	bst450.emplace(Node<int, string>(19, "value"));
	bst450.emplace(Node<int, string>(2, "value"));
	bst450.emplace(Node<int, string>(6, "value"));
	bst450.emplace(Node<int, string>(15, "value"));

	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(3)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(1)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(10)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(4)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(6)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(11)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(12)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(19)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(15)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(2)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(14)->getKey());
	bst450.ascend_printout(bst450.getRoot());
	bst450.deleteNode(bst450.at(8)->getKey());



	BST<int,string> bst451(Node<int, string> (15, "RootVal"));
	bst451.emplace(Node<int, string>(10, "value"));
	bst451.emplace(Node<int, string>(12, "value"));
	bst451.emplace(Node<int, string>(13, "value"));
	bst451.emplace(Node<int, string>(17, "value"));
	bst451.emplace(Node<int, string>(14, "value"));
	bst451.emplace(Node<int, string>(1, "value"));
	bst451.emplace(Node<int, string>(3, "value"));
	bst451.emplace(Node<int, string>(16, "value"));
	bst451.emplace(Node<int, string>(8, "value"));
	bst451.emplace(Node<int, string>(20, "value"));
	bst451.emplace(Node<int, string>(18, "value"));
	bst451.emplace(Node<int, string>(19, "value"));

	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(20)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(10)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(18)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(14)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(19)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(12)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(8)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(16)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(3)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(15)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(1)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(17)->getKey());
	bst451.ascend_printout(bst451.getRoot());
	bst451.deleteNode(bst451.at(13)->getKey());



	BST<int,string> bst452(Node<int, string> (5, "RootVal"));
	bst452.emplace(Node<int, string>(8, "value"));
	bst452.emplace(Node<int, string>(20, "value"));
	bst452.emplace(Node<int, string>(6, "value"));
	bst452.emplace(Node<int, string>(10, "value"));
	bst452.emplace(Node<int, string>(4, "value"));
	bst452.emplace(Node<int, string>(3, "value"));
	bst452.emplace(Node<int, string>(9, "value"));
	bst452.emplace(Node<int, string>(19, "value"));
	bst452.emplace(Node<int, string>(7, "value"));
	bst452.emplace(Node<int, string>(16, "value"));
	bst452.emplace(Node<int, string>(18, "value"));
	bst452.emplace(Node<int, string>(2, "value"));
	bst452.emplace(Node<int, string>(14, "value"));

	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(20)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(3)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(6)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(5)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(18)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(4)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(10)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(16)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(14)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(2)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(19)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(7)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(9)->getKey());
	bst452.ascend_printout(bst452.getRoot());
	bst452.deleteNode(bst452.at(8)->getKey());



	BST<int,string> bst453(Node<int, string> (3, "RootVal"));
	bst453.emplace(Node<int, string>(19, "value"));
	bst453.emplace(Node<int, string>(10, "value"));
	bst453.emplace(Node<int, string>(2, "value"));
	bst453.emplace(Node<int, string>(16, "value"));
	bst453.emplace(Node<int, string>(8, "value"));
	bst453.emplace(Node<int, string>(13, "value"));
	bst453.emplace(Node<int, string>(4, "value"));
	bst453.emplace(Node<int, string>(14, "value"));
	bst453.emplace(Node<int, string>(9, "value"));
	bst453.emplace(Node<int, string>(12, "value"));

	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(2)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(12)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(3)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(19)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(8)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(4)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(14)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(10)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(16)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(13)->getKey());
	bst453.ascend_printout(bst453.getRoot());
	bst453.deleteNode(bst453.at(9)->getKey());



	BST<int,string> bst454(Node<int, string> (15, "RootVal"));
	bst454.emplace(Node<int, string>(12, "value"));
	bst454.emplace(Node<int, string>(9, "value"));
	bst454.emplace(Node<int, string>(4, "value"));
	bst454.emplace(Node<int, string>(1, "value"));
	bst454.emplace(Node<int, string>(6, "value"));
	bst454.emplace(Node<int, string>(2, "value"));
	bst454.emplace(Node<int, string>(16, "value"));
	bst454.emplace(Node<int, string>(5, "value"));
	bst454.emplace(Node<int, string>(13, "value"));
	bst454.emplace(Node<int, string>(8, "value"));
	bst454.emplace(Node<int, string>(20, "value"));
	bst454.emplace(Node<int, string>(14, "value"));
	bst454.emplace(Node<int, string>(3, "value"));

	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(20)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(2)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(9)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(16)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(6)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(15)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(8)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(4)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(14)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(12)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(3)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(1)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(5)->getKey());
	bst454.ascend_printout(bst454.getRoot());
	bst454.deleteNode(bst454.at(13)->getKey());



	BST<int,string> bst455(Node<int, string> (2, "RootVal"));
	bst455.emplace(Node<int, string>(16, "value"));
	bst455.emplace(Node<int, string>(18, "value"));
	bst455.emplace(Node<int, string>(8, "value"));
	bst455.emplace(Node<int, string>(13, "value"));
	bst455.emplace(Node<int, string>(17, "value"));
	bst455.emplace(Node<int, string>(20, "value"));
	bst455.emplace(Node<int, string>(9, "value"));
	bst455.emplace(Node<int, string>(3, "value"));
	bst455.emplace(Node<int, string>(5, "value"));
	bst455.emplace(Node<int, string>(19, "value"));
	bst455.emplace(Node<int, string>(11, "value"));
	bst455.emplace(Node<int, string>(6, "value"));
	bst455.emplace(Node<int, string>(10, "value"));

	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(19)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(17)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(20)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(8)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(5)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(10)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(6)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(13)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(2)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(18)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(3)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(9)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(16)->getKey());
	bst455.ascend_printout(bst455.getRoot());
	bst455.deleteNode(bst455.at(11)->getKey());



	BST<int,string> bst456(Node<int, string> (15, "RootVal"));
	bst456.emplace(Node<int, string>(2, "value"));
	bst456.emplace(Node<int, string>(4, "value"));
	bst456.emplace(Node<int, string>(13, "value"));
	bst456.emplace(Node<int, string>(10, "value"));
	bst456.emplace(Node<int, string>(9, "value"));
	bst456.emplace(Node<int, string>(19, "value"));
	bst456.emplace(Node<int, string>(12, "value"));
	bst456.emplace(Node<int, string>(1, "value"));
	bst456.emplace(Node<int, string>(3, "value"));
	bst456.emplace(Node<int, string>(14, "value"));
	bst456.emplace(Node<int, string>(7, "value"));

	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(10)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(12)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(1)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(14)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(3)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(7)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(2)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(4)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(15)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(9)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(13)->getKey());
	bst456.ascend_printout(bst456.getRoot());
	bst456.deleteNode(bst456.at(19)->getKey());



	BST<int,string> bst457(Node<int, string> (1, "RootVal"));
	bst457.emplace(Node<int, string>(13, "value"));
	bst457.emplace(Node<int, string>(18, "value"));
	bst457.emplace(Node<int, string>(14, "value"));
	bst457.emplace(Node<int, string>(4, "value"));
	bst457.emplace(Node<int, string>(3, "value"));
	bst457.emplace(Node<int, string>(17, "value"));
	bst457.emplace(Node<int, string>(11, "value"));
	bst457.emplace(Node<int, string>(16, "value"));
	bst457.emplace(Node<int, string>(2, "value"));
	bst457.emplace(Node<int, string>(19, "value"));
	bst457.emplace(Node<int, string>(6, "value"));
	bst457.emplace(Node<int, string>(7, "value"));
	bst457.emplace(Node<int, string>(12, "value"));
	bst457.emplace(Node<int, string>(20, "value"));

	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(1)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(7)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(2)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(18)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(16)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(14)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(6)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(4)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(19)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(20)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(17)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(13)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(11)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(12)->getKey());
	bst457.ascend_printout(bst457.getRoot());
	bst457.deleteNode(bst457.at(3)->getKey());



	BST<int,string> bst458(Node<int, string> (17, "RootVal"));
	bst458.emplace(Node<int, string>(8, "value"));
	bst458.emplace(Node<int, string>(19, "value"));
	bst458.emplace(Node<int, string>(12, "value"));
	bst458.emplace(Node<int, string>(11, "value"));
	bst458.emplace(Node<int, string>(16, "value"));
	bst458.emplace(Node<int, string>(4, "value"));
	bst458.emplace(Node<int, string>(6, "value"));
	bst458.emplace(Node<int, string>(7, "value"));
	bst458.emplace(Node<int, string>(9, "value"));
	bst458.emplace(Node<int, string>(3, "value"));
	bst458.emplace(Node<int, string>(2, "value"));
	bst458.emplace(Node<int, string>(14, "value"));
	bst458.emplace(Node<int, string>(5, "value"));
	bst458.emplace(Node<int, string>(1, "value"));

	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(12)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(1)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(5)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(19)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(17)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(6)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(3)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(8)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(4)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(7)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(11)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(14)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(2)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(16)->getKey());
	bst458.ascend_printout(bst458.getRoot());
	bst458.deleteNode(bst458.at(9)->getKey());



	BST<int,string> bst459(Node<int, string> (3, "RootVal"));
	bst459.emplace(Node<int, string>(17, "value"));
	bst459.emplace(Node<int, string>(1, "value"));
	bst459.emplace(Node<int, string>(2, "value"));
	bst459.emplace(Node<int, string>(16, "value"));
	bst459.emplace(Node<int, string>(11, "value"));
	bst459.emplace(Node<int, string>(6, "value"));
	bst459.emplace(Node<int, string>(18, "value"));
	bst459.emplace(Node<int, string>(10, "value"));
	bst459.emplace(Node<int, string>(5, "value"));
	bst459.emplace(Node<int, string>(4, "value"));
	bst459.emplace(Node<int, string>(12, "value"));
	bst459.emplace(Node<int, string>(7, "value"));

	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(12)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(17)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(6)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(1)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(18)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(16)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(2)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(4)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(3)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(5)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(10)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(7)->getKey());
	bst459.ascend_printout(bst459.getRoot());
	bst459.deleteNode(bst459.at(11)->getKey());



	BST<int,string> bst460(Node<int, string> (19, "RootVal"));
	bst460.emplace(Node<int, string>(12, "value"));
	bst460.emplace(Node<int, string>(9, "value"));
	bst460.emplace(Node<int, string>(4, "value"));
	bst460.emplace(Node<int, string>(15, "value"));
	bst460.emplace(Node<int, string>(13, "value"));
	bst460.emplace(Node<int, string>(10, "value"));
	bst460.emplace(Node<int, string>(3, "value"));
	bst460.emplace(Node<int, string>(20, "value"));
	bst460.emplace(Node<int, string>(8, "value"));
	bst460.emplace(Node<int, string>(17, "value"));
	bst460.emplace(Node<int, string>(16, "value"));

	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(9)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(13)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(4)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(8)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(15)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(17)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(10)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(3)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(19)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(12)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(16)->getKey());
	bst460.ascend_printout(bst460.getRoot());
	bst460.deleteNode(bst460.at(20)->getKey());



	BST<int,string> bst461(Node<int, string> (14, "RootVal"));
	bst461.emplace(Node<int, string>(20, "value"));
	bst461.emplace(Node<int, string>(4, "value"));
	bst461.emplace(Node<int, string>(2, "value"));
	bst461.emplace(Node<int, string>(6, "value"));
	bst461.emplace(Node<int, string>(9, "value"));
	bst461.emplace(Node<int, string>(7, "value"));
	bst461.emplace(Node<int, string>(16, "value"));
	bst461.emplace(Node<int, string>(10, "value"));
	bst461.emplace(Node<int, string>(11, "value"));
	bst461.emplace(Node<int, string>(12, "value"));
	bst461.emplace(Node<int, string>(18, "value"));

	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(20)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(7)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(16)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(10)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(12)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(9)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(14)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(11)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(4)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(6)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(2)->getKey());
	bst461.ascend_printout(bst461.getRoot());
	bst461.deleteNode(bst461.at(18)->getKey());



	BST<int,string> bst462(Node<int, string> (16, "RootVal"));
	bst462.emplace(Node<int, string>(5, "value"));
	bst462.emplace(Node<int, string>(19, "value"));
	bst462.emplace(Node<int, string>(2, "value"));
	bst462.emplace(Node<int, string>(11, "value"));
	bst462.emplace(Node<int, string>(12, "value"));
	bst462.emplace(Node<int, string>(1, "value"));
	bst462.emplace(Node<int, string>(4, "value"));
	bst462.emplace(Node<int, string>(13, "value"));
	bst462.emplace(Node<int, string>(17, "value"));
	bst462.emplace(Node<int, string>(8, "value"));
	bst462.emplace(Node<int, string>(10, "value"));

	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(2)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(17)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(16)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(10)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(4)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(1)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(19)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(13)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(11)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(5)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(12)->getKey());
	bst462.ascend_printout(bst462.getRoot());
	bst462.deleteNode(bst462.at(8)->getKey());



	BST<int,string> bst463(Node<int, string> (15, "RootVal"));
	bst463.emplace(Node<int, string>(8, "value"));
	bst463.emplace(Node<int, string>(3, "value"));
	bst463.emplace(Node<int, string>(11, "value"));
	bst463.emplace(Node<int, string>(20, "value"));
	bst463.emplace(Node<int, string>(2, "value"));
	bst463.emplace(Node<int, string>(5, "value"));
	bst463.emplace(Node<int, string>(6, "value"));
	bst463.emplace(Node<int, string>(7, "value"));
	bst463.emplace(Node<int, string>(12, "value"));
	bst463.emplace(Node<int, string>(10, "value"));

	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(7)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(5)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(15)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(2)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(8)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(20)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(12)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(3)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(11)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(6)->getKey());
	bst463.ascend_printout(bst463.getRoot());
	bst463.deleteNode(bst463.at(10)->getKey());



	BST<int,string> bst464(Node<int, string> (5, "RootVal"));
	bst464.emplace(Node<int, string>(3, "value"));
	bst464.emplace(Node<int, string>(9, "value"));
	bst464.emplace(Node<int, string>(6, "value"));
	bst464.emplace(Node<int, string>(11, "value"));
	bst464.emplace(Node<int, string>(4, "value"));
	bst464.emplace(Node<int, string>(20, "value"));
	bst464.emplace(Node<int, string>(2, "value"));
	bst464.emplace(Node<int, string>(15, "value"));
	bst464.emplace(Node<int, string>(8, "value"));
	bst464.emplace(Node<int, string>(14, "value"));
	bst464.emplace(Node<int, string>(13, "value"));
	bst464.emplace(Node<int, string>(1, "value"));

	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(2)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(4)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(14)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(11)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(8)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(9)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(20)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(1)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(15)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(5)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(3)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(6)->getKey());
	bst464.ascend_printout(bst464.getRoot());
	bst464.deleteNode(bst464.at(13)->getKey());



	BST<int,string> bst465(Node<int, string> (6, "RootVal"));
	bst465.emplace(Node<int, string>(2, "value"));
	bst465.emplace(Node<int, string>(10, "value"));
	bst465.emplace(Node<int, string>(8, "value"));
	bst465.emplace(Node<int, string>(5, "value"));
	bst465.emplace(Node<int, string>(18, "value"));
	bst465.emplace(Node<int, string>(7, "value"));
	bst465.emplace(Node<int, string>(4, "value"));
	bst465.emplace(Node<int, string>(16, "value"));
	bst465.emplace(Node<int, string>(12, "value"));
	bst465.emplace(Node<int, string>(15, "value"));
	bst465.emplace(Node<int, string>(13, "value"));
	bst465.emplace(Node<int, string>(11, "value"));

	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(13)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(6)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(15)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(7)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(11)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(16)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(12)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(4)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(5)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(2)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(8)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(18)->getKey());
	bst465.ascend_printout(bst465.getRoot());
	bst465.deleteNode(bst465.at(10)->getKey());



	BST<int,string> bst466(Node<int, string> (5, "RootVal"));
	bst466.emplace(Node<int, string>(15, "value"));
	bst466.emplace(Node<int, string>(4, "value"));
	bst466.emplace(Node<int, string>(16, "value"));
	bst466.emplace(Node<int, string>(3, "value"));
	bst466.emplace(Node<int, string>(7, "value"));
	bst466.emplace(Node<int, string>(10, "value"));
	bst466.emplace(Node<int, string>(2, "value"));
	bst466.emplace(Node<int, string>(9, "value"));
	bst466.emplace(Node<int, string>(20, "value"));
	bst466.emplace(Node<int, string>(8, "value"));
	bst466.emplace(Node<int, string>(18, "value"));
	bst466.emplace(Node<int, string>(14, "value"));

	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(15)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(14)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(20)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(9)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(4)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(10)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(2)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(7)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(3)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(8)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(16)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(18)->getKey());
	bst466.ascend_printout(bst466.getRoot());
	bst466.deleteNode(bst466.at(5)->getKey());



	BST<int,string> bst467(Node<int, string> (2, "RootVal"));
	bst467.emplace(Node<int, string>(13, "value"));
	bst467.emplace(Node<int, string>(7, "value"));
	bst467.emplace(Node<int, string>(16, "value"));
	bst467.emplace(Node<int, string>(10, "value"));
	bst467.emplace(Node<int, string>(14, "value"));
	bst467.emplace(Node<int, string>(15, "value"));
	bst467.emplace(Node<int, string>(20, "value"));
	bst467.emplace(Node<int, string>(3, "value"));
	bst467.emplace(Node<int, string>(11, "value"));
	bst467.emplace(Node<int, string>(19, "value"));
	bst467.emplace(Node<int, string>(6, "value"));
	bst467.emplace(Node<int, string>(4, "value"));
	bst467.emplace(Node<int, string>(18, "value"));
	bst467.emplace(Node<int, string>(9, "value"));

	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(4)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(9)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(2)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(16)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(11)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(6)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(20)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(18)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(3)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(14)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(19)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(7)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(15)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(13)->getKey());
	bst467.ascend_printout(bst467.getRoot());
	bst467.deleteNode(bst467.at(10)->getKey());



	BST<int,string> bst468(Node<int, string> (15, "RootVal"));
	bst468.emplace(Node<int, string>(4, "value"));
	bst468.emplace(Node<int, string>(17, "value"));
	bst468.emplace(Node<int, string>(9, "value"));
	bst468.emplace(Node<int, string>(11, "value"));
	bst468.emplace(Node<int, string>(19, "value"));
	bst468.emplace(Node<int, string>(14, "value"));
	bst468.emplace(Node<int, string>(2, "value"));
	bst468.emplace(Node<int, string>(3, "value"));
	bst468.emplace(Node<int, string>(1, "value"));
	bst468.emplace(Node<int, string>(6, "value"));
	bst468.emplace(Node<int, string>(8, "value"));
	bst468.emplace(Node<int, string>(20, "value"));

	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(6)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(19)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(17)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(14)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(3)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(8)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(9)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(2)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(11)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(4)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(1)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(20)->getKey());
	bst468.ascend_printout(bst468.getRoot());
	bst468.deleteNode(bst468.at(15)->getKey());



	BST<int,string> bst469(Node<int, string> (16, "RootVal"));
	bst469.emplace(Node<int, string>(4, "value"));
	bst469.emplace(Node<int, string>(2, "value"));
	bst469.emplace(Node<int, string>(7, "value"));
	bst469.emplace(Node<int, string>(12, "value"));
	bst469.emplace(Node<int, string>(15, "value"));
	bst469.emplace(Node<int, string>(20, "value"));
	bst469.emplace(Node<int, string>(13, "value"));
	bst469.emplace(Node<int, string>(3, "value"));
	bst469.emplace(Node<int, string>(8, "value"));
	bst469.emplace(Node<int, string>(1, "value"));
	bst469.emplace(Node<int, string>(18, "value"));
	bst469.emplace(Node<int, string>(17, "value"));

	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(18)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(7)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(2)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(4)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(16)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(13)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(1)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(15)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(3)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(20)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(17)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(12)->getKey());
	bst469.ascend_printout(bst469.getRoot());
	bst469.deleteNode(bst469.at(8)->getKey());



	BST<int,string> bst470(Node<int, string> (1, "RootVal"));
	bst470.emplace(Node<int, string>(9, "value"));
	bst470.emplace(Node<int, string>(3, "value"));
	bst470.emplace(Node<int, string>(5, "value"));
	bst470.emplace(Node<int, string>(20, "value"));
	bst470.emplace(Node<int, string>(19, "value"));
	bst470.emplace(Node<int, string>(6, "value"));
	bst470.emplace(Node<int, string>(14, "value"));
	bst470.emplace(Node<int, string>(17, "value"));
	bst470.emplace(Node<int, string>(16, "value"));
	bst470.emplace(Node<int, string>(4, "value"));
	bst470.emplace(Node<int, string>(15, "value"));
	bst470.emplace(Node<int, string>(11, "value"));

	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(14)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(15)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(5)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(17)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(4)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(3)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(16)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(9)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(11)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(6)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(19)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(1)->getKey());
	bst470.ascend_printout(bst470.getRoot());
	bst470.deleteNode(bst470.at(20)->getKey());



	BST<int,string> bst471(Node<int, string> (19, "RootVal"));
	bst471.emplace(Node<int, string>(15, "value"));
	bst471.emplace(Node<int, string>(5, "value"));
	bst471.emplace(Node<int, string>(8, "value"));
	bst471.emplace(Node<int, string>(12, "value"));
	bst471.emplace(Node<int, string>(17, "value"));
	bst471.emplace(Node<int, string>(1, "value"));
	bst471.emplace(Node<int, string>(3, "value"));
	bst471.emplace(Node<int, string>(10, "value"));
	bst471.emplace(Node<int, string>(20, "value"));
	bst471.emplace(Node<int, string>(4, "value"));
	bst471.emplace(Node<int, string>(13, "value"));
	bst471.emplace(Node<int, string>(14, "value"));
	bst471.emplace(Node<int, string>(7, "value"));
	bst471.emplace(Node<int, string>(2, "value"));

	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(7)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(5)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(12)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(8)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(13)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(2)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(15)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(3)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(4)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(10)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(20)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(1)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(19)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(14)->getKey());
	bst471.ascend_printout(bst471.getRoot());
	bst471.deleteNode(bst471.at(17)->getKey());



	BST<int,string> bst472(Node<int, string> (20, "RootVal"));
	bst472.emplace(Node<int, string>(12, "value"));
	bst472.emplace(Node<int, string>(5, "value"));
	bst472.emplace(Node<int, string>(11, "value"));
	bst472.emplace(Node<int, string>(18, "value"));
	bst472.emplace(Node<int, string>(17, "value"));
	bst472.emplace(Node<int, string>(10, "value"));
	bst472.emplace(Node<int, string>(15, "value"));
	bst472.emplace(Node<int, string>(3, "value"));
	bst472.emplace(Node<int, string>(8, "value"));
	bst472.emplace(Node<int, string>(1, "value"));
	bst472.emplace(Node<int, string>(7, "value"));
	bst472.emplace(Node<int, string>(19, "value"));

	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(10)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(18)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(12)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(1)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(11)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(3)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(15)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(5)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(20)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(17)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(19)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(8)->getKey());
	bst472.ascend_printout(bst472.getRoot());
	bst472.deleteNode(bst472.at(7)->getKey());



	BST<int,string> bst473(Node<int, string> (18, "RootVal"));
	bst473.emplace(Node<int, string>(19, "value"));
	bst473.emplace(Node<int, string>(1, "value"));
	bst473.emplace(Node<int, string>(16, "value"));
	bst473.emplace(Node<int, string>(13, "value"));
	bst473.emplace(Node<int, string>(4, "value"));
	bst473.emplace(Node<int, string>(5, "value"));
	bst473.emplace(Node<int, string>(12, "value"));
	bst473.emplace(Node<int, string>(15, "value"));
	bst473.emplace(Node<int, string>(8, "value"));
	bst473.emplace(Node<int, string>(3, "value"));
	bst473.emplace(Node<int, string>(6, "value"));
	bst473.emplace(Node<int, string>(7, "value"));
	bst473.emplace(Node<int, string>(10, "value"));
	bst473.emplace(Node<int, string>(20, "value"));

	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(1)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(12)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(19)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(18)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(10)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(6)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(7)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(4)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(13)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(5)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(15)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(20)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(3)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(8)->getKey());
	bst473.ascend_printout(bst473.getRoot());
	bst473.deleteNode(bst473.at(16)->getKey());



	BST<int,string> bst474(Node<int, string> (18, "RootVal"));
	bst474.emplace(Node<int, string>(16, "value"));
	bst474.emplace(Node<int, string>(2, "value"));
	bst474.emplace(Node<int, string>(9, "value"));
	bst474.emplace(Node<int, string>(13, "value"));
	bst474.emplace(Node<int, string>(6, "value"));
	bst474.emplace(Node<int, string>(11, "value"));
	bst474.emplace(Node<int, string>(17, "value"));
	bst474.emplace(Node<int, string>(1, "value"));
	bst474.emplace(Node<int, string>(20, "value"));
	bst474.emplace(Node<int, string>(7, "value"));
	bst474.emplace(Node<int, string>(3, "value"));
	bst474.emplace(Node<int, string>(15, "value"));

	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(9)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(1)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(18)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(2)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(13)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(11)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(17)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(7)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(16)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(3)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(20)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(15)->getKey());
	bst474.ascend_printout(bst474.getRoot());
	bst474.deleteNode(bst474.at(6)->getKey());



	BST<int,string> bst475(Node<int, string> (4, "RootVal"));
	bst475.emplace(Node<int, string>(3, "value"));
	bst475.emplace(Node<int, string>(9, "value"));
	bst475.emplace(Node<int, string>(7, "value"));
	bst475.emplace(Node<int, string>(18, "value"));
	bst475.emplace(Node<int, string>(17, "value"));
	bst475.emplace(Node<int, string>(8, "value"));
	bst475.emplace(Node<int, string>(5, "value"));
	bst475.emplace(Node<int, string>(20, "value"));
	bst475.emplace(Node<int, string>(13, "value"));
	bst475.emplace(Node<int, string>(15, "value"));
	bst475.emplace(Node<int, string>(16, "value"));

	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(9)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(5)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(3)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(7)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(18)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(20)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(4)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(13)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(15)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(16)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(17)->getKey());
	bst475.ascend_printout(bst475.getRoot());
	bst475.deleteNode(bst475.at(8)->getKey());



	BST<int,string> bst476(Node<int, string> (11, "RootVal"));
	bst476.emplace(Node<int, string>(1, "value"));
	bst476.emplace(Node<int, string>(13, "value"));
	bst476.emplace(Node<int, string>(20, "value"));
	bst476.emplace(Node<int, string>(9, "value"));
	bst476.emplace(Node<int, string>(5, "value"));
	bst476.emplace(Node<int, string>(19, "value"));
	bst476.emplace(Node<int, string>(4, "value"));
	bst476.emplace(Node<int, string>(10, "value"));
	bst476.emplace(Node<int, string>(15, "value"));
	bst476.emplace(Node<int, string>(2, "value"));
	bst476.emplace(Node<int, string>(7, "value"));
	bst476.emplace(Node<int, string>(12, "value"));
	bst476.emplace(Node<int, string>(14, "value"));

	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(19)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(1)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(5)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(20)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(7)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(10)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(2)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(13)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(15)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(4)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(11)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(9)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(12)->getKey());
	bst476.ascend_printout(bst476.getRoot());
	bst476.deleteNode(bst476.at(14)->getKey());



	BST<int,string> bst477(Node<int, string> (2, "RootVal"));
	bst477.emplace(Node<int, string>(5, "value"));
	bst477.emplace(Node<int, string>(16, "value"));
	bst477.emplace(Node<int, string>(8, "value"));
	bst477.emplace(Node<int, string>(18, "value"));
	bst477.emplace(Node<int, string>(11, "value"));
	bst477.emplace(Node<int, string>(1, "value"));
	bst477.emplace(Node<int, string>(17, "value"));
	bst477.emplace(Node<int, string>(15, "value"));
	bst477.emplace(Node<int, string>(20, "value"));
	bst477.emplace(Node<int, string>(6, "value"));
	bst477.emplace(Node<int, string>(12, "value"));
	bst477.emplace(Node<int, string>(7, "value"));

	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(11)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(7)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(15)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(16)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(17)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(5)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(18)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(6)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(2)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(1)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(8)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(12)->getKey());
	bst477.ascend_printout(bst477.getRoot());
	bst477.deleteNode(bst477.at(20)->getKey());



	BST<int,string> bst478(Node<int, string> (18, "RootVal"));
	bst478.emplace(Node<int, string>(2, "value"));
	bst478.emplace(Node<int, string>(6, "value"));
	bst478.emplace(Node<int, string>(14, "value"));
	bst478.emplace(Node<int, string>(4, "value"));
	bst478.emplace(Node<int, string>(12, "value"));
	bst478.emplace(Node<int, string>(10, "value"));
	bst478.emplace(Node<int, string>(7, "value"));
	bst478.emplace(Node<int, string>(17, "value"));
	bst478.emplace(Node<int, string>(16, "value"));
	bst478.emplace(Node<int, string>(11, "value"));

	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(16)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(12)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(11)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(7)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(17)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(4)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(2)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(14)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(10)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(18)->getKey());
	bst478.ascend_printout(bst478.getRoot());
	bst478.deleteNode(bst478.at(6)->getKey());



	BST<int,string> bst479(Node<int, string> (15, "RootVal"));
	bst479.emplace(Node<int, string>(8, "value"));
	bst479.emplace(Node<int, string>(20, "value"));
	bst479.emplace(Node<int, string>(10, "value"));
	bst479.emplace(Node<int, string>(11, "value"));
	bst479.emplace(Node<int, string>(1, "value"));
	bst479.emplace(Node<int, string>(2, "value"));
	bst479.emplace(Node<int, string>(13, "value"));
	bst479.emplace(Node<int, string>(5, "value"));
	bst479.emplace(Node<int, string>(17, "value"));
	bst479.emplace(Node<int, string>(3, "value"));
	bst479.emplace(Node<int, string>(9, "value"));
	bst479.emplace(Node<int, string>(18, "value"));

	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(8)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(10)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(18)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(3)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(11)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(2)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(15)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(17)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(5)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(9)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(13)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(20)->getKey());
	bst479.ascend_printout(bst479.getRoot());
	bst479.deleteNode(bst479.at(1)->getKey());



	BST<int,string> bst480(Node<int, string> (12, "RootVal"));
	bst480.emplace(Node<int, string>(19, "value"));
	bst480.emplace(Node<int, string>(17, "value"));
	bst480.emplace(Node<int, string>(16, "value"));
	bst480.emplace(Node<int, string>(11, "value"));
	bst480.emplace(Node<int, string>(10, "value"));
	bst480.emplace(Node<int, string>(3, "value"));
	bst480.emplace(Node<int, string>(5, "value"));
	bst480.emplace(Node<int, string>(2, "value"));
	bst480.emplace(Node<int, string>(8, "value"));
	bst480.emplace(Node<int, string>(18, "value"));
	bst480.emplace(Node<int, string>(15, "value"));
	bst480.emplace(Node<int, string>(6, "value"));

	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(17)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(6)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(10)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(12)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(18)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(15)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(8)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(19)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(5)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(11)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(3)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(2)->getKey());
	bst480.ascend_printout(bst480.getRoot());
	bst480.deleteNode(bst480.at(16)->getKey());



	BST<int,string> bst481(Node<int, string> (19, "RootVal"));
	bst481.emplace(Node<int, string>(10, "value"));
	bst481.emplace(Node<int, string>(4, "value"));
	bst481.emplace(Node<int, string>(12, "value"));
	bst481.emplace(Node<int, string>(17, "value"));
	bst481.emplace(Node<int, string>(14, "value"));
	bst481.emplace(Node<int, string>(7, "value"));
	bst481.emplace(Node<int, string>(20, "value"));
	bst481.emplace(Node<int, string>(16, "value"));
	bst481.emplace(Node<int, string>(2, "value"));
	bst481.emplace(Node<int, string>(3, "value"));

	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(19)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(12)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(20)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(10)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(17)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(14)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(7)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(3)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(16)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(4)->getKey());
	bst481.ascend_printout(bst481.getRoot());
	bst481.deleteNode(bst481.at(2)->getKey());



	BST<int,string> bst482(Node<int, string> (8, "RootVal"));
	bst482.emplace(Node<int, string>(12, "value"));
	bst482.emplace(Node<int, string>(4, "value"));
	bst482.emplace(Node<int, string>(15, "value"));
	bst482.emplace(Node<int, string>(10, "value"));
	bst482.emplace(Node<int, string>(1, "value"));
	bst482.emplace(Node<int, string>(2, "value"));
	bst482.emplace(Node<int, string>(7, "value"));
	bst482.emplace(Node<int, string>(6, "value"));
	bst482.emplace(Node<int, string>(13, "value"));
	bst482.emplace(Node<int, string>(18, "value"));
	bst482.emplace(Node<int, string>(16, "value"));

	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(13)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(1)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(8)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(18)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(6)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(7)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(12)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(16)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(10)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(2)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(4)->getKey());
	bst482.ascend_printout(bst482.getRoot());
	bst482.deleteNode(bst482.at(15)->getKey());



	BST<int,string> bst483(Node<int, string> (6, "RootVal"));
	bst483.emplace(Node<int, string>(16, "value"));
	bst483.emplace(Node<int, string>(17, "value"));
	bst483.emplace(Node<int, string>(12, "value"));
	bst483.emplace(Node<int, string>(8, "value"));
	bst483.emplace(Node<int, string>(14, "value"));
	bst483.emplace(Node<int, string>(1, "value"));
	bst483.emplace(Node<int, string>(13, "value"));
	bst483.emplace(Node<int, string>(11, "value"));
	bst483.emplace(Node<int, string>(9, "value"));
	bst483.emplace(Node<int, string>(5, "value"));
	bst483.emplace(Node<int, string>(19, "value"));
	bst483.emplace(Node<int, string>(2, "value"));

	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(5)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(9)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(2)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(11)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(17)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(14)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(19)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(16)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(1)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(13)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(6)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(8)->getKey());
	bst483.ascend_printout(bst483.getRoot());
	bst483.deleteNode(bst483.at(12)->getKey());



	BST<int,string> bst484(Node<int, string> (9, "RootVal"));
	bst484.emplace(Node<int, string>(3, "value"));
	bst484.emplace(Node<int, string>(20, "value"));
	bst484.emplace(Node<int, string>(2, "value"));
	bst484.emplace(Node<int, string>(18, "value"));
	bst484.emplace(Node<int, string>(11, "value"));
	bst484.emplace(Node<int, string>(1, "value"));
	bst484.emplace(Node<int, string>(17, "value"));
	bst484.emplace(Node<int, string>(12, "value"));
	bst484.emplace(Node<int, string>(16, "value"));
	bst484.emplace(Node<int, string>(14, "value"));

	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(16)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(20)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(12)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(2)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(3)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(9)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(1)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(11)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(14)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(17)->getKey());
	bst484.ascend_printout(bst484.getRoot());
	bst484.deleteNode(bst484.at(18)->getKey());



	BST<int,string> bst485(Node<int, string> (18, "RootVal"));
	bst485.emplace(Node<int, string>(8, "value"));
	bst485.emplace(Node<int, string>(4, "value"));
	bst485.emplace(Node<int, string>(3, "value"));
	bst485.emplace(Node<int, string>(7, "value"));
	bst485.emplace(Node<int, string>(13, "value"));
	bst485.emplace(Node<int, string>(14, "value"));
	bst485.emplace(Node<int, string>(15, "value"));
	bst485.emplace(Node<int, string>(1, "value"));
	bst485.emplace(Node<int, string>(20, "value"));
	bst485.emplace(Node<int, string>(5, "value"));
	bst485.emplace(Node<int, string>(12, "value"));

	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(14)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(12)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(1)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(8)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(20)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(4)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(5)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(15)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(13)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(7)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(3)->getKey());
	bst485.ascend_printout(bst485.getRoot());
	bst485.deleteNode(bst485.at(18)->getKey());



	BST<int,string> bst486(Node<int, string> (15, "RootVal"));
	bst486.emplace(Node<int, string>(18, "value"));
	bst486.emplace(Node<int, string>(16, "value"));
	bst486.emplace(Node<int, string>(3, "value"));
	bst486.emplace(Node<int, string>(6, "value"));
	bst486.emplace(Node<int, string>(19, "value"));
	bst486.emplace(Node<int, string>(8, "value"));
	bst486.emplace(Node<int, string>(7, "value"));
	bst486.emplace(Node<int, string>(12, "value"));
	bst486.emplace(Node<int, string>(4, "value"));
	bst486.emplace(Node<int, string>(1, "value"));
	bst486.emplace(Node<int, string>(17, "value"));
	bst486.emplace(Node<int, string>(2, "value"));
	bst486.emplace(Node<int, string>(14, "value"));

	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(7)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(6)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(4)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(15)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(8)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(18)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(17)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(12)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(16)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(14)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(1)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(2)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(19)->getKey());
	bst486.ascend_printout(bst486.getRoot());
	bst486.deleteNode(bst486.at(3)->getKey());



	BST<int,string> bst487(Node<int, string> (6, "RootVal"));
	bst487.emplace(Node<int, string>(7, "value"));
	bst487.emplace(Node<int, string>(12, "value"));
	bst487.emplace(Node<int, string>(11, "value"));
	bst487.emplace(Node<int, string>(15, "value"));
	bst487.emplace(Node<int, string>(18, "value"));
	bst487.emplace(Node<int, string>(1, "value"));
	bst487.emplace(Node<int, string>(14, "value"));
	bst487.emplace(Node<int, string>(10, "value"));

	bst487.ascend_printout(bst487.getRoot());
	bst487.deleteNode(bst487.at(1)->getKey());
	bst487.ascend_printout(bst487.getRoot());
	bst487.deleteNode(bst487.at(15)->getKey());
	bst487.ascend_printout(bst487.getRoot());
	bst487.deleteNode(bst487.at(14)->getKey());
	bst487.ascend_printout(bst487.getRoot());
	bst487.deleteNode(bst487.at(7)->getKey());
	bst487.ascend_printout(bst487.getRoot());
	bst487.deleteNode(bst487.at(18)->getKey());
	bst487.ascend_printout(bst487.getRoot());
	bst487.deleteNode(bst487.at(12)->getKey());
	bst487.ascend_printout(bst487.getRoot());
	bst487.deleteNode(bst487.at(10)->getKey());
	bst487.ascend_printout(bst487.getRoot());
	bst487.deleteNode(bst487.at(11)->getKey());
	bst487.ascend_printout(bst487.getRoot());
	bst487.deleteNode(bst487.at(6)->getKey());



	BST<int,string> bst488(Node<int, string> (5, "RootVal"));
	bst488.emplace(Node<int, string>(20, "value"));
	bst488.emplace(Node<int, string>(17, "value"));
	bst488.emplace(Node<int, string>(18, "value"));
	bst488.emplace(Node<int, string>(4, "value"));
	bst488.emplace(Node<int, string>(1, "value"));
	bst488.emplace(Node<int, string>(16, "value"));
	bst488.emplace(Node<int, string>(10, "value"));
	bst488.emplace(Node<int, string>(8, "value"));
	bst488.emplace(Node<int, string>(15, "value"));
	bst488.emplace(Node<int, string>(9, "value"));

	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(4)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(9)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(5)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(1)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(17)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(18)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(20)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(15)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(16)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(10)->getKey());
	bst488.ascend_printout(bst488.getRoot());
	bst488.deleteNode(bst488.at(8)->getKey());



	BST<int,string> bst489(Node<int, string> (9, "RootVal"));
	bst489.emplace(Node<int, string>(5, "value"));
	bst489.emplace(Node<int, string>(4, "value"));
	bst489.emplace(Node<int, string>(18, "value"));
	bst489.emplace(Node<int, string>(13, "value"));
	bst489.emplace(Node<int, string>(14, "value"));
	bst489.emplace(Node<int, string>(20, "value"));
	bst489.emplace(Node<int, string>(11, "value"));
	bst489.emplace(Node<int, string>(7, "value"));
	bst489.emplace(Node<int, string>(8, "value"));
	bst489.emplace(Node<int, string>(6, "value"));
	bst489.emplace(Node<int, string>(10, "value"));
	bst489.emplace(Node<int, string>(1, "value"));

	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(7)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(1)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(11)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(5)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(9)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(10)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(20)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(13)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(18)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(8)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(14)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(6)->getKey());
	bst489.ascend_printout(bst489.getRoot());
	bst489.deleteNode(bst489.at(4)->getKey());



	BST<int,string> bst490(Node<int, string> (10, "RootVal"));
	bst490.emplace(Node<int, string>(9, "value"));
	bst490.emplace(Node<int, string>(16, "value"));
	bst490.emplace(Node<int, string>(7, "value"));
	bst490.emplace(Node<int, string>(12, "value"));
	bst490.emplace(Node<int, string>(14, "value"));
	bst490.emplace(Node<int, string>(8, "value"));
	bst490.emplace(Node<int, string>(5, "value"));
	bst490.emplace(Node<int, string>(17, "value"));
	bst490.emplace(Node<int, string>(13, "value"));
	bst490.emplace(Node<int, string>(3, "value"));
	bst490.emplace(Node<int, string>(20, "value"));
	bst490.emplace(Node<int, string>(4, "value"));

	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(20)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(13)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(14)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(10)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(17)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(16)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(9)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(4)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(12)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(8)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(3)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(7)->getKey());
	bst490.ascend_printout(bst490.getRoot());
	bst490.deleteNode(bst490.at(5)->getKey());



	BST<int,string> bst491(Node<int, string> (3, "RootVal"));
	bst491.emplace(Node<int, string>(6, "value"));
	bst491.emplace(Node<int, string>(16, "value"));
	bst491.emplace(Node<int, string>(1, "value"));
	bst491.emplace(Node<int, string>(12, "value"));
	bst491.emplace(Node<int, string>(7, "value"));
	bst491.emplace(Node<int, string>(20, "value"));
	bst491.emplace(Node<int, string>(2, "value"));
	bst491.emplace(Node<int, string>(18, "value"));
	bst491.emplace(Node<int, string>(8, "value"));
	bst491.emplace(Node<int, string>(4, "value"));
	bst491.emplace(Node<int, string>(11, "value"));
	bst491.emplace(Node<int, string>(9, "value"));

	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(3)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(7)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(11)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(8)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(18)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(12)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(4)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(6)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(1)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(2)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(9)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(16)->getKey());
	bst491.ascend_printout(bst491.getRoot());
	bst491.deleteNode(bst491.at(20)->getKey());



	BST<int,string> bst492(Node<int, string> (8, "RootVal"));
	bst492.emplace(Node<int, string>(12, "value"));
	bst492.emplace(Node<int, string>(13, "value"));
	bst492.emplace(Node<int, string>(20, "value"));
	bst492.emplace(Node<int, string>(18, "value"));
	bst492.emplace(Node<int, string>(2, "value"));
	bst492.emplace(Node<int, string>(3, "value"));
	bst492.emplace(Node<int, string>(17, "value"));
	bst492.emplace(Node<int, string>(14, "value"));
	bst492.emplace(Node<int, string>(1, "value"));
	bst492.emplace(Node<int, string>(19, "value"));
	bst492.emplace(Node<int, string>(15, "value"));
	bst492.emplace(Node<int, string>(7, "value"));
	bst492.emplace(Node<int, string>(16, "value"));

	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(13)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(14)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(2)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(19)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(8)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(17)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(3)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(15)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(7)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(1)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(20)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(12)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(16)->getKey());
	bst492.ascend_printout(bst492.getRoot());
	bst492.deleteNode(bst492.at(18)->getKey());



	BST<int,string> bst493(Node<int, string> (17, "RootVal"));
	bst493.emplace(Node<int, string>(8, "value"));
	bst493.emplace(Node<int, string>(18, "value"));
	bst493.emplace(Node<int, string>(15, "value"));
	bst493.emplace(Node<int, string>(6, "value"));
	bst493.emplace(Node<int, string>(4, "value"));
	bst493.emplace(Node<int, string>(13, "value"));
	bst493.emplace(Node<int, string>(5, "value"));
	bst493.emplace(Node<int, string>(20, "value"));
	bst493.emplace(Node<int, string>(1, "value"));
	bst493.emplace(Node<int, string>(2, "value"));
	bst493.emplace(Node<int, string>(9, "value"));
	bst493.emplace(Node<int, string>(11, "value"));

	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(6)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(15)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(1)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(8)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(11)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(17)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(5)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(9)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(2)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(18)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(20)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(13)->getKey());
	bst493.ascend_printout(bst493.getRoot());
	bst493.deleteNode(bst493.at(4)->getKey());



	BST<int,string> bst494(Node<int, string> (18, "RootVal"));
	bst494.emplace(Node<int, string>(4, "value"));
	bst494.emplace(Node<int, string>(2, "value"));
	bst494.emplace(Node<int, string>(9, "value"));
	bst494.emplace(Node<int, string>(19, "value"));
	bst494.emplace(Node<int, string>(7, "value"));
	bst494.emplace(Node<int, string>(10, "value"));
	bst494.emplace(Node<int, string>(5, "value"));
	bst494.emplace(Node<int, string>(8, "value"));
	bst494.emplace(Node<int, string>(20, "value"));
	bst494.emplace(Node<int, string>(3, "value"));
	bst494.emplace(Node<int, string>(13, "value"));

	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(2)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(18)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(5)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(13)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(8)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(20)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(3)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(7)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(4)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(19)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(10)->getKey());
	bst494.ascend_printout(bst494.getRoot());
	bst494.deleteNode(bst494.at(9)->getKey());



	BST<int,string> bst495(Node<int, string> (16, "RootVal"));
	bst495.emplace(Node<int, string>(2, "value"));
	bst495.emplace(Node<int, string>(5, "value"));
	bst495.emplace(Node<int, string>(17, "value"));
	bst495.emplace(Node<int, string>(7, "value"));
	bst495.emplace(Node<int, string>(4, "value"));
	bst495.emplace(Node<int, string>(12, "value"));
	bst495.emplace(Node<int, string>(6, "value"));
	bst495.emplace(Node<int, string>(15, "value"));
	bst495.emplace(Node<int, string>(14, "value"));
	bst495.emplace(Node<int, string>(19, "value"));
	bst495.emplace(Node<int, string>(18, "value"));
	bst495.emplace(Node<int, string>(3, "value"));
	bst495.emplace(Node<int, string>(13, "value"));
	bst495.emplace(Node<int, string>(11, "value"));

	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(4)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(7)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(17)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(19)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(14)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(11)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(2)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(5)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(13)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(15)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(18)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(3)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(16)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(12)->getKey());
	bst495.ascend_printout(bst495.getRoot());
	bst495.deleteNode(bst495.at(6)->getKey());



	BST<int,string> bst496(Node<int, string> (18, "RootVal"));
	bst496.emplace(Node<int, string>(11, "value"));
	bst496.emplace(Node<int, string>(19, "value"));
	bst496.emplace(Node<int, string>(9, "value"));
	bst496.emplace(Node<int, string>(8, "value"));
	bst496.emplace(Node<int, string>(4, "value"));
	bst496.emplace(Node<int, string>(17, "value"));
	bst496.emplace(Node<int, string>(6, "value"));
	bst496.emplace(Node<int, string>(12, "value"));
	bst496.emplace(Node<int, string>(3, "value"));
	bst496.emplace(Node<int, string>(14, "value"));

	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(3)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(17)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(8)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(4)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(6)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(12)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(9)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(14)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(19)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(11)->getKey());
	bst496.ascend_printout(bst496.getRoot());
	bst496.deleteNode(bst496.at(18)->getKey());



	BST<int,string> bst497(Node<int, string> (13, "RootVal"));
	bst497.emplace(Node<int, string>(10, "value"));
	bst497.emplace(Node<int, string>(11, "value"));
	bst497.emplace(Node<int, string>(5, "value"));
	bst497.emplace(Node<int, string>(17, "value"));
	bst497.emplace(Node<int, string>(1, "value"));
	bst497.emplace(Node<int, string>(4, "value"));
	bst497.emplace(Node<int, string>(12, "value"));
	bst497.emplace(Node<int, string>(15, "value"));
	bst497.emplace(Node<int, string>(2, "value"));
	bst497.emplace(Node<int, string>(6, "value"));

	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(6)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(17)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(11)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(5)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(4)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(2)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(12)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(1)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(15)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(13)->getKey());
	bst497.ascend_printout(bst497.getRoot());
	bst497.deleteNode(bst497.at(10)->getKey());



	BST<int,string> bst498(Node<int, string> (1, "RootVal"));
	bst498.emplace(Node<int, string>(16, "value"));
	bst498.emplace(Node<int, string>(13, "value"));
	bst498.emplace(Node<int, string>(2, "value"));
	bst498.emplace(Node<int, string>(9, "value"));
	bst498.emplace(Node<int, string>(20, "value"));
	bst498.emplace(Node<int, string>(19, "value"));
	bst498.emplace(Node<int, string>(12, "value"));
	bst498.emplace(Node<int, string>(8, "value"));
	bst498.emplace(Node<int, string>(17, "value"));
	bst498.emplace(Node<int, string>(4, "value"));
	bst498.emplace(Node<int, string>(7, "value"));
	bst498.emplace(Node<int, string>(6, "value"));

	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(13)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(2)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(7)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(16)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(1)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(19)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(12)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(8)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(6)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(9)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(4)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(17)->getKey());
	bst498.ascend_printout(bst498.getRoot());
	bst498.deleteNode(bst498.at(20)->getKey());



	BST<int,string> bst499(Node<int, string> (16, "RootVal"));
	bst499.emplace(Node<int, string>(14, "value"));
	bst499.emplace(Node<int, string>(2, "value"));
	bst499.emplace(Node<int, string>(1, "value"));
	bst499.emplace(Node<int, string>(3, "value"));
	bst499.emplace(Node<int, string>(18, "value"));
	bst499.emplace(Node<int, string>(7, "value"));
	bst499.emplace(Node<int, string>(5, "value"));
	bst499.emplace(Node<int, string>(8, "value"));
	bst499.emplace(Node<int, string>(10, "value"));
	bst499.emplace(Node<int, string>(15, "value"));

	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(5)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(16)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(8)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(3)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(1)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(15)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(14)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(18)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(2)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(7)->getKey());
	bst499.ascend_printout(bst499.getRoot());
	bst499.deleteNode(bst499.at(10)->getKey());
	return 0;
}
